Script started on Wednesday 29 January 2020 01:45:23 PM IST
[?1034h[collins@login3 Param_test]$ git push -u origin master[Kclc[K[K[K,[K.//s[K[Kscript.sh 
python: can't open file 'initExperiment.py': [Errno 2] No such file or directory
[collins@login3 Param_test]$ ./script.sh git push -u origin masterremote add origin https://github.com/technosap/Param_test.git[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[40Ppush -u origin master[13P./script.sh [Kvi script.sh 
[?1049h[?1h=[2;1H‚ñΩ[6n[1;1H  [1;1H[1;15r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[15;1H"script.sh" 15L, 447C[>c[1;1H[34m#!/bin/sh

#SBATCH -N 1
#SBATCH --ntasks-per-node=48
#SBATCH --time=05:00:00
#SBATCH --job-name=tensorflow
#SBATCH --error=job.%J.err
#SBATCH --output=job.%J.out
#SBATCH --partition=standard[m

[38;5;130mcd[m [35m$SLURM_SUBMIT_DIR[m

module load python/3.7
python initExperiment.py [38;5;130m'[m[31m/home/collins/Param_test/Od/OdorA_High.odor[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Op/Dur_6000_OdorDur_1000.protocol[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Lc/Locust_A.locust[m[38;5;130m'[m [38;5;130m'[m[31m1[m[38;5;130m'[m [35m$([m[14;1H[94m@                                                                                                                                                                                       [m[15;167H13,1[10CTop[13;1H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[1;14r[14;1H
[1;15r[13;1Hpython initExperiment.py [38;5;130m'[m[31m/home/collins/Param_test/Od/OdorA_High.odor[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Op/Dur_6000_OdorDur_1000.protocol[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Lc/Locust_A.locust[m[38;5;130m'[m [38;5;130m'[m[31m1[m[38;5;130m'[m [35m$(([14;1Hdate +‚Äù%b%d%Y_%H%M‚Äù)[m[15;1H[K[15;167H14,1[10C50%[13;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H15,0-1[8CBot[14;1H[?12l[?25h

[?1l>[?1049l
[1]+  Stopped                 vim script.sh
[collins@login3 Param_test]$ vi script.sh [1P./[C[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K[K[K[Kpython initExperiment.py git push -u origin masterremote add origin https://github.com/technosap/Param_test.git[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[40Ppush -u origin masterpython initExperiment.py [12Pvi script.sh[C
[?1049h[?1h=[2;1H‚ñΩ[6n[1;1H  [1;1H[1;15r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[15;1HE325: ATTENTION
Found a swap file by the name ".script.sh.swp"
[10Cowned by: collins   dated: Wed Jan 29 13:46:05 2020
[9Cfile name: ~collins/Param_test/script.sh
[10Cmodified: no
[9Cuser name: collins   host name: login3
[8Cprocess ID: 35165 (still running)
While opening file "script.sh"
[13Cdated: Wed Jan 29 13:44:52 2020

(1) Another program may be editing the same file.  If this is the case,
    be careful not to end up with two different instances of the same
    file when making changes.  Quit, or continue with caution.
(2) An edit session for this file crashed.
-- More --[?12l[?25h[15;1H[K[15;5HIf this is the case, use ":recover" or "vim -r script.sh"
-- More --[15;1H[K[15;5Hto recover the changes (see ":help recovery").
-- More --[15;1H[K[15;5HIf you did this already, delete the swap file ".script.sh.swp"
-- More --[15;1H[K[15;5Hto avoid this message.
-- More --[15;1H[K[15;1H
-- More --[15;1H[K[15;1HSwap file ".script.sh.swp" already exists!
-- More --[15;1H[K[15;1H[O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort:[15;1H[K[?25l[15;1H"script.sh" 15L, 447C
Using swap file ".script.sh.swp"
Original file "~/Param_test/script.sh"
Recovery completed. Buffer contents equals file contents.
You may want to delete the .swp file now.


[>cPress ENTER or type command to continue[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[1;1H[7L[?25l[1;1H[34m#!/bin/sh

#SBATCH -N 1
#SBATCH --ntasks-per-node=48
#SBATCH --time=05:00:00
#SBATCH --job-name=tensorflow
#SBATCH --error=job.%J.err
#SBATCH --output=job.%J.out[m[8;28H[K[9;1H[34m#SBATCH --partition=standard[m[9;30H[K[10;5H[K[11;1H[38;5;130mcd[m [35m$SLURM_SUBMIT_DIR[m[11;21H[K[12;5H[K[13;1Hmodule load python/3.7
python initExperiment.py [38;5;130m'[m[31m/home/collins/Param_test/Od/OdorA_High.odor[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Op/Dur_6000_OdorDur_1000.protocol[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Lc/Locust_A.locust[m[38;5;130m'[m [38;5;130m'[m[31m1[m[38;5;130m'[m [35m$([m[14;1H[94m@                                                                                                                                                                                       [m[15;1H[K[15;167H13,1[10CTop[13;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[13;1Hpython initExperiment.py [38;5;130m'[m[31m/home/collins/Param_test/Od/OdorA_High.odor[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Op/Dur_6000_OdorDur_1000.protocol[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Lc/Locust_A.locust[m[38;5;130m'[m [38;5;130m'[m[31m1[m[38;5;130m'[m [35m$(([14;1Hdate +‚Äù%b%d%Y_%H%M‚Äù)[m[15;167H[K[15;167H14,1[10C50%[13;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H15,0-1[8CBot[14;1H[?12l[?25h[?25l[15;168H4,1  [12;1H[?12l[?25h[?25l[15;168H3[11;1H[?12l[?25h[?25l[15;168H4[12;1H[?12l[?25h[?25l[15;168H5,0-1[14;1H[?12l[?25h[?25l[15;168H4,1  [12;1H[?12l[?25h[?25l[27m[m[H[2J[2;1H[94m~                                                                                                                                                                                       [3;1H~                                                                                                                                                                                       [4;1H~                                                                                                                                                                                       [5;1H~                                                                                                                                                                                       [6;1H~                                                                                                                                                                                       [7;1H~                                                                                                                                                                                       [8;1H~                                                                                                                                                                                       [9;1H~                                                                                                                                                                                       [10;1H~                                                                                                                                                                                       [11;1H~                                                                                                                                                                                       [12;1H~                                                                                                                                                                                       [13;1H~                                                                                                                                                                                       [14;1H~                                                                                                                                                                                       [m[15;167H15,0-1[8CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[2L[1;15r[1;1Hpython initExperiment.py [38;5;130m'[m[31m/home/collins/Param_test/Od/OdorA_High.odor[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Op/Dur_6000_OdorDur_1000.protocol[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Lc/Locust_A.locust[m[38;5;130m'[m [38;5;130m'[m[31m1[m[38;5;130m'[m [35m$(([2;1Hdate +‚Äù%b%d%Y_%H%M‚Äù)[m[15;167H[K[15;167H14,1[10CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1Hmodule load python/3.7[15;167H[K[15;167H13,1[10CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[15;167H[K[15;167H12,0-1[8CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1H[38;5;130mcd[m [35m$SLURM_SUBMIT_DIR[m[15;167H[K[15;167H11,1[10CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[15;167H[K[15;167H10,0-1[8CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1H[34m#SBATCH --partition=standard[m[15;167H[K[15;167H9,1[11CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1H[34m#SBATCH --output=job.%J.out[m[15;167H[K[15;167H8,1[11CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1H[34m#SBATCH --error=job.%J.err[m[15;167H[K[15;167H7,1[11CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1H[34m#SBATCH --job-name=tensorflow[m[15;167H[K[15;167H6,1[11CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1H[34m#SBATCH --time=05:00:00[m[15;167H[K[15;167H5,1[11CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1H[34m#SBATCH --ntasks-per-node=48[m[15;167H[K[15;167H4,1[11CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1H[34m#SBATCH -N 1[m[15;167H[K[15;167H3,1[11CBot[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[15;167H[K[15;167H2,0-1[9C50%[1;1H[?12l[?25h[?25l[1;14r[1;1H[L[1;15r[1;1H[34m#!/bin/sh[m[14;1H[94m@                                                                                                                                                                                       [m[15;167H[K[15;167H1,1[11CTop[1;1H[?12l[?25h[?25l[15;167H2,0-1[2;1H[?12l[?25h[?25l[15;167H3,1  [3;1H[?12l[?25h[?25l[15;167H4[4;1H[?12l[?25h[?25l[15;167H5[5;1H[?12l[?25h[?25l[15;167H6[6;1H[?12l[?25h[?25l[15;167H7[7;1H[?12l[?25h[?25l[15;167H8[8;1H[?12l[?25h[?25l[15;167H9[9;1H[?12l[?25h[?25l[15;167H10,0-1[10;1H[?12l[?25h[?25l[15;168H1,1  [11;1H[?12l[?25h[?25l[15;168H2,0-1[12;1H[?12l[?25h[?25l[15;168H3,1  [13;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[13;1Hpython initExperiment.py [38;5;130m'[m[31m/home/collins/Param_test/Od/OdorA_High.odor[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Op/Dur_6000_OdorDur_1000.protocol[m[38;5;130m'[m [38;5;130m'[m[31m/home/collins/Param_test/Lc/Locust_A.locust[m[38;5;130m'[m [38;5;130m'[m[31m1[m[38;5;130m'[m [35m$(([14;1Hdate +‚Äù%b%d%Y_%H%M‚Äù)[m[15;167H[K[15;167H14,1[10C50%[13;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H15,0-1[8CBot[14;1H[?12l[?25h[?25l[15;167H[K[15;1H:[?12l[?25hq[?25l[?12l[?25h[?25l[15;1H[K[15;1H[?1l>[?12l[?25h[?1049l[collins@login3 Param_test]$ vi script.sh [12@python initExperiment.py[Cgit push -u origin masterpython initExperiment.py 
Traceback (most recent call last):
  File "initExperiment.py", line 2, in <module>
    import numpy as np
ImportError: No module named numpy
[collins@login3 Param_test]$ module load python/[K3[K/3.7
[collins@login3 Param_test]$ module load python/3.7python initExperiment.py [12Pvi script.sh[C[12@python initExperiment.py[C
Traceback (most recent call last):
  File "initExperiment.py", line 11, in <module>
    odor_path = sys.argv[1]# easygui.fileopenbox(msg='Open Odor File',title='Odor Browser',default='/home/iiser/Collins-Saptarshi 2019b/DAMN/A. Odors/*.odor',filetypes=['*.odor'])
IndexError: list index out of range
[collins@login3 Param_test]$ python initExperiment.py '/home/collins/Param_test/Od/OdorA_High.odor' '/home/collins/Param_test/Op/Dur_6000_OdorDur_1000.protocol' '/home/collins/Param_te st/Lc/Locust_A.locust' '1' $(date +‚Äù%b%d%Y_%H%M‚Äù)
Metadata Acquired. Starting Simulation.
Welcome to the ORNs !!!
Generating ORN Responses...
1/100 ORN Types Completed2/100 ORN Types Completed3/100 ORN Types Completed4/100 ORN Types Completed5/100 ORN Types Completed6/100 ORN Types Completed7/100 ORN Types Completed8/100 ORN Types Completed9/100 ORN Types Completed10/100 ORN Types Completed11/100 ORN Types Completed12/100 ORN Types Completed13/100 ORN Types Completed14/100 ORN Types Completed15/100 ORN Types Completed16/100 ORN Types Completed17/100 ORN Types Completed18/100 ORN Types Completed19/100 ORN Types Completed20/100 ORN Types Completed21/100 ORN Types Completed22/100 ORN Types Completed23/100 ORN Types Completed24/100 ORN Types Completed25/100 ORN Types Completed26/100 ORN Types Completed27/100 ORN Types Completed28/100 ORN Types Completed29/100 ORN Types Completed30/100 ORN Types Completed31/100 ORN Types Completed32/100 ORN Types Completed33/100 ORN Types Completed34/100 ORN Types Completed35/100 ORN Types Completed36/100 ORN Types Completed37/100 ORN Types Completed38/100 ORN Types Completed39/100 ORN Types Completed40/100 ORN Types Completed41/100 ORN Types Completed42/100 ORN Types Completed43/100 ORN Types Completed44/100 ORN Types Completed45/100 ORN Types Completed46/100 ORN Types Completed47/100 ORN Types Completed48/100 ORN Types Completed49/100 ORN Types Completed50/100 ORN Types Completed51/100 ORN Types Completed52/100 ORN Types Completed53/100 ORN Types Completed54/100 ORN Types Completed55/100 ORN Types Completed56/100 ORN Types Completed57/100 ORN Types Completed58/100 ORN Types Completed59/100 ORN Types Completed60/100 ORN Types Completed61/100 ORN Types Completed62/100 ORN Types Completed63/100 ORN Types Completed64/100 ORN Types Completed65/100 ORN Types Completed66/100 ORN Types Completed67/100 ORN Types Completed68/100 ORN Types Completed69/100 ORN Types Completed70/100 ORN Types Completed71/100 ORN Types Completed72/100 ORN Types Completed73/100 ORN Types Completed74/100 ORN Types Completed75/100 ORN Types Completed76/100 ORN Types Completed77/100 ORN Types Completed78/100 ORN Types Completed79/100 ORN Types Completed80/100 ORN Types Completed81/100 ORN Types Completed82/100 ORN Types Completed83/100 ORN Types Completed84/100 ORN Types Completed85/100 ORN Types Completed86/100 ORN Types Completed87/100 ORN Types Completed88/100 ORN Types Completed89/100 ORN Types Completed90/100 ORN Types Completed91/100 ORN Types Completed92/100 ORN Types Completed93/100 ORN Types Completed94/100 ORN Types Completed95/100 ORN Types Completed96/100 ORN Types Completed97/100 ORN Types Completed98/100 ORN Types Completed99/100 ORN Types Completed100/100 ORN Types CompletedGeneration Complete. Plotting.
^X^CTraceback (most recent call last):
  File "initExperiment.py", line 27, in <module>
    call(['python', 'receptorLayer.py', odor_path, protocol_path, locust_path])
  File "/home/apps/anaconda3/lib/python3.7/subprocess.py", line 325, in call
    return p.wait(timeout=timeout)
  File "/home/apps/anaconda3/lib/python3.7/subprocess.py", line 990, in wait
    return self._wait(timeout=timeout)
  File "/home/apps/anaconda3/lib/python3.7/subprocess.py", line 1624, in _wait
    (pid, sts) = self._try_wait(0)
  File "/home/apps/anaconda3/lib/python3.7/subprocess.py", line 1582, in _try_wait
    (pid, sts) = os.waitpid(self.pid, wait_flags)
KeyboardInterrupt
[collins@login3 Param_test]$ clc[K[K[K[H[2J[collins@login3 Param_test]$ git[K[K[Kgit add[K[K[K[K[K[K[Kclc[K[K[Kls
antennalLobe.py   experiment_sweep.py  job.33050.err  [0m[38;5;27mLc[0m  [38;5;27mOp[0m                   [38;5;13mORN Response.png[0m  polarTools.py  receptorLayer.py  test.py           typescript
[38;5;13mEAG Response.png[0m  initExperiment.py    job.33050.out  [38;5;27mOd[0m  ORN Firing Data.npy  [38;5;13mORN Traces.png[0m    [38;5;27m__pycache__[0m    [38;5;34mscript.sh[0m         tf_integrator.py
[collins@login3 Param_test]$ rm *.py[K[Knpy
[collins@login3 Param_test]$ rm *.npy[K[K[Kpng
[collins@login3 Param_test]$ [H[2J[collins@login3 Param_test]$ rm *.pngnpyls[K
antennalLobe.py      initExperiment.py  job.33050.out  [0m[38;5;27mOd[0m  polarTools.py  receptorLayer.py  test.py           typescript
experiment_sweep.py  job.33050.err      [38;5;27mLc[0m             [38;5;27mOp[0m  [38;5;27m__pycache__[0m    [38;5;34mscript.sh[0m         tf_integrator.py
[collins@login3 Param_test]$ vi receptorLayer.py 
[?1049h[?1h=[2;1H‚ñΩ[6n[1;1H  [1;1H[1;15r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[15;1H"receptorLayer.py" 217L, 8025C[>c[1;1H[35mimport[m numpy [38;5;130mas[m np
[35mimport[m matplotlib.pyplot [38;5;130mas[m plt
[35mimport[m polarTools [38;5;130mas[m pt
[35mimport[m pickle
[35mimport[m sys

[36mprint[m([31m"Welcome to the ORNs !!!"[m)

[34m# Select the Odorant, Odor Delivery Protocol, Locust Model[m
odor_path = sys.argv[[31m1[m]
protocol_path = sys.argv[[31m2[m]
locust_path = sys.argv[[31m3[m]

[34m# Load the Odorant, Odor Delivery Protocol, Locust Model[m[15;167H1,1[11CTop[1;1H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[15;167H2[2;1H[?12l[?25h[?25l[15;167H3[3;1H[?12l[?25h[?25l[15;167H4[4;1H[?12l[?25h[?25l[15;167H5[5;1H[?12l[?25h[?25l[15;167H6,0-1[6;1H[?12l[?25h[?25l[15;167H7,1  [7;1H[?12l[?25h[?25l[15;167H8,0-1[8;1H[?12l[?25h[?25l[15;167H9,1  [9;1H[?12l[?25h[?25l[15;167H10,1[10;1H[?12l[?25h[?25l[15;168H1[11;1H[?12l[?25h[?25l[15;168H2[12;1H[?12l[?25h[?25l[15;168H3,0-1[13;1H[?12l[?25h[?25l[15;168H4,1  [14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;1H[38;5;130mwith[m [36mopen[m(odor_path, [31m'rb'[m) [38;5;130mas[m fp:[15;1H[K[15;167H15,1[11C0%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Hodor = pickle.load(fp)[15;167H[K[15;167H16,1[11C0%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;1H[38;5;130mwith[m [36mopen[m(protocol_path, [31m'rb'[m) [38;5;130mas[m fp:[15;167H[K[15;167H17,1[11C1%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Hprotocol = pickle.load(fp)[15;167H[K[15;167H18,1[11C1%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;1H[38;5;130mwith[m [36mopen[m(locust_path, [31m'rb'[m) [38;5;130mas[m fp:[15;167H[K[15;167H19,1[11C2%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Hlocust = pickle.load(fp)[15;167H[K[15;167H20,1[11C2%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H21,0-1[9C3%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;1H[34m# Define ORN Response Generator[m[15;167H[K[15;167H22,1[11C3%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;1H[38;5;130mdef[m [36mgenerate_orn[m(orn_number,duration,resolution,odorVec,odorStart,odorEnd): [34m# Function to generate single ORN Trace[m[15;167H[K[15;167H23,1[11C4%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H24,1[11C4%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Hbaseline = np.clip(locust[[31m'baseline_firing'[m]+locust[[31m'baseline_firing_variation'[m]*np.random.normal(),[31m1[m,[36mNone[m)/locust[[31m'peak_firing'[m] [34m# Baseline Firing Rate Ratio[m[15;167H[K[15;167H25,1[11C5%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Htrace = baseline*np.ones([36mint[m(duration/resolution)) [34m# Set Baseline activity for the Protocol Duration[m[15;167H[K[15;167H26,1[11C5%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Hrec_field = pt.generateUniform([31m1[m,odor[[31m'dim_odorspace'[m],seed=[36mint[m(locust[[31m'rec_seeds'[m][orn_number])) [34m# Receptive Field of ORNs in Odor Space[m[15;167H[K[15;167H27,1[11C6%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H28,1[11C6%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Hlatency = locust[[31m'latency'[m][orn_number] [34m# Latency of Response to Odor Presentation[m[15;167H[K[15;167H29,1[11C7%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Ht_rise = locust[[31m't_rise'[m][orn_number] [34m# Time to Rise to Peak[m[15;167H[K[15;167H30,1[11C7%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Ht_fall = locust[[31m't_fall'[m][orn_number] [34m# Response Decay Time[m[15;167H[K[15;167H31,1[11C8%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5Htuning = locust[[31m'tuning'[m][orn_number]/[31m2[m [34m# Odor Tuning-width / Sensitivity[m[15;167H[K[15;167H32,1[11C8%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H33,1[11C9%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5H[38;5;130mdef[m [36msigmoid[m(x,a1=locust[[31m'a1'[m],a2=locust[[31m'a2'[m]):     [34m# Sigmoid for Response[m[15;167H[K[15;167H34,1[11C9%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;9H[38;5;130mreturn[m [31m1[m/([31m1[m+np.exp(-a1*(x-a2)))[15;167H[K[15;167H35,1[10C10%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H36,0-1[8C10%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5H[38;5;130mdef[m [36mtanc[m(x, a=[31m0.06083939[m,b=[31m0.16323569[m,c=[31m1.73986923[m,d=[31m0.34085669[m):[15;167H[K[15;167H37,1[10C11%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;9H[38;5;130mreturn[m a+b*np.tan(c*x-d)[15;167H[K[15;167H38,1[10C11%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H39,1[10C12%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5HodorMag = np.linalg.norm(odorVec) [34m# Odor Concentration[m[15;167H[K[15;167H40,1[10C12%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5HcosSim = np.dot(odorVec,rec_field)/(np.linalg.norm(odorVec)*np.linalg.norm(rec_field)) [34m# Cosine Similarity wrt Odor[m[15;167H[K[15;167H41,1[10C13%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H42,0-1[8C13%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5H[38;5;130mif[m np.arccos(cosSim) < np.deg2rad([31m121[m):[34m#locust['inh_threshold']):   # Minimum Response Threshhold[m[15;167H[K[15;167H43,1[10C14%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;9Hres_strength = ([31m1[m-baseline)*tanc(odorMag*np.cos(np.arccos(cosSim)/[31m2[m)**tuning)[15;167H[K[15;167H44,1[10C14%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5H[38;5;130melse[m:[15;167H[K[15;167H45,1[10C15%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;9Hres_strength = -baseline*np.linalg.norm(odorVec)[15;167H[K[15;167H46,1[10C15%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[15;167H[K[15;167H47,1[10C16%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;5H[38;5;130mif[m locust[[31m'f_sharp'[m][orn_number]:[15;167H[K[15;167H48,1[10C16%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;9H[34m# Generate Sharp Trace[m[15;167H[K[15;167H49,1[10C17%[14;1H[?12l[?25h[?25l[1;14r[14;1H
[1;15r[14;9Hrise = np.arange([31m0[m,t_rise/[31m2[m,resolution)[15;167H[K[15;167H50,1[10C17%[14;1H[?12l[?25h[27m[m[H[2J[?25l[1;1H[35mimport[m numpy [38;5;130mas[m np
[35mimport[m matplotlib.pyplot [38;5;130mas[m plt
[35mimport[m polarTools [38;5;130mas[m pt
[35mimport[m pickle
[35mimport[m sys

[36mprint[m([31m"Welcome to the ORNs !!!"[m)

[34m# Select the Odorant, Odor Delivery Protocol, Locust Model[m
odor_path = sys.argv[[31m1[m]
protocol_path = sys.argv[[31m2[m]
locust_path = sys.argv[[31m3[m]

[34m# Load the Odorant, Odor Delivery Protocol, Locust Model[m
[38;5;130mwith[m [36mopen[m(odor_path, [31m'rb'[m) [38;5;130mas[m fp:
    odor = pickle.load(fp)
[38;5;130mwith[m [36mopen[m(protocol_path, [31m'rb'[m) [38;5;130mas[m fp:
    protocol = pickle.load(fp)
[38;5;130mwith[m [36mopen[m(locust_path, [31m'rb'[m) [38;5;130mas[m fp:
    locust = pickle.load(fp)

[34m# Define ORN Response Generator[m
[38;5;130mdef[m [36mgenerate_orn[m(orn_number,duration,resolution,odorVec,odorStart,odorEnd): [34m# Function to generate single ORN Trace[m[25;5Hbaseline = np.clip(locust[[31m'baseline_firing'[m]+locust[[31m'baseline_firing_variation'[m]*np.random.normal(),[31m1[m,[36mNone[m)/locust[[31m'peak_firing'[m] [34m# Baseline Firing Rate Ratio[m
    trace = baseline*np.ones([36mint[m(duration/resolution)) [34m# Set Baseline activity for the Protocol Duration[m
    rec_field = pt.generateUniform([31m1[m,odor[[31m'dim_odorspace'[m],seed=[36mint[m(locust[[31m'rec_seeds'[m][orn_number])) [34m# Receptive Field of ORNs in Odor Space[m[29;5Hlatency = locust[[31m'latency'[m][orn_number] [34m# Latency of Response to Odor Presentation[m
    t_rise = locust[[31m't_rise'[m][orn_number] [34m# Time to Rise to Peak[m
    t_fall = locust[[31m't_fall'[m][orn_number] [34m# Response Decay Time[m
    tuning = locust[[31m'tuning'[m][orn_number]/[31m2[m [34m# Odor Tuning-width / Sensitivity[m[34;5H[38;5;130mdef[m [36msigmoid[m(x,a1=locust[[31m'a1'[m],a2=locust[[31m'a2'[m]):     [34m# Sigmoid for Response[m[35;9H[38;5;130mreturn[m [31m1[m/([31m1[m+np.exp(-a1*(x-a2)))[37;5H[38;5;130mdef[m [36mtanc[m(x, a=[31m0.06083939[m,b=[31m0.16323569[m,c=[31m1.73986923[m,d=[31m0.34085669[m):[38;9H[38;5;130mreturn[m a+b*np.tan(c*x-d)[40;5HodorMag = np.linalg.norm(odorVec) [34m# Odor Concentration[m
    cosSim = np.dot(odorVec,rec_field)/(np.linalg.norm(odorVec)*np.linalg.norm(rec_field)) [34m# Cosine Similarity wrt Odor[m[43;5H[38;5;130mif[m np.arccos(cosSim) < np.deg2rad([31m121[m):[34m#locust['inh_threshold']):   # Minimum Response Threshhold[m[44;9Hres_strength = ([31m1[m-baseline)*tanc(odorMag*np.cos(np.arccos(cosSim)/[31m2[m)**tuning)
    [38;5;130melse[m:[46;9Hres_strength = -baseline*np.linalg.norm(odorVec)[48;5H[38;5;130mif[m locust[[31m'f_sharp'[m][orn_number]:[49;9H[34m# Generate Sharp Trace[m[50;9Hrise = np.arange([31m0[m,t_rise/[31m2[m,resolution)[51;9Hrise = baseline+res_strength*[31m2[m*np.exp([31m1[m)/t_rise*rise*np.exp(-[31m2[m*rise/t_rise)[52;9HriseStartIndex = [36mint[m((odorStart+latency)/resolution)[53;9HriseEndIndex = riseStartIndex+rise.shape[[31m0[m][54;9Htrace[riseStartIndex:riseEndIndex] = rise[55;9Hpeak = rise[-[31m1[m][56;9Hfall = np.linspace([31m0[m,duration-riseEndIndex*resolution,trace.shape[[31m0[m]-riseEndIndex)[57;9Hfall = (peak-baseline)*np.exp(-fall/t_fall)+baseline[58;9HfallStartIndex = riseEndIndex[59;9Htrace[fallStartIndex:] = fall
    [38;5;130melse[m:[61;9H[34m# Generate Broad Trace[m[62;221H50,1[10CTop[50;1H[?12l[?25h[?25l[62;222H1[51;1H[?12l[?25h[?25l[62;222H2[52;1H[?12l[?25h[?25l[62;222H3[53;1H[?12l[?25h[?25l[62;222H4[54;1H[?12l[?25h[?25l[62;222H5[55;1H[?12l[?25h[?25l[62;222H6[56;1H[?12l[?25h[?25l[62;222H7[57;1H[?12l[?25h[?25l[62;222H8[58;1H[?12l[?25h[?25l[62;222H9[59;1H[?12l[?25h[?25l[62;221H60[60;1H[?12l[?25h[?25l[62;222H1[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hrise = np.arange([31m0[m,t_rise,resolution)[62;221H[K[62;221H62,1[11C0%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hrise = baseline+res_strength*np.exp([31m1[m)/t_rise*rise*np.exp(-rise/t_rise)[62;221H[K[62;221H63,1[11C1%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HriseStartIndex = [36mint[m((odorStart+latency)/resolution)[62;221H[K[62;221H64,1[11C1%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HriseEndIndex = [36mint[m((odorStart+latency)/resolution)+rise.shape[[31m0[m][62;221H[K[62;221H65,1[11C2%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htrace[riseStartIndex:riseEndIndex] = rise[62;221H[K[62;221H66,1[11C3%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hpeak_1 = rise[-[31m1[m][62;221H[K[62;221H67,1[11C3%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hadaptation_rate = locust[[31m'adaptation_extent'[m][orn_number] [34m# Amplitude of Adaptation-related Decay[m[62;221H[K[62;221H68,1[11C4%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Ht_adaptation = locust[[31m't_adaptation'[m][orn_number] [34m# Odor Adaptation Time[m[62;221H[K[62;221H69,1[11C5%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hadaptation = np.arange([31m0[m,([36mint[m(odorEnd/resolution)-riseEndIndex)*resolution,resolution)[62;221H[K[62;221H70,1[11C5%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hadaptation = (peak_1-(adaptation_rate*res_strength+baseline))*np.exp(-adaptation/t_adaptation)+(adaptation_rate*res_strength+baseline)[62;221H[K[62;221H71,1[11C6%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HadaptationStartIndex = riseEndIndex[62;221H[K[62;221H72,1[11C7%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HadaptationEndIndex = adaptationStartIndex+adaptation.shape[[31m0[m][62;221H[K[62;221H73,1[11C7%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htrace[adaptationStartIndex:adaptationEndIndex] = adaptation[62;221H[K[62;221H74,1[11C8%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hpeak_2 = adaptation[-[31m1[m][62;221H[K[62;221H75,1[11C8%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hfall = np.arange([31m0[m,(trace.shape[[31m0[m]-adaptationEndIndex)*resolution,resolution)[62;221H[K[62;221H76,1[11C9%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hfall = (peak_2-baseline)*np.exp(-fall/t_fall) + baseline[62;221H[K[62;221H77,1[10C10%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HfallStartIndex = adaptationEndIndex[62;221H[K[62;221H78,1[10C10%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htrace[fallStartIndex:] = fall[62;221H[K[62;221H79,1[10C11%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H80,1[10C12%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Htrace = trace*locust[[31m'peak_firing'[m] [34m# Scale to Peak Firing Rate[m[62;221H[K[62;221H81,1[10C12%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H82,1[10C13%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[38;5;130mreturn[m trace[62;221H[K[62;221H83,1[10C14%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H84,0-1[8C14%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Generate Odor Response[m[62;221H[K[62;221H85,1[10C15%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H86,0-1[8C16%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"Generating ORN Responses..."[m)[62;221H[K[62;221H87,1[10C16%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H88,0-1[8C17%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Horns = [][62;221H[K[62;221H89,1[10C17%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[38;5;130mfor[m i [38;5;130min[m [36mrange[m(locust[[31m'ORN_types'[m]): [34m# Generate ORN types[m[62;221H[K[62;221H90,1[10C18%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Horns.append(generate_orn(i,protocol[[31m'duration'[m],protocol[[31m'resolution'[m],odor[[31m'odor_vector'[m],protocol[[31m'odor_start'[m],protocol[[31m'odor_start'[m]+protocol[[31m'odor_duration'[m]))[62;221H[K[62;221H91,1[10C19%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[36mprint[m([31m'{}/{} ORN Types Completed'[m.[36mformat[m(i+[31m1[m,locust[[31m'ORN_types'[m]), end = [31m'[m[35m\r[m[31m'[m)[62;221H[K[62;221H92,1[10C19%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H93,0-1[8C20%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Horns = np.array(orns*locust[[31m'ORN_replicates'[m])[62;221H[K[62;221H94,1[10C21%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H95,0-1[8C21%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"Generation Complete. Plotting."[m)[62;221H[K[62;221H96,1[10C22%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H97,0-1[8C23%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Plot the ORN Response[m[62;221H[K[62;221H98,1[10C23%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.figure()[62;221H[K[62;221H99,1[10C24%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Horder = np.argsort(orns.[36mmax[m(axis=[31m1[m))[62;221H[K[62;221H100,1[9C25%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.imshow(orns[order[::-[31m1[m],::[31m100[m], aspect=[31m'auto'[m)[62;221H[K[62;221H101,1[9C25%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.colorbar()[62;221H[K[62;221H102,1[9C26%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.xlabel([31m'Time (in ms)'[m)[62;221H[K[62;221H103,1[9C26%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.ylabel([31m'Neuron Number'[m)[62;221H[K[62;221H104,1[9C27%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.title([31m'ORN Response'[m)[62;221H[K[62;221H105,1[9C28%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.savefig([31m'ORN Response.png'[m)[62;221H[K[62;221H106,1[9C28%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H107,0-1[7C29%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Plot the ORN Traces[m[62;221H[K[62;221H108,1[9C30%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.figure()[62;221H[K[62;221H109,1[9C30%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Horder = np.argsort(orns.mean(axis=[31m1[m))[62;221H[K[62;221H110,1[9C31%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.plot(orns[:,::[31m100[m].T)[62;221H[K[62;221H111,1[9C32%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.xlabel([31m'Time (in ms)'[m)[62;221H[K[62;221H112,1[9C32%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.ylabel([31m'Neuron Number'[m)[62;221H[K[62;221H113,1[9C33%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.title([31m'ORN Traces'[m)[62;221H[K[62;221H114,1[9C33%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.savefig([31m'ORN Traces.png'[m)[62;221H[K[62;221H115,1[9C34%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H116,0-1[7C35%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Plot EAD[m[62;221H[K[62;221H117,1[9C35%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.figure()[62;221H[K[62;221H118,1[9C36%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.plot(orns.mean(axis=[31m0[m))[62;221H[K[62;221H119,1[9C37%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.xlabel([31m'Time (in ms)'[m)[62;221H[K[62;221H120,1[9C37%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.ylabel([31m'Mean Firing Rate'[m)[62;221H[K[62;221H121,1[9C38%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.title([31m'EAG Response'[m)[62;221H[K[62;221H122,1[9C39%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.savefig([31m'EAG Response.png'[m)[62;221H[K[62;221H123,1[9C39%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H124,0-1[7C40%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Save ORN Data[m[62;221H[K[62;221H125,1[9C41%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hnp.save([31m'ORN Firing Data'[m,orns[:,::[31m100[m])[62;221H[K[62;221H126,1[9C41%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H127,0-1[7C42%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hinit_theta = np.random.uniform(size=orns.shape[[31m0[m])[62;221H[K[62;221H128,1[9C42%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hrandom_normal = np.random.normal(size=orns.shape)[62;221H[K[62;221H129,1[9C43%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H130,0-1[7C44%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):[62;221H[K[62;221H131,1[9C44%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Hspike = np.zeros(fr.shape)[62;221H[K[62;221H132,1[9C45%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Htheta = init_theta[62;221H[K[62;221H133,1[9C46%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[31m1[m]):[62;221H[K[62;221H134,1[9C46%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hdtheta = resolution/[31m1000[m*fr[:,i][62;221H[K[62;221H135,1[9C47%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htheta = theta + dtheta + [31m0.005[m*random_normal[:,i][62;221H[K[62;221H136,1[9C48%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hspike[:,i]= theta>[31m1[m[62;221H[K[62;221H137,1[9C48%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htheta = np.where(theta>[31m1[m,np.zeros(theta.shape[[31m0[m]),theta)[62;221H[K[62;221H138,1[9C49%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9H[38;5;130mif[m i%[36mint[m([31m1000[m/resolution)==[31m0[m:[62;221H[K[62;221H139,1[9C50%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;13H[36mprint[m([31m'ORN Spiking {}/{} ms Completed'[m.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[31m1[m]*resolution)), end = [31m'[m[35m\r[m[31m'[m)[62;221H[K[62;221H140,1[9C50%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[38;5;130mreturn[m spike[62;221H[K[62;221H141,1[9C51%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H142,0-1[7C51%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Horns_spike = spike_generator(orns,[31m0.01[m)[62;221H[K[62;221H143,1[9C52%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m()[62;221H[K[62;221H144,1[9C53%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H145,0-1[7C53%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Generate Antennal Output[m[62;221H[K[62;221H146,1[9C54%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H147,0-1[7C55%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"Generating Antennal Input..."[m)[62;221H[K[62;221H148,1[9C55%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H149,0-1[7C56%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1HORN_Output_s = np.matmul(orns_spike.T,locust[[31m'ORN-AL'[m]).T[62;221H[K[62;221H150,1[9C57%[61;1H[?12l[?25h[?25l[62;222H49,0-1[60;1H[?12l[?25h[?25l[62;223H8,1  [59;1H[?12l[?25h[?25l[62;223H7,0-1[58;1H[?12l[?25h[?25l[62;223H6,1  [57;1H[?12l[?25h[?25l[62;223H5,0-1[56;1H[?12l[?25h[?25l[62;223H4,1  [55;1H[?12l[?25h[?25l[62;223H3[54;1H[?12l[?25h[?25l[62;223H2,0-1[53;1H[?12l[?25h[?25l[62;223H1,1  [52;1H[?12l[?25h[?25l[62;223H0[51;1H[?12l[?25h[?25l[62;222H39[50;1H[?12l[?25h[?25l[62;223H8[49;1H[?12l[?25h[?25l[62;223H7[48;1H[?12l[?25h[?25l[62;223H6[47;1H[?12l[?25h[?25l[62;223H5[46;1H[?12l[?25h[?25l[62;223H4[45;1H[?12l[?25h[?25l[62;223H3[44;1H[?12l[?25h[?25l[62;223H2[43;1H[?12l[?25h[?25l[62;223H1[42;1H[?12l[?25h[?25l[62;223H0,0-1[41;1H[?12l[?25h[?25l[62;222H29,1  [40;1H[?12l[?25h[?25l[62;223H8[39;1H[?12l[?25h[?25l[62;223H7,0-1[38;1H[?12l[?25h[?25l[62;223H6,1  [37;1H[?12l[?25h[?25l[62;223H5[36;1H[?12l[?25h[?25l[62;223H4,0-1[35;1H[?12l[?25h[?25l[62;223H3,1  [34;1H[?12l[?25h[?25l[62;223H2[33;1H[?12l[?25h[?25l[62;223H1[32;1H[?12l[?25h[?25l[62;223H0[31;1H[?12l[?25h[?25l[62;222H19[30;1H[?12l[?25h[?25l[62;223H8[29;1H[?12l[?25h[?25l[62;223H7[28;1H[?12l[?25h[?25l[62;223H6,0-1[27;1H[?12l[?25h[?25l[62;223H5,1  [26;1H[?12l[?25h[?25l[62;223H4[25;1H[?12l[?25h[?25l[62;223H3[24;1H[?12l[?25h[?25l[62;223H2[23;1H[?12l[?25h[?25l[62;223H1[22;1H[?12l[?25h[?25l[62;223H0[21;1H[?12l[?25h[?25l[62;222H09[20;1H[?12l[?25h[?25l[62;223H8[19;1H[?12l[?25h[?25l[62;223H7,0-1[18;1H[?12l[?25h[?25l[62;223H6,1  [17;1H[?12l[?25h[?25l[62;223H5[16;1H[?12l[?25h[?25l[62;223H4[15;1H[?12l[?25h[?25l[62;223H3[14;1H[?12l[?25h[?25l[62;223H2[13;1H[?12l[?25h[?25l[62;223H1[12;1H[?12l[?25h[?25l[62;223H0[11;1H[?12l[?25h[?25l[62;221H99,1 [10;1H[?12l[?25h[?25l[62;222H8[9;1H[?12l[?25h[?25l[62;222H7,0-1[8;1H[?12l[?25h[?25l[62;222H6,1  [7;1H[?12l[?25h[?25l[62;222H5,0-1[6;1H[?12l[?25h[?25l[62;222H4,1  [5;1H[?12l[?25h[?25l[62;222H5,0-1[6;1H[?12l[?25h[?25l[62;222H6,1  [7;1H[?12l[?25h[?25l[62;222H7,0-1[8;1H[?12l[?25h[?25l[62;222H8,1  [9;1H[?12l[?25h[?25l[62;222H7,0-1[8;1H[?12l[?25h[?25l[62;222H8,1  [9;1H[?12l[?25h[?25l[62;222H7,0-1[8;1H[?12l[?25h[?25l[62;222H8,1  [9;1H[?12l[?25h[?25l[62;222H9[10;1H[?12l[?25h[?25l[62;1H[1m-- INSERT --[m[62;221H[K[62;221H99,2[10C57%[10;2H[?12l[?25h[?25l[62;222H8[9;2H[?12l[?25h[?25l[62;222H7,1[8;1H[?12l[?25h[?25l[27m[m[H[2J[2;1HORN_Output_s = np.matmul(orns_spike.T,locust[[31m'ORN-AL'[m]).T

p_n = [36mint[m([31m0.75[m*locust[[31m'AL_n'[m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[31m0[m]):
    cfilter = [31m0.5[m*np.ones([31m30[m)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[31m'same'[m)
    [36mprint[m([31m'{}/{} Acetylcholine Concentration Integration Completed'[m.[36mformat[m(i+[31m1[m,locust[[31m'AL_n'[m]), end = [31m'[m[35m\r[m[31m'[m)
[36mprint[m()

plt.figure(figsize=([31m12[m,[31m3[m))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m]))
plt.imshow(ORN_Output_current[order,::[31m100[m], aspect=[31m'auto'[m)
plt.colorbar()
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'Neuron Number'[m)
plt.savefig([31m'Acetylcholine Concentration.png'[m)

ep=[31m0.01[m
a = [31m10.0[m
b = [31m0.2[m

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([31m1.0[m-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[31m50[m]*[31m90[m+[[31m700[m]*[31m30[m) - b*o
    [38;5;130mreturn[m do

time = np.arange(ORN_Output_current.shape[[31m1[m])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,[31m0[m]= [31m0[m

[38;5;130mfor[m i [38;5;130min[m [36mrange[m([31m1[m,time.shape[[31m0[m]):
    X[:,i] = X[:,i-[31m1[m] + ep*f(X[:,i-[31m1[m],time[i-[31m1[m])
    [38;5;130mif[m i%[36mint[m([31m100[m/ep) == [31m0[m:[38;9H[36mprint[m([31m'{}s/{}s Acetylcholine Receptor Integration Completed'[m.[36mformat[m(i*ep,time.shape[[31m0[m]*ep), end = [31m'[m[35m\r[m[31m'[m)
[36mprint[m()

[36mprint[m([31m"Generation Complete"[m)

[34m# Plot PN Current [m
plt.figure()
plt.plot(X[:p_n,::[31m100[m].T)
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'PN Current Input'[m)
plt.savefig([31m'PN Current.png'[m)

[34m# Plot LN Current [m
plt.figure()
plt.plot(X[p_n:,::[31m100[m].T)
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'LN Current Input'[m)
plt.savefig([31m'LN Current.png'[m)

[34m# Plot Overall Current[m
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m]))
plt.imshow(X[order,::[31m100[m], aspect=[31m'auto'[m)
plt.colorbar()
[1m-- INSERT --[m[208C149,1[9C94%[1;1H[?12l[?25h[?25l[27m[m[H[2J[1;1Hplt.imshow(X[order,::[31m100[m], aspect=[31m'auto'[m)
plt.colorbar()
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'Neuron Number'[m)
plt.savefig([31m'AL Input Current.png'[m)

[34m# Save Current Input[m
np.save([31m'current_input'[m,X)

[36mprint[m([31m"'Information has been transferred to the Antennal Lobe. Thank you for using our services.' - ORNs"[m)
[94m~                                                                                                                                                                                                                                             [12;1H~                                                                                                                                                                                                                                             [13;1H~                                                                                                                                                                                                                                             [14;1H~                                                                                                                                                                                                                                             [15;1H~                                                                                                                                                                                                                                             [16;1H~                                                                                                                                                                                                                                             [17;1H~                                                                                                                                                                                                                                             [18;1H~                                                                                                                                                                                                                                             [19;1H~                                                                                                                                                                                                                                             [20;1H~                                                                                                                                                                                                                                             [21;1H~                                                                                                                                                                                                                                             [22;1H~                                                                                                                                                                                                                                             [23;1H~                                                                                                                                                                                                                                             [24;1H~                                                                                                                                                                                                                                             [25;1H~                                                                                                                                                                                                                                             [26;1H~                                                                                                                                                                                                                                             [27;1H~                                                                                                                                                                                                                                             [28;1H~                                                                                                                                                                                                                                             [29;1H~                                                                                                                                                                                                                                             [30;1H~                                                                                                                                                                                                                                             [31;1H~                                                                                                                                                                                                                                             [32;1H~                                                                                                                                                                                                                                             [33;1H~                                                                                                                                                                                                                                             [34;1H~                                                                                                                                                                                                                                             [35;1H~                                                                                                                                                                                                                                             [36;1H~                                                                                                                                                                                                                                             [37;1H~                                                                                                                                                                                                                                             [38;1H~                                                                                                                                                                                                                                             [39;1H~                                                                                                                                                                                                                                             [40;1H~                                                                                                                                                                                                                                             [41;1H~                                                                                                                                                                                                                                             [42;1H~                                                                                                                                                                                                                                             [43;1H~                                                                                                                                                                                                                                             [44;1H~                                                                                                                                                                                                                                             [45;1H~                                                                                                                                                                                                                                             [46;1H~                                                                                                                                                                                                                                             [47;1H~                                                                                                                                                                                                                                             [48;1H~                                                                                                                                                                                                                                             [49;1H~                                                                                                                                                                                                                                             [50;1H~                                                                                                                                                                                                                                             [51;1H~                                                                                                                                                                                                                                             [52;1H~                                                                                                                                                                                                                                             [53;1H~                                                                                                                                                                                                                                             [54;1H~                                                                                                                                                                                                                                             [55;1H~                                                                                                                                                                                                                                             [56;1H~                                                                                                                                                                                                                                             [57;1H~                                                                                                                                                                                                                                             [58;1H~                                                                                                                                                                                                                                             [59;1H~                                                                                                                                                                                                                                             [60;1H~                                                                                                                                                                                                                                             [61;1H~                                                                                                                                                                                                                                             [m[62;1H[1m-- INSERT --[m[208C208,1[9CBot[1;1H[?12l[?25h[?25l[27m[m[H[2J[2;1HORN_Output_s = np.matmul(orns_spike.T,locust[[31m'ORN-AL'[m]).T

p_n = [36mint[m([31m0.75[m*locust[[31m'AL_n'[m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[31m0[m]):
    cfilter = [31m0.5[m*np.ones([31m30[m)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[31m'same'[m)
    [36mprint[m([31m'{}/{} Acetylcholine Concentration Integration Completed'[m.[36mformat[m(i+[31m1[m,locust[[31m'AL_n'[m]), end = [31m'[m[35m\r[m[31m'[m)
[36mprint[m()

plt.figure(figsize=([31m12[m,[31m3[m))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m]))
plt.imshow(ORN_Output_current[order,::[31m100[m], aspect=[31m'auto'[m)
plt.colorbar()
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'Neuron Number'[m)
plt.savefig([31m'Acetylcholine Concentration.png'[m)

ep=[31m0.01[m
a = [31m10.0[m
b = [31m0.2[m

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([31m1.0[m-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[31m50[m]*[31m90[m+[[31m700[m]*[31m30[m) - b*o
    [38;5;130mreturn[m do

time = np.arange(ORN_Output_current.shape[[31m1[m])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,[31m0[m]= [31m0[m

[38;5;130mfor[m i [38;5;130min[m [36mrange[m([31m1[m,time.shape[[31m0[m]):
    X[:,i] = X[:,i-[31m1[m] + ep*f(X[:,i-[31m1[m],time[i-[31m1[m])
    [38;5;130mif[m i%[36mint[m([31m100[m/ep) == [31m0[m:[38;9H[36mprint[m([31m'{}s/{}s Acetylcholine Receptor Integration Completed'[m.[36mformat[m(i*ep,time.shape[[31m0[m]*ep), end = [31m'[m[35m\r[m[31m'[m)
[36mprint[m()

[36mprint[m([31m"Generation Complete"[m)

[34m# Plot PN Current [m
plt.figure()
plt.plot(X[:p_n,::[31m100[m].T)
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'PN Current Input'[m)
plt.savefig([31m'PN Current.png'[m)

[34m# Plot LN Current [m
plt.figure()
plt.plot(X[p_n:,::[31m100[m].T)
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'LN Current Input'[m)
plt.savefig([31m'LN Current.png'[m)

[34m# Plot Overall Current[m
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m]))
plt.imshow(X[order,::[31m100[m], aspect=[31m'auto'[m)
plt.colorbar()
[1m-- INSERT --[m[208C209,1[9C94%[61;1H[?12l[?25h[?25l[27m[m[H[2J[1;1H[38;5;130mfor[m i [38;5;130min[m [36mrange[m(locust[[31m'ORN_types'[m]): [34m# Generate ORN types[m
    orns.append(generate_orn(i,protocol[[31m'duration'[m],protocol[[31m'resolution'[m],odor[[31m'odor_vector'[m],protocol[[31m'odor_start'[m],protocol[[31m'odor_start'[m]+protocol[[31m'odor_duration'[m]))
    [36mprint[m([31m'{}/{} ORN Types Completed'[m.[36mformat[m(i+[31m1[m,locust[[31m'ORN_types'[m]), end = [31m'[m[35m\r[m[31m'[m)

orns = np.array(orns*locust[[31m'ORN_replicates'[m])

[36mprint[m([31m"Generation Complete. Plotting."[m)

[34m# Plot the ORN Response[m
plt.figure()
order = np.argsort(orns.[36mmax[m(axis=[31m1[m))
plt.imshow(orns[order[::-[31m1[m],::[31m100[m], aspect=[31m'auto'[m)
plt.colorbar()
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'Neuron Number'[m)
plt.title([31m'ORN Response'[m)
plt.savefig([31m'ORN Response.png'[m)

[34m# Plot the ORN Traces[m
plt.figure()
order = np.argsort(orns.mean(axis=[31m1[m))
plt.plot(orns[:,::[31m100[m].T)
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'Neuron Number'[m)
plt.title([31m'ORN Traces'[m)
plt.savefig([31m'ORN Traces.png'[m)

[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[31m0[m))
plt.xlabel([31m'Time (in ms)'[m)
plt.ylabel([31m'Mean Firing Rate'[m)
plt.title([31m'EAG Response'[m)
plt.savefig([31m'EAG Response.png'[m)

[34m# Save ORN Data[m
np.save([31m'ORN Firing Data'[m,orns[:,::[31m100[m])

init_theta = np.random.uniform(size=orns.shape[[31m0[m])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[31m1[m]):[46;9Hdtheta = resolution/[31m1000[m*fr[:,i][47;9Htheta = theta + dtheta + [31m0.005[m*random_normal[:,i][48;9Hspike[:,i]= theta>[31m1[m[49;9Htheta = np.where(theta>[31m1[m,np.zeros(theta.shape[[31m0[m]),theta)[50;9H[38;5;130mif[m i%[36mint[m([31m1000[m/resolution)==[31m0[m:[51;13H[36mprint[m([31m'ORN Spiking {}/{} ms Completed'[m.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[31m1[m]*resolution)), end = [31m'[m[35m\r[m[31m'[m)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[31m0.01[m)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([31m"Generating Antennal Input..."[m)

ORN_Output_s = np.matmul(orns_spike.T,locust[[31m'ORN-AL'[m]).T
[1m-- INSERT --[m[208C150,1[9C57%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H151,1[9C57%[61;1H[?12l[?25h[?25l[62;223H0[60;1H[?12l[?25h[?25l[62;222H49[59;1H[?12l[?25h[?25l[62;223H8[58;1H[?12l[?25h[?25l[62;223H7[57;1H[?12l[?25h[?25l[62;223H6[56;1H[?12l[?25h[?25l[62;223H5[55;1H[?12l[?25h[?25l[62;223H4[54;1H[?12l[?25h[?25l[62;223H3[53;1H[?12l[?25h[?25l[62;223H2[52;1H[?12l[?25h[?25l[62;223H1[51;1H[?12l[?25h[?25l[62;223H0[50;1H[?12l[?25h[?25l[62;222H39[49;1H[?12l[?25h[?25l[62;223H8[48;1H[?12l[?25h[?25l[62;223H7[47;1H[?12l[?25h[?25l[62;223H6[46;1H[?12l[?25h[?25l[62;223H5[45;1H[?12l[?25h[?25l[62;223H4[44;1H[?12l[?25h[?25l[62;223H3[43;1H[?12l[?25h[?25l[62;223H2[42;1H[?12l[?25h[?25l[62;223H1[41;1H[?12l[?25h[?25l[62;223H0[40;1H[?12l[?25h[?25l[62;222H29[39;1H[?12l[?25h[?25l[62;223H8[38;1H[?12l[?25h[?25l[62;223H7[37;1H[?12l[?25h[?25l[62;223H6[36;1H[?12l[?25h[?25l[62;223H5[35;1H[?12l[?25h[?25l[62;223H4[34;1H[?12l[?25h[?25l[62;223H3[33;1H[?12l[?25h[?25l[62;223H2[32;1H[?12l[?25h[?25l[62;223H1[31;1H[?12l[?25h[?25l[62;223H0[30;1H[?12l[?25h[?25l[62;222H19[29;1H[?12l[?25h[?25l[62;223H8[28;1H[?12l[?25h[?25l[62;223H7[27;1H[?12l[?25h[?25l[62;223H6[26;1H[?12l[?25h[?25l[62;223H5[25;1H[?12l[?25h[?25l[62;223H4[24;1H[?12l[?25h[?25l[62;223H3[23;1H[?12l[?25h[?25l[62;223H2[22;1H[?12l[?25h[?25l[62;223H1[21;1H[?12l[?25h[?25l[62;223H0[20;1H[?12l[?25h[?25l[62;222H09[19;1H[?12l[?25h[?25l[62;223H8[18;1H[?12l[?25h[?25l[62;223H7[17;1H[?12l[?25h[?25l[62;223H6[16;1H[?12l[?25h[?25l[62;223H5[15;1H[?12l[?25h[?25l[62;223H4[14;1H[?12l[?25h[?25l[62;223H3[13;1H[?12l[?25h[?25l[62;223H2[12;1H[?12l[?25h[?25l[62;223H1[11;1H[?12l[?25h[?25l[62;223H0[10;1H[?12l[?25h[?25l[62;221H99,1 [9;1H[?12l[?25h[?25l[62;222H8[8;1H[?12l[?25h[?25l[62;222H7[7;1H[?12l[?25h[?25l[62;222H6[6;1H[?12l[?25h[?25l[62;222H5[5;1H[?12l[?25h[?25l[62;222H4[4;1H[?12l[?25h[?25l[62;222H3[3;1H[?12l[?25h[?25l[62;222H4[4;1H[?12l[?25h[?25l[62;222H5[5;1H[?12l[?25h[?25l[62;222H6[6;1H[?12l[?25h[?25l[62;222H5[5;1H[?12l[?25h[?25l[62;222H6[6;1H[?12l[?25h[?25l[62;224H2[6;2H[?12l[?25h[?25l[62;224H3[6;3H[?12l[?25h[?25l[62;224H4[6;4H[?12l[?25h[?25l[62;224H5[6;5H[?12l[?25h[?25l[1C[106m([32C)[m[62;224H6[6;6H[?12l[?25h[?25l[62;221H[K[62;221H96,7[10C57%[6;7H[?12l[?25h[?25l([32C)[62;224H8[6;8H[?12l[?25h[?25l[62;224H9[6;9H[?12l[?25h[?25l[62;224H10[6;10H[?12l[?25h[?25l[62;225H1[6;11H[?12l[?25h[?25l[62;225H2[6;12H[?12l[?25h[?25l[62;225H3[6;13H[?12l[?25h[?25l[62;225H4[6;14H[?12l[?25h[?25l[62;225H5[6;15H[?12l[?25h[?25l[62;225H6[6;16H[?12l[?25h[?25l[62;225H7[6;17H[?12l[?25h[?25l[62;225H8[6;18H[?12l[?25h[?25l[62;225H9[6;19H[?12l[?25h[?25l[62;224H20[6;20H[?12l[?25h[?25l[62;225H1[6;21H[?12l[?25h[?25l[62;225H2[6;22H[?12l[?25h[?25l[62;225H3[6;23H[?12l[?25h[?25l[62;225H4[6;24H[?12l[?25h[?25l[62;225H5[6;25H[?12l[?25h[?25l[62;225H6[6;26H[?12l[?25h[?25l[62;225H7[6;27H[?12l[?25h[?25l[62;225H8[6;28H[?12l[?25h[?25l[62;225H9[6;29H[?12l[?25h[?25l[62;224H30[6;30H[?12l[?25h[?25l[62;225H1[6;31H[?12l[?25h[?25l[62;225H2[6;32H[?12l[?25h[?25l[62;225H3[6;33H[?12l[?25h[?25l[62;225H4[6;34H[?12l[?25h[?25l[62;225H5[6;35H[?12l[?25h[?25l[62;225H6[6;36H[?12l[?25h[?25l[62;225H7[6;37H[?12l[?25h[?25l[62;225H8[6;38H[?12l[?25h[?25l[31m"[m)[6;39H[K[62;225H7[6;37H[?12l[?25h[?25l[31m"[m)[6;38H[K[62;225H6[6;36H[?12l[?25h[?25l[31m"[m)[6;37H[K[62;225H5[6;35H[?12l[?25h[?25l[31m"[m)[6;36H[K[62;225H4[6;34H[?12l[?25h[?25l[31m"[m)[6;35H[K[62;225H3[6;33H[?12l[?25h[?25l[31m"[m)[6;34H[K[62;225H2[6;32H[?12l[?25h[?25l[31m"[m)[6;33H[K[62;225H1[6;31H[?12l[?25h[?25l[31m"[m)[6;32H[K[62;225H0[6;30H[?12l[?25h[?25l[31m"[m)[6;31H[K[62;224H29[6;29H[?12l[?25h[?25l[31m"[m)[6;30H[K[62;225H8[6;28H[?12l[?25h[?25l[62;222H7,1 [7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Hp_n = [36mint[m([31m0.75[m*locust[[31m'AL_n'[m])[62;221H[K[62;221H97,1[10C58%[7;1H[?12l[?25h[?25l Plot the ORN Response[7;23H[K[7;1H[?12l[?25h[?25lPlot the ORN Response[7;22H[K[7;1H[?12l[?25h[?25llot the ORN Response[7;21H[K[7;1H[?12l[?25h[?25lot the ORN Response[7;20H[K[7;1H[?12l[?25h[?25lt the ORN Response[7;19H[K[7;1H[?12l[?25h[?25l the ORN Response[7;18H[K[7;1H[?12l[?25h[?25lthe ORN Response[7;17H[K[7;1H[?12l[?25h[?25lhe ORN Response[7;16H[K[7;1H[?12l[?25h[?25le ORN Response[7;15H[K[7;1H[?12l[?25h[?25l ORN Response[7;14H[K[7;1H[?12l[?25h[?25lORN Response[7;13H[K[7;1H[?12l[?25h[?25lRN Response[7;12H[K[7;1H[?12l[?25h[?25lN Response[7;11H[K[7;1H[?12l[?25h[?25l Response[7;10H[K[7;1H[?12l[?25h[?25lResponse[7;9H[K[7;1H[?12l[?25h[?25lesponse[7;8H[K[7;1H[?12l[?25h[?25lsponse[7;7H[K[7;1H[?12l[?25h[?25lponse[7;6H[K[7;1H[?12l[?25h[?25lonse[7;5H[K[7;1H[?12l[?25h[?25lnse[7;4H[K[7;1H[?12l[?25h[?25lse[7;3H[K[7;1H[?12l[?25h[?25le[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[62;221H[K[62;221H97,1[10C58%[7;1H[?12l[?25h[?25llt.figure()[7;12H[K[7;1H[?12l[?25h[?25lt.figure()[7;11H[K[7;1H[?12l[?25h[?25l.figure()[7;10H[K[7;1H[?12l[?25h[?25lfigure()[7;9H[K[7;1H[?12l[?25h[?25ligure()[7;8H[K[7;1H[?12l[?25h[?25lgure()[7;7H[K[7;1H[?12l[?25h[?25lure()[7;6H[K[7;1H[?12l[?25h[?25lre()[7;5H[K[7;1H[?12l[?25h[?25le()[7;4H[K[7;1H[?12l[?25h[?25l()[7;3H[K[7;1H[106m()[?12l[?25h[?25l) [m)[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1HORN_Output_current = np.zeros(ORN_Output_s.shape)[62;221H[K[62;221H97,1[10C58%[7;1H[?12l[?25h[?25lrder = np.argsort(orns.[36mmax[m(axis=[31m1[m)[7;36H[K[7;1H[?12l[?25h[?25lder = np.argsort(orns.[36mmax[m(axis=[31m1[m)[7;35H[K[7;1H[?12l[?25h[?25ler = np.argsort(orns.[36mmax[m(axis=[31m1[m)[7;34H[K[7;1H[?12l[?25h[?25lr = np.argsort(orns.[36mmax[m(axis=[31m1[m)[7;33H[K[7;1H[?12l[?25h[?25l = np.argsort(orns.[36mmax[m(axis=[31m1[m)[7;32H[K[7;1H[?12l[?25h[?25l= np.argsort(orns.[36mmax[m(axis=[31m1[m)[7;31H[K[7;1H[?12l[?25h[?25l np.argsort(orns.[36mmax[m(axis=[31m1[m)[7;30H[K[7;1H[?12l[?25h[?25lnp.argsort(orns.[36mmax[m(axis=[31m1[m)[7;29H[K[7;1H[?12l[?25h[?25lp.argsort(orns.[36mmax[m(axis=[31m1[m)[7;28H[K[7;1H[?12l[?25h[?25l.argsort(orns.[36mmax[m(axis=[31m1[m)[7;27H[K[7;1H[?12l[?25h[?25largsort(orns.[36mmax[m(axis=[31m1[m)[7;26H[K[7;1H[?12l[?25h[?25lrgsort(orns.[36mmax[m(axis=[31m1[m)[7;25H[K[7;1H[?12l[?25h[?25lgsort(orns.[36mmax[m(axis=[31m1[m)[7;24H[K[7;1H[?12l[?25h[?25lsort(orns.[36mmax[m(axis=[31m1[m)[7;23H[K[7;1H[?12l[?25h[?25lort(orns.[36mmax[m(axis=[31m1[m)[7;22H[K[7;1H[?12l[?25h[?25lrt(orns.[36mmax[m(axis=[31m1[m)[7;21H[K[7;1H[?12l[?25h[?25lt(orns.[36mmax[m(axis=[31m1[m)[7;20H[K[7;1H[?12l[?25h[?25l(orns.[36mmax[m(axis=[31m1[m)[7;19H[K[7;1H[106m([16C)[?12l[?25h[?25lo[mrns.[36mmax[m(axis=[31m1[m))[106m [mo[7;18H[K[7;1H[?12l[?25h[?25lrns.[36mmax[m(axis=[31m1[m)[7;17H[K[7;1H[?12l[?25h[?25lns.[36mmax[m(axis=[31m1[m)[7;16H[K[7;1H[?12l[?25h[?25ls.[36mmax[m(axis=[31m1[m)[7;15H[K[7;1H[?12l[?25h[?25l.[36mmax[m(axis=[31m1[m)[7;14H[K[7;1H[?12l[?25h[?25l[36mmax[m(axis=[31m1[m)[7;13H[K[7;1H[?12l[?25h[?25lax(axis=[31m1[m)[7;12H[K[7;1H[?12l[?25h[?25lx(axis=[31m1[m)[7;11H[K[7;1H[?12l[?25h[?25l(axis=[31m1[m)[7;10H[K[7;1H[106m([6C)[?12l[?25h[?25la[mxis=[31m1[m)[7;9H[K[7;1Ha[6C)[?12l[?25h[?25lxis=[31m1[m)[7;8H[K[7;1H[?12l[?25h[?25l[38;5;130mis[m=[31m1[m)[7;7H[K[7;1H[?12l[?25h[?25ls=[31m1[m)[7;6H[K[7;1H[?12l[?25h[?25l=[31m1[m)[7;5H[K[7;1H[?12l[?25h[?25l[31m1[m)[7;4H[K[7;1H[?12l[?25h[?25l)[7;3H[K[7;1H[?12l[?25h[?25l[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1H[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[31m0[m]):[62;221H[K[62;221H97,1[10C59%[7;1H[?12l[?25h[?25llt.imshow(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;50H[K[7;1H[?12l[?25h[?25lt.imshow(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;49H[K[7;1H[?12l[?25h[?25l.imshow(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;48H[K[7;1H[?12l[?25h[?25limshow(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;47H[K[7;1H[?12l[?25h[?25lmshow(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;46H[K[7;1H[?12l[?25h[?25lshow(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;45H[K[7;1H[?12l[?25h[?25lhow(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;44H[K[7;1H[?12l[?25h[?25low(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;43H[K[7;1H[?12l[?25h[?25lw(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;42H[K[7;1H[?12l[?25h[?25l(orns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;41H[K[7;1H[106m([38C)[?12l[?25h[?25lo[mrns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[106m [mo[7;40H[K[7;1H[?12l[?25h[?25lrns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;39H[K[7;1H[?12l[?25h[?25lns[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;38H[K[7;1H[?12l[?25h[?25ls[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;37H[K[7;1H[?12l[?25h[?25l[order[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;36H[K[7;1H[106m[[17C][?12l[?25h[?25lo[mrder[::-[31m1[m],::[31m10[m[1C][106m,[m aspect=[31m'auto'[m)[7;35H[K[7;1Ho[17C,[?12l[?25h[?25lrder[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;34H[K[7;1H[?12l[?25h[?25lder[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;33H[K[7;1H[?12l[?25h[?25ler[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;32H[K[7;1H[?12l[?25h[?25lr[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;31H[K[7;1H[?12l[?25h[?25l[::-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;30H[K[7;1H[106m[[4C][?12l[?25h[?25l:[m:-[31m1[m][106m,[m::[31m10[m[1C], aspect=[31m'auto'[m)[7;29H[K[7;1H:[4C,[?12l[?25h[?25l:-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;28H[K[7;1H[?12l[?25h[?25l-[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;27H[K[7;1H[?12l[?25h[?25l[31m1[m],::[31m10[m[1C], aspect=[31m'auto'[m)[7;26H[K[7;1H[?12l[?25h[?25l],::[31m10[m[1C], aspect=[31m'auto'[m)[7;25H[K[7;1H[?12l[?25h[?25l,::[31m10[m[1C], aspect=[31m'auto'[m)[7;24H[K[7;1H[?12l[?25h[?25l::[31m10[m[1C], aspect=[31m'auto'[m)[7;23H[K[7;1H[?12l[?25h[?25l:[31m10[m[1C], aspect=[31m'auto'[m)[7;22H[K[7;1H[?12l[?25h[?25l[31m10[m[1C], aspect=[31m'auto'[m)[7;21H[K[7;1H[?12l[?25h[?25l[31m0[m[1C], aspect=[31m'auto'[m)[7;20H[K[7;1H[?12l[?25h[?25l[1C], aspect=[31m'auto'[m)[7;19H[K[7;1H[?12l[?25h[?25l], aspect=[31m'auto'[m)[7;18H[K[7;1H[?12l[?25h[?25l, aspect=[31m'auto'[m)[7;17H[K[7;1H[?12l[?25h[?25l aspect=[31m'auto'[m)[7;16H[K[7;1H[?12l[?25h[?25laspect=[31m'auto'[m)[7;15H[K[7;1H[?12l[?25h[?25lspect=[31m'auto'[m)[7;14H[K[7;1H[?12l[?25h[?25lpect=[31m'auto'[m)[7;13H[K[7;1H[?12l[?25h[?25lect=[31m'auto'[m)[7;12H[K[7;1H[?12l[?25h[?25lct=[31m'auto'[m)[7;11H[K[7;1H[?12l[?25h[?25lt=[31m'auto'[m)[7;10H[K[7;1H[?12l[?25h[?25l=[31m'auto'[m)[7;9H[K[7;1H[?12l[?25h[?25l[31m'auto'[m)[7;8H[K[7;1H[?12l[?25h[?25lauto[31m')[m[7;7H[K[8;1H[31mplt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.title([m[1CORN Response[1C[31m)
plt.savefig([m[1CORN Response.png[1C[31m)

# Plot the ORN Traces
plt.figure()
order = np.argsort(orns.mean(axis=1))
plt.plot(orns[:,::100].T)
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.title([m[1CORN Traces[1C[31m)
plt.savefig([m[1CORN Traces.png[1C[31m)

# Plot EAD
plt.figure()
plt.plot(orns.mean(axis=0))
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):[7;1H[?12l[?25h[?25l[muto[31m')[m[7;6H[K[7;1H[?12l[?25h[?25lto[31m')[m[7;5H[K[7;1H[?12l[?25h[?25lo[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.title([1C[31mORN Response[m[1C)
plt.savefig([1C[31mORN Response.png[m[1C)

[34m# Plot the ORN Traces[m
plt.figure()
order = np.argsort(orns.mean(axis=[1C))
plt.plot(orns[:,::[3C].T)
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.title([1C[31mORN Traces[m[1C)
plt.savefig([1C[31mORN Traces.png[m[1C)

[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[1C))
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;5Hcfilter = [31m0.5[m*np.ones([31m30[m)[62;221H[K[62;221H97,1[10C59%[7;1H[?12l[?25h[?25llt.colorbar()[7;14H[K[7;1H[?12l[?25h[?25lt.colorbar()[7;13H[K[7;1H[?12l[?25h[?25l.colorbar()[7;12H[K[7;1H[?12l[?25h[?25lcolorbar()[7;11H[K[7;1H[?12l[?25h[?25lolorbar()[7;10H[K[7;1H[?12l[?25h[?25llorbar()[7;9H[K[7;1H[?12l[?25h[?25lorbar()[7;8H[K[7;1H[?12l[?25h[?25lrbar()[7;7H[K[7;1H[?12l[?25h[?25lbar()[7;6H[K[7;1H[?12l[?25h[?25lar()[7;5H[K[7;1H[?12l[?25h[?25lr()[7;4H[K[7;1H[?12l[?25h[?25l()[7;3H[K[7;1H[106m()[?12l[?25h[?25l) [m)[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;5HORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[31m'same'[m)[62;221H[K[62;221H97,1[10C60%[7;1H[?12l[?25h[?25llt.xlabel([31m'Time (in ms)'[m)[7;26H[K[7;1H[?12l[?25h[?25lt.xlabel([31m'Time (in ms)'[m)[7;25H[K[7;1H[?12l[?25h[?25l.xlabel([31m'Time (in ms)'[m)[7;24H[K[7;1H[?12l[?25h[?25lxlabel([31m'Time (in ms)'[m)[7;23H[K[7;1H[?12l[?25h[?25llabel([31m'Time (in ms)'[m)[7;22H[K[7;1H[?12l[?25h[?25label([31m'Time (in ms)'[m)[7;21H[K[7;1H[?12l[?25h[?25lbel([31m'Time (in ms)'[m)[7;20H[K[7;1H[?12l[?25h[?25lel([31m'Time (in ms)'[m)[7;19H[K[7;1H[?12l[?25h[?25ll([31m'Time (in ms)'[m)[7;18H[K[7;1H[?12l[?25h[?25l([31m'Time (in ms)'[m)[7;17H[K[7;1H[106m([14C)[?12l[?25h[?25l[m[31m[106m'[m[31mTime (in ms)'[m)[106m [m[31m'[m[7;16H[K[7;1H[?12l[?25h[?25lTime ([38;5;130min[m ms)[31m')[m[7;15H[K[8;1H[31mplt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.title([m[1CORN Response[1C[31m)
plt.savefig([m[1CORN Response.png[1C[31m)

# Plot the ORN Traces
plt.figure()
order = np.argsort(orns.mean(axis=1))
plt.plot(orns[:,::100].T)
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.title([m[1CORN Traces[1C[31m)
plt.savefig([m[1CORN Traces.png[1C[31m)

# Plot EAD
plt.figure()
plt.plot(orns.mean(axis=0))
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)[7;1H[?12l[?25h[?25l[mime ([38;5;130min[m ms)[31m')[m[7;14H[K[7;1H[?12l[?25h[?25lme ([38;5;130min[m ms)[31m')[m[7;13H[K[7;1H[?12l[?25h[?25le ([38;5;130min[m ms)[31m')[m[7;12H[K[7;1H[?12l[?25h[?25l ([38;5;130min[m ms)[31m')[m[7;11H[K[7;1H[?12l[?25h[?25l([38;5;130min[m ms)[31m')[m[7;10H[K[7;1H[106m([5C)[?12l[?25h[?25l[m[38;5;130m[106mi[m[38;5;130mn[m ms)[31m[106m'[m[31m)[m[7;9H[K[7;1H[38;5;130mi[m[5C[31m'[?12l[?25h[?25l[mn ms)[31m')[m[7;8H[K[7;1H[?12l[?25h[?25l ms)[31m')[m[7;7H[K[7;1H[?12l[?25h[?25lms)[31m')[m[7;6H[K[7;1H[?12l[?25h[?25ls)[31m')[m[7;5H[K[7;1H[?12l[?25h[?25l)[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.title([1C[31mORN Response[m[1C)
plt.savefig([1C[31mORN Response.png[m[1C)

[34m# Plot the ORN Traces[m
plt.figure()
order = np.argsort(orns.mean(axis=[1C))
plt.plot(orns[:,::[3C].T)
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.title([1C[31mORN Traces[m[1C)
plt.savefig([1C[31mORN Traces.png[m[1C)

[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[1C))
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;5H[36mprint[m([31m'{}/{} Acetylcholine Concentration Integration Completed'[m.[36mformat[m(i+[31m1[m,locust[[31m'AL_n'[m]), end = [31m'[m[35m\r[m[31m'[m)[62;221H[K[62;221H97,1[10C60%[7;1H[?12l[?25h[?25llt.ylabel([31m'Neuron Number'[m)[7;27H[K[7;1H[?12l[?25h[?25lt.ylabel([31m'Neuron Number'[m)[7;26H[K[7;1H[?12l[?25h[?25l.ylabel([31m'Neuron Number'[m)[7;25H[K[7;1H[?12l[?25h[?25lylabel([31m'Neuron Number'[m)[7;24H[K[7;1H[?12l[?25h[?25llabel([31m'Neuron Number'[m)[7;23H[K[7;1H[?12l[?25h[?25label([31m'Neuron Number'[m)[7;22H[K[7;1H[?12l[?25h[?25lbel([31m'Neuron Number'[m)[7;21H[K[7;1H[?12l[?25h[?25lel([31m'Neuron Number'[m)[7;20H[K[7;1H[?12l[?25h[?25ll([31m'Neuron Number'[m)[7;19H[K[7;1H[?12l[?25h[?25l([31m'Neuron Number'[m)[7;18H[K[7;1H[106m([15C)[?12l[?25h[?25l[m[31m[106m'[m[31mNeuron Number'[m)[106m [m[31m'[m[7;17H[K[7;1H[?12l[?25h[?25lNeuron Numbe[31mr')[m[7;16H[K[8;1H[31mplt.title([m[1CORN Response[1C[31m)
plt.savefig([m[1CORN Response.png[1C[31m)

# Plot the ORN Traces
plt.figure()
order = np.argsort(orns.mean(axis=1))
plt.plot(orns[:,::100].T)
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.title([m[1CORN Traces[1C[31m)
plt.savefig([m[1CORN Traces.png[1C[31m)

# Plot EAD
plt.figure()
plt.plot(orns.mean(axis=0))
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')[7;1H[?12l[?25h[?25l[meuron Numbe[31mr')[m[7;15H[K[7;1H[?12l[?25h[?25luron Numbe[31mr')[m[7;14H[K[7;1H[?12l[?25h[?25lron Numbe[31mr')[m[7;13H[K[7;1H[?12l[?25h[?25lon Numbe[31mr')[m[7;12H[K[7;1H[?12l[?25h[?25ln Numbe[31mr')[m[7;11H[K[7;1H[?12l[?25h[?25l Numbe[31mr')[m[7;10H[K[7;1H[?12l[?25h[?25lNumbe[31mr')[m[7;9H[K[7;1H[?12l[?25h[?25lumbe[31mr')[m[7;8H[K[7;1H[?12l[?25h[?25lmbe[31mr')[m[7;7H[K[7;1H[?12l[?25h[?25lbe[31mr')[m[7;6H[K[7;1H[?12l[?25h[?25le[31mr')[m[7;5H[K[7;1H[?12l[?25h[?25l[31mr')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.title([1C[31mORN Response[m[1C)
plt.savefig([1C[31mORN Response.png[m[1C)

[34m# Plot the ORN Traces[m
plt.figure()
order = np.argsort(orns.mean(axis=[1C))
plt.plot(orns[:,::[3C].T)
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.title([1C[31mORN Traces[m[1C)
plt.savefig([1C[31mORN Traces.png[m[1C)

[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[1C))
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1H[36mprint[m()[62;221H[K[62;221H97,1[10C60%[7;1H[?12l[?25h[?25llt.title([31m'ORN Response'[m)[7;25H[K[7;1H[?12l[?25h[?25lt.title([31m'ORN Response'[m)[7;24H[K[7;1H[?12l[?25h[?25l.title([31m'ORN Response'[m)[7;23H[K[7;1H[?12l[?25h[?25ltitle([31m'ORN Response'[m)[7;22H[K[7;1H[?12l[?25h[?25litle([31m'ORN Response'[m)[7;21H[K[7;1H[?12l[?25h[?25ltle([31m'ORN Response'[m)[7;20H[K[7;1H[?12l[?25h[?25lle([31m'ORN Response'[m)[7;19H[K[7;1H[?12l[?25h[?25le([31m'ORN Response'[m)[7;18H[K[7;1H[?12l[?25h[?25l([31m'ORN Response'[m)[7;17H[K[7;1H[106m([14C)[?12l[?25h[?25l[m[31m[106m'[m[31mORN Response'[m)[106m [m[31m'[m[7;16H[K[7;1H[?12l[?25h[?25lORN Response[31m')[m[7;15H[K[8;1H[31mplt.savefig([m[1CORN Response.png[1C[31m)

# Plot the ORN Traces
plt.figure()
order = np.argsort(orns.mean(axis=1))
plt.plot(orns[:,::100].T)
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.title([m[1CORN Traces[1C[31m)
plt.savefig([m[1CORN Traces.png[1C[31m)

# Plot EAD
plt.figure()
plt.plot(orns.mean(axis=0))
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()[7;1H[?12l[?25h[?25l[mRN Response[31m')[m[7;14H[K[7;1H[?12l[?25h[?25lN Response[31m')[m[7;13H[K[7;1H[?12l[?25h[?25l Response[31m')[m[7;12H[K[7;1H[?12l[?25h[?25lResponse[31m')[m[7;11H[K[7;1H[?12l[?25h[?25lesponse[31m')[m[7;10H[K[7;1H[?12l[?25h[?25lsponse[31m')[m[7;9H[K[7;1H[?12l[?25h[?25lponse[31m')[m[7;8H[K[7;1H[?12l[?25h[?25lonse[31m')[m[7;7H[K[7;1H[?12l[?25h[?25lnse[31m')[m[7;6H[K[7;1H[?12l[?25h[?25lse[31m')[m[7;5H[K[7;1H[?12l[?25h[?25le[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.savefig([1C[31mORN Response.png[m[1C)

[34m# Plot the ORN Traces[m
plt.figure()
order = np.argsort(orns.mean(axis=[1C))
plt.plot(orns[:,::[3C].T)
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.title([1C[31mORN Traces[m[1C)
plt.savefig([1C[31mORN Traces.png[m[1C)

[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[1C))
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[62;221H[K[62;221H97,1[10C61%[7;1H[?12l[?25h[?25llt.savefig([31m'ORN Response.png'[m)[7;31H[K[7;1H[?12l[?25h[?25lt.savefig([31m'ORN Response.png'[m)[7;30H[K[7;1H[?12l[?25h[?25l.savefig([31m'ORN Response.png'[m)[7;29H[K[7;1H[?12l[?25h[?25lsavefig([31m'ORN Response.png'[m)[7;28H[K[7;1H[?12l[?25h[?25lavefig([31m'ORN Response.png'[m)[7;27H[K[7;1H[?12l[?25h[?25lvefig([31m'ORN Response.png'[m)[7;26H[K[7;1H[?12l[?25h[?25lefig([31m'ORN Response.png'[m)[7;25H[K[7;1H[?12l[?25h[?25lfig([31m'ORN Response.png'[m)[7;24H[K[7;1H[?12l[?25h[?25lig([31m'ORN Response.png'[m)[7;23H[K[7;1H[?12l[?25h[?25lg([31m'ORN Response.png'[m)[7;22H[K[7;1H[?12l[?25h[?25l([31m'ORN Response.png'[m)[7;21H[K[7;1H[106m([18C)[?12l[?25h[?25l[m[31m[106m'[m[31mORN Response.png'[m)[106m [m[31m'[m[7;20H[K[7;1H[?12l[?25h[?25lORN Response.png[31m')[m[7;19H[K[9;1H[31m# Plot the ORN Traces
plt.figure()
order = np.argsort(orns.mean(axis=1))
plt.plot(orns[:,::100].T)
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.title([m[1CORN Traces[1C[31m)
plt.savefig([m[1CORN Traces.png[1C[31m)

# Plot EAD
plt.figure()
plt.plot(orns.mean(axis=0))
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()[7;1H[?12l[?25h[?25l[mRN Response.png[31m')[m[7;18H[K[7;1H[?12l[?25h[?25lN Response.png[31m')[m[7;17H[K[7;1H[?12l[?25h[?25l Response.png[31m')[m[7;16H[K[7;1H[?12l[?25h[?25lResponse.png[31m')[m[7;15H[K[7;1H[?12l[?25h[?25lesponse.png[31m')[m[7;14H[K[7;1H[?12l[?25h[?25lsponse.png[31m')[m[7;13H[K[7;1H[?12l[?25h[?25lponse.png[31m')[m[7;12H[K[7;1H[?12l[?25h[?25lonse.png[31m')[m[7;11H[K[7;1H[?12l[?25h[?25lnse.png[31m')[m[7;10H[K[7;1H[?12l[?25h[?25lse.png[31m')[m[7;9H[K[7;1H[?12l[?25h[?25le.png[31m')[m[7;8H[K[7;1H[?12l[?25h[?25l.png[31m')[m[7;7H[K[7;1H[?12l[?25h[?25lpng[31m')[m[7;6H[K[7;1H[?12l[?25h[?25lng[31m')[m[7;5H[K[7;1H[?12l[?25h[?25lg[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[9;1H[34m# Plot the ORN Traces[m
plt.figure()
order = np.argsort(orns.mean(axis=[1C))
plt.plot(orns[:,::[3C].T)
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.title([1C[31mORN Traces[m[1C)
plt.savefig([1C[31mORN Traces.png[m[1C)

[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[1C))
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Hplt.figure(figsize=([31m12[m,[31m3[m))[62;221H[K[62;221H97,1[10C61%[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Horder = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m]))[62;221H[K[62;221H97,1[10C62%[7;1H[?12l[?25h[?25l Plot the ORN Traces[7;21H[K[7;1H[?12l[?25h[?25lPlot the ORN Traces[7;20H[K[7;1H[?12l[?25h[?25llot the ORN Traces[7;19H[K[7;1H[?12l[?25h[?25lot the ORN Traces[7;18H[K[7;1H[?12l[?25h[?25lt the ORN Traces[7;17H[K[7;1H[?12l[?25h[?25l the ORN Traces[7;16H[K[7;1H[?12l[?25h[?25lthe ORN Traces[7;15H[K[7;1H[?12l[?25h[?25lhe ORN Traces[7;14H[K[7;1H[?12l[?25h[?25le ORN Traces[7;13H[K[7;1H[?12l[?25h[?25l ORN Traces[7;12H[K[7;1H[?12l[?25h[?25lORN Traces[7;11H[K[7;1H[?12l[?25h[?25lRN Traces[7;10H[K[7;1H[?12l[?25h[?25lN Traces[7;9H[K[7;1H[?12l[?25h[?25l Traces[7;8H[K[7;1H[?12l[?25h[?25lTraces[7;7H[K[7;1H[?12l[?25h[?25lraces[7;6H[K[7;1H[?12l[?25h[?25laces[7;5H[K[7;1H[?12l[?25h[?25lces[7;4H[K[7;1H[?12l[?25h[?25les[7;3H[K[7;1H[?12l[?25h[?25ls[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Hplt.imshow(ORN_Output_current[order,::[31m100[m], aspect=[31m'auto'[m)[62;221H[K[62;221H97,1[10C62%[7;1H[?12l[?25h[?25llt.figure()[7;12H[K[7;1H[?12l[?25h[?25lt.figure()[7;11H[K[7;1H[?12l[?25h[?25l.figure()[7;10H[K[7;1H[?12l[?25h[?25lfigure()[7;9H[K[7;1H[?12l[?25h[?25ligure()[7;8H[K[7;1H[?12l[?25h[?25lgure()[7;7H[K[7;1H[?12l[?25h[?25lure()[7;6H[K[7;1H[?12l[?25h[?25lre()[7;5H[K[7;1H[?12l[?25h[?25le()[7;4H[K[7;1H[?12l[?25h[?25l()[7;3H[K[7;1H[106m()[?12l[?25h[?25l) [m)[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Hplt.colorbar()[62;221H[K[62;221H97,1[10C62%[7;1H[?12l[?25h[?25lrder = np.argsort(orns.mean(axis=[31m1[m)[7;37H[K[7;1H[?12l[?25h[?25lder = np.argsort(orns.mean(axis=[31m1[m)[7;36H[K[7;1H[?12l[?25h[?25ler = np.argsort(orns.mean(axis=[31m1[m)[7;35H[K[7;1H[?12l[?25h[?25lr = np.argsort(orns.mean(axis=[31m1[m)[7;34H[K[7;1H[?12l[?25h[?25l = np.argsort(orns.mean(axis=[31m1[m)[7;33H[K[7;1H[?12l[?25h[?25l= np.argsort(orns.mean(axis=[31m1[m)[7;32H[K[7;1H[?12l[?25h[?25l np.argsort(orns.mean(axis=[31m1[m)[7;31H[K[7;1H[?12l[?25h[?25lnp.argsort(orns.mean(axis=[31m1[m)[7;30H[K[7;1H[?12l[?25h[?25lp.argsort(orns.mean(axis=[31m1[m)[7;29H[K[7;1H[?12l[?25h[?25l.argsort(orns.mean(axis=[31m1[m)[7;28H[K[7;1H[?12l[?25h[?25largsort(orns.mean(axis=[31m1[m)[7;27H[K[7;1H[?12l[?25h[?25lrgsort(orns.mean(axis=[31m1[m)[7;26H[K[7;1H[?12l[?25h[?25lgsort(orns.mean(axis=[31m1[m)[7;25H[K[7;1H[?12l[?25h[?25lsort(orns.mean(axis=[31m1[m)[7;24H[K[7;1H[?12l[?25h[?25lort(orns.mean(axis=[31m1[m)[7;23H[K[7;1H[?12l[?25h[?25lrt(orns.mean(axis=[31m1[m)[7;22H[K[7;1H[?12l[?25h[?25lt(orns.mean(axis=[31m1[m)[7;21H[K[7;1H[?12l[?25h[?25l(orns.mean(axis=[31m1[m)[7;20H[K[7;1H[106m([17C)[?12l[?25h[?25lo[mrns.mean(axis=[31m1[m))[106m [mo[7;19H[K[7;1H[?12l[?25h[?25lrns.mean(axis=[31m1[m)[7;18H[K[7;1H[?12l[?25h[?25lns.mean(axis=[31m1[m)[7;17H[K[7;1H[?12l[?25h[?25ls.mean(axis=[31m1[m)[7;16H[K[7;1H[?12l[?25h[?25l.mean(axis=[31m1[m)[7;15H[K[7;1H[?12l[?25h[?25lmean(axis=[31m1[m)[7;14H[K[7;1H[?12l[?25h[?25lean(axis=[31m1[m)[7;13H[K[7;1H[?12l[?25h[?25lan(axis=[31m1[m)[7;12H[K[7;1H[?12l[?25h[?25ln(axis=[31m1[m)[7;11H[K[7;1H[?12l[?25h[?25l(axis=[31m1[m)[7;10H[K[7;1H[106m([6C)[?12l[?25h[?25la[mxis=[31m1[m)[7;9H[K[7;1Ha[6C)[?12l[?25h[?25lxis=[31m1[m)[7;8H[K[7;1H[?12l[?25h[?25l[38;5;130mis[m=[31m1[m)[7;7H[K[7;1H[?12l[?25h[?25ls=[31m1[m)[7;6H[K[7;1H[?12l[?25h[?25l=[31m1[m)[7;5H[K[7;1H[?12l[?25h[?25l[31m1[m)[7;4H[K[7;1H[?12l[?25h[?25l)[7;3H[K[7;1H[?12l[?25h[?25l[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Hplt.xlabel([31m'Time (in ms)'[m)[62;221H[K[62;221H97,1[10C63%[7;1H[?12l[?25h[?25llt.plot(orns[:,::[31m10[m[1C].T)[7;25H[K[7;1H[?12l[?25h[?25lt.plot(orns[:,::[31m10[m[1C].T)[7;24H[K[7;1H[?12l[?25h[?25l.plot(orns[:,::[31m10[m[1C].T)[7;23H[K[7;1H[?12l[?25h[?25lplot(orns[:,::[31m10[m[1C].T)[7;22H[K[7;1H[?12l[?25h[?25llot(orns[:,::[31m10[m[1C].T)[7;21H[K[7;1H[?12l[?25h[?25lot(orns[:,::[31m10[m[1C].T)[7;20H[K[7;1H[?12l[?25h[?25lt(orns[:,::[31m10[m[1C].T)[7;19H[K[7;1H[?12l[?25h[?25l(orns[:,::[31m10[m[1C].T)[7;18H[K[7;1H[106m([15C)[?12l[?25h[?25lo[mrns[:,::[31m10[m[1C].T)[106m [mo[7;17H[K[7;1H[?12l[?25h[?25lrns[:,::[31m10[m[1C].T)[7;16H[K[7;1H[?12l[?25h[?25lns[:,::[31m10[m[1C].T)[7;15H[K[7;1H[?12l[?25h[?25ls[:,::[31m10[m[1C].T)[7;14H[K[7;1H[?12l[?25h[?25l[:,::[31m10[m[1C].T)[7;13H[K[7;1H[106m[[7C][?12l[?25h[?25l:[m,::[31m10[m[1C][106m.[mT)[7;12H[K[7;1H:[7C.[?12l[?25h[?25l,::[31m10[m[1C].T)[7;11H[K[7;1H[?12l[?25h[?25l::[31m10[m[1C].T)[7;10H[K[7;1H[?12l[?25h[?25l:[31m10[m[1C].T)[7;9H[K[7;1H[?12l[?25h[?25l[31m10[m[1C].T)[7;8H[K[7;1H[?12l[?25h[?25l[31m0[m[1C].T)[7;7H[K[7;1H[?12l[?25h[?25l[1C].T)[7;6H[K[7;1H[?12l[?25h[?25l].T)[7;5H[K[7;1H[?12l[?25h[?25l.T)[7;4H[K[7;1H[?12l[?25h[?25lT)[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Hplt.ylabel([31m'Neuron Number'[m)[62;221H[K[62;221H97,1[10C63%[7;1H[?12l[?25h[?25llt.xlabel([31m'Time (in ms)'[m)[7;26H[K[7;1H[?12l[?25h[?25lt.xlabel([31m'Time (in ms)'[m)[7;25H[K[7;1H[?12l[?25h[?25l.xlabel([31m'Time (in ms)'[m)[7;24H[K[7;1H[?12l[?25h[?25lxlabel([31m'Time (in ms)'[m)[7;23H[K[7;1H[?12l[?25h[?25llabel([31m'Time (in ms)'[m)[7;22H[K[7;1H[?12l[?25h[?25label([31m'Time (in ms)'[m)[7;21H[K[7;1H[?12l[?25h[?25lbel([31m'Time (in ms)'[m)[7;20H[K[7;1H[?12l[?25h[?25lel([31m'Time (in ms)'[m)[7;19H[K[7;1H[?12l[?25h[?25ll([31m'Time (in ms)'[m)[7;18H[K[7;1H[?12l[?25h[?25l([31m'Time (in ms)'[m)[7;17H[K[7;1H[106m([14C)[?12l[?25h[?25l[m[31m[106m'[m[31mTime (in ms)'[m)[106m [m[31m'[m[7;16H[K[7;1H[?12l[?25h[?25lTime ([38;5;130min[m ms)[31m')[m[7;15H[K[8;1H[31mplt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.title([m[1CORN Traces[1C[31m)
plt.savefig([m[1CORN Traces.png[1C[31m)

# Plot EAD
plt.figure()
plt.plot(orns.mean(axis=0))
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()

plt.figure(figsize=(12,3))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(ORN_Output_current[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)[7;1H[?12l[?25h[?25l[mime ([38;5;130min[m ms)[31m')[m[7;14H[K[7;1H[?12l[?25h[?25lme ([38;5;130min[m ms)[31m')[m[7;13H[K[7;1H[?12l[?25h[?25le ([38;5;130min[m ms)[31m')[m[7;12H[K[7;1H[?12l[?25h[?25l ([38;5;130min[m ms)[31m')[m[7;11H[K[7;1H[?12l[?25h[?25l([38;5;130min[m ms)[31m')[m[7;10H[K[7;1H[106m([5C)[?12l[?25h[?25l[m[38;5;130m[106mi[m[38;5;130mn[m ms)[31m[106m'[m[31m)[m[7;9H[K[7;1H[38;5;130mi[m[5C[31m'[?12l[?25h[?25l[mn ms)[31m')[m[7;8H[K[7;1H[?12l[?25h[?25l ms)[31m')[m[7;7H[K[7;1H[?12l[?25h[?25lms)[31m')[m[7;6H[K[7;1H[?12l[?25h[?25ls)[31m')[m[7;5H[K[7;1H[?12l[?25h[?25l)[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.title([1C[31mORN Traces[m[1C)
plt.savefig([1C[31mORN Traces.png[m[1C)

[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[1C))
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()

plt.figure(figsize=([2C,[1C))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(ORN_Output_current[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Hplt.savefig([31m'Acetylcholine Concentration.png'[m)[62;221H[K[62;221H97,1[10C64%[7;1H[?12l[?25h[?25llt.ylabel([31m'Neuron Number'[m)[7;27H[K[7;1H[?12l[?25h[?25lt.ylabel([31m'Neuron Number'[m)[7;26H[K[7;1H[?12l[?25h[?25l.ylabel([31m'Neuron Number'[m)[7;25H[K[7;1H[?12l[?25h[?25lylabel([31m'Neuron Number'[m)[7;24H[K[7;1H[?12l[?25h[?25llabel([31m'Neuron Number'[m)[7;23H[K[7;1H[?12l[?25h[?25label([31m'Neuron Number'[m)[7;22H[K[7;1H[?12l[?25h[?25lbel([31m'Neuron Number'[m)[7;21H[K[7;1H[?12l[?25h[?25lel([31m'Neuron Number'[m)[7;20H[K[7;1H[?12l[?25h[?25ll([31m'Neuron Number'[m)[7;19H[K[7;1H[?12l[?25h[?25l([31m'Neuron Number'[m)[7;18H[K[7;1H[106m([15C)[?12l[?25h[?25l[m[31m[106m'[m[31mNeuron Number'[m)[106m [m[31m'[m[7;17H[K[7;1H[?12l[?25h[?25lNeuron Numbe[31mr')[m[7;16H[K[8;1H[31mplt.title([m[1CORN Traces[1C[31m)
plt.savefig([m[1CORN Traces.png[1C[31m)

# Plot EAD
plt.figure()
plt.plot(orns.mean(axis=0))
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()

plt.figure(figsize=(12,3))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(ORN_Output_current[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)[7;1H[?12l[?25h[?25l[meuron Numbe[31mr')[m[7;15H[K[7;1H[?12l[?25h[?25luron Numbe[31mr')[m[7;14H[K[7;1H[?12l[?25h[?25lron Numbe[31mr')[m[7;13H[K[7;1H[?12l[?25h[?25lon Numbe[31mr')[m[7;12H[K[7;1H[?12l[?25h[?25ln Numbe[31mr')[m[7;11H[K[7;1H[?12l[?25h[?25l Numbe[31mr')[m[7;10H[K[7;1H[?12l[?25h[?25lNumbe[31mr')[m[7;9H[K[7;1H[?12l[?25h[?25lumbe[31mr')[m[7;8H[K[7;1H[?12l[?25h[?25lmbe[31mr')[m[7;7H[K[7;1H[?12l[?25h[?25lbe[31mr')[m[7;6H[K[7;1H[?12l[?25h[?25le[31mr')[m[7;5H[K[7;1H[?12l[?25h[?25l[31mr')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.title([1C[31mORN Traces[m[1C)
plt.savefig([1C[31mORN Traces.png[m[1C)

[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[1C))
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()

plt.figure(figsize=([2C,[1C))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(ORN_Output_current[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[62;221H[K[62;221H97,1[10C64%[7;1H[?12l[?25h[?25llt.title([31m'ORN Traces'[m)[7;23H[K[7;1H[?12l[?25h[?25lt.title([31m'ORN Traces'[m)[7;22H[K[7;1H[?12l[?25h[?25l.title([31m'ORN Traces'[m)[7;21H[K[7;1H[?12l[?25h[?25ltitle([31m'ORN Traces'[m)[7;20H[K[7;1H[?12l[?25h[?25litle([31m'ORN Traces'[m)[7;19H[K[7;1H[?12l[?25h[?25ltle([31m'ORN Traces'[m)[7;18H[K[7;1H[?12l[?25h[?25lle([31m'ORN Traces'[m)[7;17H[K[7;1H[?12l[?25h[?25le([31m'ORN Traces'[m)[7;16H[K[7;1H[?12l[?25h[?25l([31m'ORN Traces'[m)[7;15H[K[7;1H[106m([12C)[?12l[?25h[?25l[m[31m[106m'[m[31mORN Traces'[m)[106m [m[31m'[m[7;14H[K[7;1H[?12l[?25h[?25lORN Traces[31m')[m[7;13H[K[8;1H[31mplt.savefig([m[1CORN Traces.png[1C[31m)

# Plot EAD
plt.figure()
plt.plot(orns.mean(axis=0))
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()

plt.figure(figsize=(12,3))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(ORN_Output_current[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)[7;1H[?12l[?25h[?25l[mRN Traces[31m')[m[7;12H[K[7;1H[?12l[?25h[?25lN Traces[31m')[m[7;11H[K[7;1H[?12l[?25h[?25l Traces[31m')[m[7;10H[K[7;1H[?12l[?25h[?25lTraces[31m')[m[7;9H[K[7;1H[?12l[?25h[?25lraces[31m')[m[7;8H[K[7;1H[?12l[?25h[?25laces[31m')[m[7;7H[K[7;1H[?12l[?25h[?25lces[31m')[m[7;6H[K[7;1H[?12l[?25h[?25les[31m')[m[7;5H[K[7;1H[?12l[?25h[?25ls[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.savefig([1C[31mORN Traces.png[m[1C)

[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[1C))
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()

plt.figure(figsize=([2C,[1C))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(ORN_Output_current[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Hep=[31m0.01[m[62;221H[K[62;221H97,1[10C65%[7;1H[?12l[?25h[?25llt.savefig([31m'ORN Traces.png'[m)[7;29H[K[7;1H[?12l[?25h[?25lt.savefig([31m'ORN Traces.png'[m)[7;28H[K[7;1H[?12l[?25h[?25l.savefig([31m'ORN Traces.png'[m)[7;27H[K[7;1H[?12l[?25h[?25lsavefig([31m'ORN Traces.png'[m)[7;26H[K[7;1H[?12l[?25h[?25lavefig([31m'ORN Traces.png'[m)[7;25H[K[7;1H[?12l[?25h[?25lvefig([31m'ORN Traces.png'[m)[7;24H[K[7;1H[?12l[?25h[?25lefig([31m'ORN Traces.png'[m)[7;23H[K[7;1H[?12l[?25h[?25lfig([31m'ORN Traces.png'[m)[7;22H[K[7;1H[?12l[?25h[?25lig([31m'ORN Traces.png'[m)[7;21H[K[7;1H[?12l[?25h[?25lg([31m'ORN Traces.png'[m)[7;20H[K[7;1H[?12l[?25h[?25l([31m'ORN Traces.png'[m)[7;19H[K[7;1H[106m([16C)[?12l[?25h[?25l[m[31m[106m'[m[31mORN Traces.png'[m)[106m [m[31m'[m[7;18H[K[7;1H[?12l[?25h[?25lORN Traces.png[31m')[m[7;17H[K[9;1H[31m# Plot EAD
plt.figure()
plt.plot(orns.mean(axis=0))
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()

plt.figure(figsize=(12,3))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(ORN_Output_current[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)

ep=[7;1H[?12l[?25h[?25l[mRN Traces.png[31m')[m[7;16H[K[7;1H[?12l[?25h[?25lN Traces.png[31m')[m[7;15H[K[7;1H[?12l[?25h[?25l Traces.png[31m')[m[7;14H[K[7;1H[?12l[?25h[?25lTraces.png[31m')[m[7;13H[K[7;1H[?12l[?25h[?25lraces.png[31m')[m[7;12H[K[7;1H[?12l[?25h[?25laces.png[31m')[m[7;11H[K[7;1H[?12l[?25h[?25lces.png[31m')[m[7;10H[K[7;1H[?12l[?25h[?25les.png[31m')[m[7;9H[K[7;1H[?12l[?25h[?25ls.png[31m')[m[7;8H[K[7;1H[?12l[?25h[?25l.png[31m')[m[7;7H[K[7;1H[?12l[?25h[?25lpng[31m')[m[7;6H[K[7;1H[?12l[?25h[?25lng[31m')[m[7;5H[K[7;1H[?12l[?25h[?25lg[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[9;1H[34m# Plot EAD[m
plt.figure()
plt.plot(orns.mean(axis=[1C))
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()

plt.figure(figsize=([2C,[1C))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(ORN_Output_current[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)

ep=[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Ha = [31m10.0[m[62;221H[K[62;221H97,1[10C65%[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Hb = [31m0.2[m[62;221H[K[62;221H97,1[10C66%[7;1H[?12l[?25h[?25l Plot EAD[7;10H[K[7;1H[?12l[?25h[?25lPlot EAD[7;9H[K[7;1H[?12l[?25h[?25llot EAD[7;8H[K[7;1H[?12l[?25h[?25lot EAD[7;7H[K[7;1H[?12l[?25h[?25lt EAD[7;6H[K[7;1H[?12l[?25h[?25l EAD[7;5H[K[7;1H[?12l[?25h[?25lEAD[7;4H[K[7;1H[?12l[?25h[?25lAD[7;3H[K[7;1H[?12l[?25h[?25lD[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[62;221H[K[62;221H97,1[10C66%[7;1H[?12l[?25h[?25llt.figure()[7;12H[K[7;1H[?12l[?25h[?25lt.figure()[7;11H[K[7;1H[?12l[?25h[?25l.figure()[7;10H[K[7;1H[?12l[?25h[?25lfigure()[7;9H[K[7;1H[?12l[?25h[?25ligure()[7;8H[K[7;1H[?12l[?25h[?25lgure()[7;7H[K[7;1H[?12l[?25h[?25lure()[7;6H[K[7;1H[?12l[?25h[?25lre()[7;5H[K[7;1H[?12l[?25h[?25le()[7;4H[K[7;1H[?12l[?25h[?25l()[7;3H[K[7;1H[106m()[?12l[?25h[?25l) [m)[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1H[38;5;130mdef[m [36mf[m(o,t):[62;221H[K[62;221H97,1[10C67%[7;1H[?12l[?25h[?25llt.plot(orns.mean(axis=[31m0[m)[7;27H[K[7;1H[?12l[?25h[?25lt.plot(orns.mean(axis=[31m0[m)[7;26H[K[7;1H[?12l[?25h[?25l.plot(orns.mean(axis=[31m0[m)[7;25H[K[7;1H[?12l[?25h[?25lplot(orns.mean(axis=[31m0[m)[7;24H[K[7;1H[?12l[?25h[?25llot(orns.mean(axis=[31m0[m)[7;23H[K[7;1H[?12l[?25h[?25lot(orns.mean(axis=[31m0[m)[7;22H[K[7;1H[?12l[?25h[?25lt(orns.mean(axis=[31m0[m)[7;21H[K[7;1H[?12l[?25h[?25l(orns.mean(axis=[31m0[m)[7;20H[K[7;1H[106m([17C)[?12l[?25h[?25lo[mrns.mean(axis=[31m0[m))[106m [mo[7;19H[K[7;1H[?12l[?25h[?25lrns.mean(axis=[31m0[m)[7;18H[K[7;1H[?12l[?25h[?25lns.mean(axis=[31m0[m)[7;17H[K[7;1H[?12l[?25h[?25ls.mean(axis=[31m0[m)[7;16H[K[7;1H[?12l[?25h[?25l.mean(axis=[31m0[m)[7;15H[K[7;1H[?12l[?25h[?25lmean(axis=[31m0[m)[7;14H[K[7;1H[?12l[?25h[?25lean(axis=[31m0[m)[7;13H[K[7;1H[?12l[?25h[?25lan(axis=[31m0[m)[7;12H[K[7;1H[?12l[?25h[?25ln(axis=[31m0[m)[7;11H[K[7;1H[?12l[?25h[?25l(axis=[31m0[m)[7;10H[K[7;1H[106m([6C)[?12l[?25h[?25la[mxis=[31m0[m)[7;9H[K[7;1Ha[6C)[?12l[?25h[?25lxis=[31m0[m)[7;8H[K[7;1H[?12l[?25h[?25l[38;5;130mis[m=[31m0[m)[7;7H[K[7;1H[?12l[?25h[?25ls=[31m0[m)[7;6H[K[7;1H[?12l[?25h[?25l=[31m0[m)[7;5H[K[7;1H[?12l[?25h[?25l[31m0[m)[7;4H[K[7;1H[?12l[?25h[?25l)[7;3H[K[7;1H[?12l[?25h[?25l[7;2H[K[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1H[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m[62;221H[K[62;221H97,1[10C67%[7;1H[?12l[?25h[?25llt.xlabel([31m'Time (in ms)'[m)[7;26H[K[7;1H[?12l[?25h[?25lt.xlabel([31m'Time (in ms)'[m)[7;25H[K[7;1H[?12l[?25h[?25l.xlabel([31m'Time (in ms)'[m)[7;24H[K[7;1H[?12l[?25h[?25lxlabel([31m'Time (in ms)'[m)[7;23H[K[7;1H[?12l[?25h[?25llabel([31m'Time (in ms)'[m)[7;22H[K[7;1H[?12l[?25h[?25label([31m'Time (in ms)'[m)[7;21H[K[7;1H[?12l[?25h[?25lbel([31m'Time (in ms)'[m)[7;20H[K[7;1H[?12l[?25h[?25lel([31m'Time (in ms)'[m)[7;19H[K[7;1H[?12l[?25h[?25ll([31m'Time (in ms)'[m)[7;18H[K[7;1H[?12l[?25h[?25l([31m'Time (in ms)'[m)[7;17H[K[7;1H[106m([14C)[?12l[?25h[?25l[m[31m[106m'[m[31mTime (in ms)'[m)[106m [m[31m'[m[7;16H[K[7;1H[?12l[?25h[?25lTime ([38;5;130min[m ms)[31m')[m[7;15H[K[8;1H[31mplt.ylabel([m[1CMean Firing Rate[1C[31m)
plt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()

plt.figure(figsize=(12,3))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(ORN_Output_current[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)

ep=
a = 
b = 

def f(o,t):
#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[7;1H[?12l[?25h[?25l[mime ([38;5;130min[m ms)[31m')[m[7;14H[K[7;1H[?12l[?25h[?25lme ([38;5;130min[m ms)[31m')[m[7;13H[K[7;1H[?12l[?25h[?25le ([38;5;130min[m ms)[31m')[m[7;12H[K[7;1H[?12l[?25h[?25l ([38;5;130min[m ms)[31m')[m[7;11H[K[7;1H[?12l[?25h[?25l([38;5;130min[m ms)[31m')[m[7;10H[K[7;1H[106m([5C)[?12l[?25h[?25l[m[38;5;130m[106mi[m[38;5;130mn[m ms)[31m[106m'[m[31m)[m[7;9H[K[7;1H[38;5;130mi[m[5C[31m'[?12l[?25h[?25l[mn ms)[31m')[m[7;8H[K[7;1H[?12l[?25h[?25l ms)[31m')[m[7;7H[K[7;1H[?12l[?25h[?25lms)[31m')[m[7;6H[K[7;1H[?12l[?25h[?25ls)[31m')[m[7;5H[K[7;1H[?12l[?25h[?25l)[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.ylabel([1C[31mMean Firing Rate[m[1C)
plt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()

plt.figure(figsize=([2C,[1C))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(ORN_Output_current[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)

ep=
a = 
b = 

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[7;1H[?12l[?25h[?25l[m[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;5Hdo = a*([31m1.0[m-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[31m50[m]*[31m90[m+[[31m700[m]*[31m30[m) - b*o[62;221H[K[62;221H97,1[10C68%[7;1H[?12l[?25h[?25llt.ylabel([31m'Mean Firing Rate'[m)[7;30H[K[7;1H[?12l[?25h[?25lt.ylabel([31m'Mean Firing Rate'[m)[7;29H[K[7;1H[?12l[?25h[?25l.ylabel([31m'Mean Firing Rate'[m)[7;28H[K[7;1H[?12l[?25h[?25lylabel([31m'Mean Firing Rate'[m)[7;27H[K[7;1H[?12l[?25h[?25llabel([31m'Mean Firing Rate'[m)[7;26H[K[7;1H[?12l[?25h[?25label([31m'Mean Firing Rate'[m)[7;25H[K[7;1H[?12l[?25h[?25lbel([31m'Mean Firing Rate'[m)[7;24H[K[7;1H[?12l[?25h[?25lel([31m'Mean Firing Rate'[m)[7;23H[K[7;1H[?12l[?25h[?25ll([31m'Mean Firing Rate'[m)[7;22H[K[7;1H[?12l[?25h[?25l([31m'Mean Firing Rate'[m)[7;21H[K[7;1H[106m([18C)[?12l[?25h[?25l[m[31m[106m'[m[31mMean Firing Rate'[m)[106m [m[31m'[m[7;20H[K[7;1H[?12l[?25h[?25lMean Firing Rate[31m')[m[7;19H[K[8;1H[31mplt.title([m[1CEAG Response[1C[31m)
plt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()

plt.figure(figsize=(12,3))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(ORN_Output_current[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)

ep=
a = 
b = 

def f(o,t):
#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[7;1H[?12l[?25h[?25l[mean Firing Rate[31m')[m[7;18H[K[7;1H[?12l[?25h[?25lan Firing Rate[31m')[m[7;17H[K[7;1H[?12l[?25h[?25ln Firing Rate[31m')[m[7;16H[K[7;1H[?12l[?25h[?25l Firing Rate[31m')[m[7;15H[K[7;1H[?12l[?25h[?25lFiring Rate[31m')[m[7;14H[K[7;1H[?12l[?25h[?25liring Rate[31m')[m[7;13H[K[7;1H[?12l[?25h[?25lring Rate[31m')[m[7;12H[K[7;1H[?12l[?25h[?25ling Rate[31m')[m[7;11H[K[7;1H[?12l[?25h[?25lng Rate[31m')[m[7;10H[K[7;1H[?12l[?25h[?25lg Rate[31m')[m[7;9H[K[7;1H[?12l[?25h[?25l Rate[31m')[m[7;8H[K[7;1H[?12l[?25h[?25lRate[31m')[m[7;7H[K[7;1H[?12l[?25h[?25late[31m')[m[7;6H[K[7;1H[?12l[?25h[?25lte[31m')[m[7;5H[K[7;1H[?12l[?25h[?25le[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.title([1C[31mEAG Response[m[1C)
plt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()

plt.figure(figsize=([2C,[1C))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(ORN_Output_current[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)

ep=
a = 
b = 

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([3C-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[2C]*[2C+[[3C]*[2C) - b*o[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;5H[38;5;130mreturn[m do[62;221H[K[62;221H97,1[10C68%[7;1H[?12l[?25h[?25llt.title([31m'EAG Response'[m)[7;25H[K[7;1H[?12l[?25h[?25lt.title([31m'EAG Response'[m)[7;24H[K[7;1H[?12l[?25h[?25l.title([31m'EAG Response'[m)[7;23H[K[7;1H[?12l[?25h[?25ltitle([31m'EAG Response'[m)[7;22H[K[7;1H[?12l[?25h[?25litle([31m'EAG Response'[m)[7;21H[K[7;1H[?12l[?25h[?25ltle([31m'EAG Response'[m)[7;20H[K[7;1H[?12l[?25h[?25lle([31m'EAG Response'[m)[7;19H[K[7;1H[?12l[?25h[?25le([31m'EAG Response'[m)[7;18H[K[7;1H[?12l[?25h[?25l([31m'EAG Response'[m)[7;17H[K[7;1H[106m([14C)[?12l[?25h[?25l[m[31m[106m'[m[31mEAG Response'[m)[106m [m[31m'[m[7;16H[K[7;1H[?12l[?25h[?25lEAG Response[31m')[m[7;15H[K[8;1H[31mplt.savefig([m[1CEAG Response.png[1C[31m)

# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()

plt.figure(figsize=(12,3))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(ORN_Output_current[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)

ep=
a = 
b = 

def f(o,t):
#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    return do[7;1H[?12l[?25h[?25l[mAG Response[31m')[m[7;14H[K[7;1H[?12l[?25h[?25lG Response[31m')[m[7;13H[K[7;1H[?12l[?25h[?25l Response[31m')[m[7;12H[K[7;1H[?12l[?25h[?25lResponse[31m')[m[7;11H[K[7;1H[?12l[?25h[?25lesponse[31m')[m[7;10H[K[7;1H[?12l[?25h[?25lsponse[31m')[m[7;9H[K[7;1H[?12l[?25h[?25lponse[31m')[m[7;8H[K[7;1H[?12l[?25h[?25lonse[31m')[m[7;7H[K[7;1H[?12l[?25h[?25lnse[31m')[m[7;6H[K[7;1H[?12l[?25h[?25lse[31m')[m[7;5H[K[7;1H[?12l[?25h[?25le[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[8;1Hplt.savefig([1C[31mEAG Response.png[m[1C)

[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()

plt.figure(figsize=([2C,[1C))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(ORN_Output_current[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)

ep=
a = 
b = 

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([3C-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[2C]*[2C+[[3C]*[2C) - b*o
    [38;5;130mreturn[m do[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[62;221H[K[62;221H97,1[10C69%[7;1H[?12l[?25h[?25llt.savefig([31m'EAG Response.png'[m)[7;31H[K[7;1H[?12l[?25h[?25lt.savefig([31m'EAG Response.png'[m)[7;30H[K[7;1H[?12l[?25h[?25l.savefig([31m'EAG Response.png'[m)[7;29H[K[7;1H[?12l[?25h[?25lsavefig([31m'EAG Response.png'[m)[7;28H[K[7;1H[?12l[?25h[?25lavefig([31m'EAG Response.png'[m)[7;27H[K[7;1H[?12l[?25h[?25lvefig([31m'EAG Response.png'[m)[7;26H[K[7;1H[?12l[?25h[?25lefig([31m'EAG Response.png'[m)[7;25H[K[7;1H[?12l[?25h[?25lfig([31m'EAG Response.png'[m)[7;24H[K[7;1H[?12l[?25h[?25lig([31m'EAG Response.png'[m)[7;23H[K[7;1H[?12l[?25h[?25lg([31m'EAG Response.png'[m)[7;22H[K[7;1H[?12l[?25h[?25l([31m'EAG Response.png'[m)[7;21H[K[7;1H[106m([18C)[?12l[?25h[?25l[m[31m[106m'[m[31mEAG Response.png'[m)[106m [m[31m'[m[7;20H[K[7;1H[?12l[?25h[?25lEAG Response.png[31m')[m[7;19H[K[9;1H[31m# Save ORN Data
np.save([m[1CORN Firing Data[1C[31m,orns[:,::100])

init_theta = np.random.uniform(size=orns.shape[0])
random_normal = np.random.normal(size=orns.shape)

def spike_generator(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    for i in range(fr.shape[1]):
        dtheta = resolution/1000*fr[:,i]
        theta = theta + dtheta + 0.005*random_normal[:,i]
        spike[:,i]= theta>1 
        theta = np.where(theta>1,np.zeros(theta.shape[0]),theta)
        if i%int(1000/resolution)==0:
            print([m[1CORN Spiking {}/{} ms Completed[1C[31m.format(int(i*resolution),int(fr.shape[1]*resolution)), end = [m[1C\[31mr')
    return spike

orns_spike = spike_generator(orns,0.01)
print()

# Generate Antennal Output

print([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[m[1CORN-AL[1C[31m]).T

p_n = int(0.75*locust[[m[1CAL_n[1C[31m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
for i in range(ORN_Output_s.shape[0]):
    cfilter = 0.5*np.ones(30)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[m[1Csame[1C[31m)
    print([m[1C{}/{} Acetylcholine Concentration Integration Completed[1C[31m.format(i+1,locust[[m[1CAL_n[1C[31m]), end = [m[1C\[31mr')
print()

plt.figure(figsize=(12,3))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(ORN_Output_current[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)

ep=
a = 
b = 

def f(o,t):
#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    return do[7;1H[?12l[?25h[?25l[mAG Response.png[31m')[m[7;18H[K[7;1H[?12l[?25h[?25lG Response.png[31m')[m[7;17H[K[7;1H[?12l[?25h[?25l Response.png[31m')[m[7;16H[K[7;1H[?12l[?25h[?25lResponse.png[31m')[m[7;15H[K[7;1H[?12l[?25h[?25lesponse.png[31m')[m[7;14H[K[7;1H[?12l[?25h[?25lsponse.png[31m')[m[7;13H[K[7;1H[?12l[?25h[?25lponse.png[31m')[m[7;12H[K[7;1H[?12l[?25h[?25lonse.png[31m')[m[7;11H[K[7;1H[?12l[?25h[?25lnse.png[31m')[m[7;10H[K[7;1H[?12l[?25h[?25lse.png[31m')[m[7;9H[K[7;1H[?12l[?25h[?25le.png[31m')[m[7;8H[K[7;1H[?12l[?25h[?25l.png[31m')[m[7;7H[K[7;1H[?12l[?25h[?25lpng[31m')[m[7;6H[K[7;1H[?12l[?25h[?25lng[31m')[m[7;5H[K[7;1H[?12l[?25h[?25lg[31m')[m[7;4H[K[7;1H[?12l[?25h[?25l[31m')[m[7;3H[K[7;1H[?12l[?25h[?25l)[7;2H[K[9;1H[34m# Save ORN Data[m
np.save([1C[31mORN Firing Data[m[1C,orns[:,::[3C])

init_theta = np.random.uniform(size=orns.shape[[1C])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[1C]):
        dtheta = resolution/[4C*fr[:,i]
        theta = theta + dtheta + [5C*random_normal[:,i]
        spike[:,i]= theta>[1C 
        theta = np.where(theta>[1C,np.zeros(theta.shape[[1C]),theta)
        [38;5;130mif[m i%[36mint[m([4C/resolution)==[1C:
            [36mprint[m([1C[31mORN Spiking {}/{} ms Completed[m[1C.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[1C]*resolution)), end = [1C[35m\r[m[1C)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[4C)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([30C)

ORN_Output_s = np.matmul(orns_spike.T,locust[[1C[31mORN-AL[m[1C]).T

p_n = [36mint[m([4C*locust[[1C[31mAL_n[m[1C])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[1C]):
    cfilter = [3C*np.ones([2C)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[1C[31msame[m[1C)
    [36mprint[m([1C[31m{}/{} Acetylcholine Concentration Integration Completed[m[1C.[36mformat[m(i+[1C,locust[[1C[31mAL_n[m[1C]), end = [1C[35m\r[m[1C)
[36mprint[m()

plt.figure(figsize=([2C,[1C))
order = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(ORN_Output_current[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)

ep=
a = 
b = 

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([3C-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[2C]*[2C+[[3C]*[2C) - b*o
    [38;5;130mreturn[m do[7;1H[?12l[?25h[?25l[7;1H[K[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1Htime = np.arange(ORN_Output_current.shape[[31m1[m])*ep[62;221H[K[62;221H97,1[10C69%[7;1H[?12l[?25h[?25l[7;61r[61;1H
[1;62r[61;1HX = np.zeros(ORN_Output_current.shape)[62;221H[K[62;221H97,1[10C70%[7;1H[?12l[?25h[?25l[62;222H8[8;1H[?12l[?25h[?25l[62;222H7[7;1H[?12l[?25h[?25l[8;61r[8;1H[L[1;62r[7;1H[K[8;1H[34m# Save ORN Data[m[62;221H[K[62;221H98,1[10C69%[8;1H[?12l[?25h[?25l[62;222H9[9;1H[?12l[?25h[?25l[62;221H100,1[10;1H[?12l[?25h[?25l[62;223H1[11;1H[?12l[?25h[?25l[62;223H2[12;1H[?12l[?25h[?25l[62;223H3[13;1H[?12l[?25h[?25l[62;223H4[14;1H[?12l[?25h[?25l[62;223H5[15;1H[?12l[?25h[?25l[62;223H6[16;1H[?12l[?25h[?25l[62;223H7[17;1H[?12l[?25h[?25l[62;223H8[18;1H[?12l[?25h[?25l[62;223H9[19;1H[?12l[?25h[?25l[62;222H10[20;1H[?12l[?25h[?25l[62;223H1[21;1H[?12l[?25h[?25l[62;223H2[22;1H[?12l[?25h[?25l[62;223H3[23;1H[?12l[?25h[?25l[62;223H4[24;1H[?12l[?25h[?25l[62;223H5[25;1H[?12l[?25h[?25l[62;223H6[26;1H[?12l[?25h[?25l[62;223H7[27;1H[?12l[?25h[?25l[62;223H8[28;1H[?12l[?25h[?25l[62;223H9[29;1H[?12l[?25h[?25l[62;222H20[30;1H[?12l[?25h[?25l[62;223H1[31;1H[?12l[?25h[?25l[62;223H2[32;1H[?12l[?25h[?25l[62;223H3[33;1H[?12l[?25h[?25l[62;223H4[34;1H[?12l[?25h[?25l[62;223H5[35;1H[?12l[?25h[?25l[62;223H6[36;1H[?12l[?25h[?25l[62;223H7[37;1H[?12l[?25h[?25l[62;223H8[38;1H[?12l[?25h[?25l[62;223H9[39;1H[?12l[?25h[?25l[62;222H30[40;1H[?12l[?25h[?25l[62;223H1[41;1H[?12l[?25h[?25l[62;223H2[42;1H[?12l[?25h[?25l[62;223H3[43;1H[?12l[?25h[?25l[62;223H4[44;1H[?12l[?25h[?25l[62;223H3[43;1H[?12l[?25h[?25l[43;61r[61;1H
[1;62r[61;1HX = np.zeros(ORN_Output_current.shape)[62;221H[K[62;221H133,1[9C70%[43;1H[?12l[?25h[?25llt.figure(figsize=([31m12[m,[31m3[m)[43;26H[K[43;1H[?12l[?25h[?25lt.figure(figsize=([31m12[m,[31m3[m)[43;25H[K[43;1H[?12l[?25h[?25l.figure(figsize=([31m12[m,[31m3[m)[43;24H[K[43;1H[?12l[?25h[?25lfigure(figsize=([31m12[m,[31m3[m)[43;23H[K[43;1H[?12l[?25h[?25ligure(figsize=([31m12[m,[31m3[m)[43;22H[K[43;1H[?12l[?25h[?25lgure(figsize=([31m12[m,[31m3[m)[43;21H[K[43;1H[?12l[?25h[?25lure(figsize=([31m12[m,[31m3[m)[43;20H[K[43;1H[?12l[?25h[?25lre(figsize=([31m12[m,[31m3[m)[43;19H[K[43;1H[?12l[?25h[?25le(figsize=([31m12[m,[31m3[m)[43;18H[K[43;1H[?12l[?25h[?25l(figsize=([31m12[m,[31m3[m)[43;17H[K[43;1H[106m([14C)[?12l[?25h[?25lf[migsize=([31m12[m,[31m3[m))[106m [mf[43;16H[K[43;1H[?12l[?25h[?25ligsize=([31m12[m,[31m3[m)[43;15H[K[43;1H[?12l[?25h[?25lgsize=([31m12[m,[31m3[m)[43;14H[K[43;1H[?12l[?25h[?25lsize=([31m12[m,[31m3[m)[43;13H[K[43;1H[?12l[?25h[?25lize=([31m12[m,[31m3[m)[43;12H[K[43;1H[?12l[?25h[?25lze=([31m12[m,[31m3[m)[43;11H[K[43;1H[?12l[?25h[?25le=([31m12[m,[31m3[m)[43;10H[K[43;1H[?12l[?25h[?25l=([31m12[m,[31m3[m)[43;9H[K[43;1H[?12l[?25h[?25l([31m12[m,[31m3[m)[43;8H[K[43;1H[106m([4C)[?12l[?25h[?25l[m[31m[106m1[m[31m2[m,[31m3[m)[43;7H[K[43;1H[31m1[m[4C)[?12l[?25h[?25l[31m2[m,[31m3[m)[43;6H[K[43;1H[?12l[?25h[?25l,[31m3[m)[43;5H[K[43;1H[?12l[?25h[?25l[31m3[m)[43;4H[K[43;1H[?12l[?25h[?25l)[43;3H[K[43;1H[?12l[?25h[?25l[43;2H[K[43;1H[?12l[?25h[?25l[43;1H[K[43;1H[?12l[?25h[?25l[43;61r[61;1H
[1;62r[62;221H[K[62;221H133,1[9C70%[43;1H[?12l[?25h[?25lrder = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;145H[K[43;1H[?12l[?25h[?25lder = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;144H[K[43;1H[?12l[?25h[?25ler = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;143H[K[43;1H[?12l[?25h[?25lr = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;142H[K[43;1H[?12l[?25h[?25l = np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;141H[K[43;1H[?12l[?25h[?25l= np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;140H[K[43;1H[?12l[?25h[?25l np.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;139H[K[43;1H[?12l[?25h[?25lnp.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;138H[K[43;1H[?12l[?25h[?25lp.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;137H[K[43;1H[?12l[?25h[?25l.concatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;136H[K[43;1H[?12l[?25h[?25lconcatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;135H[K[43;1H[?12l[?25h[?25loncatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;134H[K[43;1H[?12l[?25h[?25lncatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;133H[K[43;1H[?12l[?25h[?25lcatenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;132H[K[43;1H[?12l[?25h[?25latenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;131H[K[43;1H[?12l[?25h[?25ltenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;130H[K[43;1H[?12l[?25h[?25lenate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;129H[K[43;1H[?12l[?25h[?25lnate((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;128H[K[43;1H[?12l[?25h[?25late((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;127H[K[43;1H[?12l[?25h[?25lte((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;126H[K[43;1H[?12l[?25h[?25le((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;125H[K[43;1H[?12l[?25h[?25l((np.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;124H[K[43;1H[106m([121C)[?12l[?25h[?25l[m[1Cnp.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m]))[106m )[m[43;123H[K[43;1H[?12l[?25h[?25l[106mn[mp.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;122H[K[43;1Hn[119C)[?12l[?25h[?25lp.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;121H[K[43;1H[?12l[?25h[?25l.argsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;120H[K[43;1H[?12l[?25h[?25largsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;119H[K[43;1H[?12l[?25h[?25lrgsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;118H[K[43;1H[?12l[?25h[?25lgsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;117H[K[43;1H[?12l[?25h[?25lsort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;116H[K[43;1H[?12l[?25h[?25lort(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;115H[K[43;1H[?12l[?25h[?25lrt(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;114H[K[43;1H[?12l[?25h[?25lt(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;113H[K[43;1H[?12l[?25h[?25l(ORN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;112H[K[43;1H[106m([39C)[?12l[?25h[?25lO[mRN_Output_current[:p_n,:].mean(axis=[31m1[m))[106m[[m::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;111H[K[43;1HO[39C[[?12l[?25h[?25lRN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;110H[K[43;1H[?12l[?25h[?25lN_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;109H[K[43;1H[?12l[?25h[?25l_Output_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;108H[K[43;1H[?12l[?25h[?25lOutput_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;107H[K[43;1H[?12l[?25h[?25lutput_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;106H[K[43;1H[?12l[?25h[?25ltput_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;105H[K[43;1H[?12l[?25h[?25lput_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;104H[K[43;1H[?12l[?25h[?25lut_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;103H[K[43;1H[?12l[?25h[?25lt_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;102H[K[43;1H[?12l[?25h[?25l_current[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;101H[K[43;1H[?12l[?25h[?25lcurrent[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;100H[K[43;1H[?12l[?25h[?25lurrent[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;99H[K[43;1H[?12l[?25h[?25lrrent[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;98H[K[43;1H[?12l[?25h[?25lrent[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;97H[K[43;1H[?12l[?25h[?25lent[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;96H[K[43;1H[?12l[?25h[?25lnt[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;95H[K[43;1H[?12l[?25h[?25lt[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;94H[K[43;1H[?12l[?25h[?25l[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;93H[K[43;1H[106m[[m:p_n,:[106m][?12l[?25h[?25l:[mp_n,:][106m.[mmean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;92H[K[43;1H:p_n,:].[?12l[?25h[?25lp_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;91H[K[43;1H[?12l[?25h[?25l_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;90H[K[43;1H[?12l[?25h[?25ln,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;89H[K[43;1H[?12l[?25h[?25l,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;88H[K[43;1H[?12l[?25h[?25l:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;87H[K[43;1H[?12l[?25h[?25l].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;86H[K[43;1H[?12l[?25h[?25l.mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;85H[K[43;1H[?12l[?25h[?25lmean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;84H[K[43;1H[?12l[?25h[?25lean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;83H[K[43;1H[?12l[?25h[?25lan(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;82H[K[43;1H[?12l[?25h[?25ln(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;81H[K[43;1H[?12l[?25h[?25l(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;80H[K[43;1H[106m([6C)[?12l[?25h[?25la[mxis=[31m1[m)[1C[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;79H[K[43;1Ha[6C)[?12l[?25h[?25lxis=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;78H[K[43;1H[?12l[?25h[?25l[38;5;130mis[m=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;77H[K[43;1H[?12l[?25h[?25ls=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;76H[K[43;1H[?12l[?25h[?25l=[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;75H[K[43;1H[?12l[?25h[?25l[31m1[m))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;74H[K[43;1H[?12l[?25h[?25l))[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;73H[K[43;1H[?12l[?25h[?25l)[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;72H[K[43;1H[?12l[?25h[?25l[::-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;71H[K[43;1H[106m[[4C][?12l[?25h[?25l:[m:-[31m1[m][106m,[mp_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;70H[K[43;1H:[4C,[?12l[?25h[?25l:-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;69H[K[43;1H[?12l[?25h[?25l-[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;68H[K[43;1H[?12l[?25h[?25l[31m1[m],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;67H[K[43;1H[?12l[?25h[?25l],p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;66H[K[43;1H[?12l[?25h[?25l,p_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;65H[K[43;1H[?12l[?25h[?25lp_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;64H[K[43;1H[?12l[?25h[?25l_n+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;63H[K[43;1H[?12l[?25h[?25ln+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;62H[K[43;1H[?12l[?25h[?25l+np.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;61H[K[43;1H[?12l[?25h[?25lnp.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;60H[K[43;1H[?12l[?25h[?25lp.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;59H[K[43;1H[?12l[?25h[?25l.argsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;58H[K[43;1H[?12l[?25h[?25largsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;57H[K[43;1H[?12l[?25h[?25lrgsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;56H[K[43;1H[?12l[?25h[?25lgsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;55H[K[43;1H[?12l[?25h[?25lsort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;54H[K[43;1H[?12l[?25h[?25lort(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;53H[K[43;1H[?12l[?25h[?25lrt(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;52H[K[43;1H[?12l[?25h[?25lt(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;51H[K[43;1H[?12l[?25h[?25l(ORN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;50H[K[43;1H[106m([39C)[?12l[?25h[?25lO[mRN_Output_current[p_n:,:].mean(axis=[31m1[m))[106m[[m::-[31m1[m])[43;49H[K[43;1HO[39C[[?12l[?25h[?25lRN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;48H[K[43;1H[?12l[?25h[?25lN_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;47H[K[43;1H[?12l[?25h[?25l_Output_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;46H[K[43;1H[?12l[?25h[?25lOutput_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;45H[K[43;1H[?12l[?25h[?25lutput_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;44H[K[43;1H[?12l[?25h[?25ltput_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;43H[K[43;1H[?12l[?25h[?25lput_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;42H[K[43;1H[?12l[?25h[?25lut_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;41H[K[43;1H[?12l[?25h[?25lt_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;40H[K[43;1H[?12l[?25h[?25l_current[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;39H[K[43;1H[?12l[?25h[?25lcurrent[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;38H[K[43;1H[?12l[?25h[?25lurrent[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;37H[K[43;1H[?12l[?25h[?25lrrent[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;36H[K[43;1H[?12l[?25h[?25lrent[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;35H[K[43;1H[?12l[?25h[?25lent[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;34H[K[43;1H[?12l[?25h[?25lnt[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;33H[K[43;1H[?12l[?25h[?25lt[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;32H[K[43;1H[?12l[?25h[?25l[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;31H[K[43;1H[106m[[mp_n:,:[106m][?12l[?25h[?25lp[m_n:,:][106m.[mmean(axis=[31m1[m))[::-[31m1[m])[43;30H[K[43;1Hp_n:,:].[?12l[?25h[?25l_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;29H[K[43;1H[?12l[?25h[?25ln:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;28H[K[43;1H[?12l[?25h[?25l:,:].mean(axis=[31m1[m))[::-[31m1[m])[43;27H[K[43;1H[?12l[?25h[?25l,:].mean(axis=[31m1[m))[::-[31m1[m])[43;26H[K[43;1H[?12l[?25h[?25l:].mean(axis=[31m1[m))[::-[31m1[m])[43;25H[K[43;1H[?12l[?25h[?25l].mean(axis=[31m1[m))[::-[31m1[m])[43;24H[K[43;1H[?12l[?25h[?25l.mean(axis=[31m1[m))[::-[31m1[m])[43;23H[K[43;1H[?12l[?25h[?25lmean(axis=[31m1[m))[::-[31m1[m])[43;22H[K[43;1H[?12l[?25h[?25lean(axis=[31m1[m))[::-[31m1[m])[43;21H[K[43;1H[?12l[?25h[?25lan(axis=[31m1[m))[::-[31m1[m])[43;20H[K[43;1H[?12l[?25h[?25ln(axis=[31m1[m))[::-[31m1[m])[43;19H[K[43;1H[?12l[?25h[?25l(axis=[31m1[m))[::-[31m1[m])[43;18H[K[43;1H[106m([6C)[?12l[?25h[?25la[mxis=[31m1[m)[1C[::-[31m1[m])[43;17H[K[43;1Ha[6C)[?12l[?25h[?25lxis=[31m1[m))[::-[31m1[m])[43;16H[K[43;1H[?12l[?25h[?25l[38;5;130mis[m=[31m1[m))[::-[31m1[m])[43;15H[K[43;1H[?12l[?25h[?25ls=[31m1[m))[::-[31m1[m])[43;14H[K[43;1H[?12l[?25h[?25l=[31m1[m))[::-[31m1[m])[43;13H[K[43;1H[?12l[?25h[?25l[31m1[m))[::-[31m1[m])[43;12H[K[43;1H[?12l[?25h[?25l))[::-[31m1[m])[43;11H[K[43;1H[?12l[?25h[?25l)[::-[31m1[m])[43;10H[K[43;1H[?12l[?25h[?25l[::-[31m1[m])[43;9H[K[43;1H[106m[[4C][?12l[?25h[?25l:[m:-[31m1[m][106m)[m[43;8H[K[43;1H:[4C)[?12l[?25h[?25l:-[31m1[m])[43;7H[K[43;1H[?12l[?25h[?25l-[31m1[m])[43;6H[K[43;1H[?12l[?25h[?25l[31m1[m])[43;5H[K[43;1H[?12l[?25h[?25l])[43;4H[K[43;1H[?12l[?25h[?25l)[43;3H[K[43;1H[?12l[?25h[?25l[43;2H[K[43;1H[?12l[?25h[?25l[43;1H[K[43;1H[?12l[?25h[?25l[43;61r[61;1H
[1;62r[61;1HX[:,[31m0[m]= [31m0[m[62;221H[K[62;221H133,1[9C71%[43;1H[?12l[?25h[?25llt.imshow(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;58H[K[43;1H[?12l[?25h[?25lt.imshow(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;57H[K[43;1H[?12l[?25h[?25l.imshow(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;56H[K[43;1H[?12l[?25h[?25limshow(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;55H[K[43;1H[?12l[?25h[?25lmshow(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;54H[K[43;1H[?12l[?25h[?25lshow(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;53H[K[43;1H[?12l[?25h[?25lhow(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;52H[K[43;1H[?12l[?25h[?25low(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;51H[K[43;1H[?12l[?25h[?25lw(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;50H[K[43;1H[?12l[?25h[?25l(ORN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;49H[K[43;1H[106m([46C)[?12l[?25h[?25lO[mRN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[106m [mO[43;48H[K[43;1H[?12l[?25h[?25lRN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;47H[K[43;1H[?12l[?25h[?25lN_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;46H[K[43;1H[?12l[?25h[?25l_Output_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;45H[K[43;1H[?12l[?25h[?25lOutput_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;44H[K[43;1H[?12l[?25h[?25lutput_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;43H[K[43;1H[?12l[?25h[?25ltput_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;42H[K[43;1H[?12l[?25h[?25lput_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;41H[K[43;1H[?12l[?25h[?25lut_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;40H[K[43;1H[?12l[?25h[?25lt_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;39H[K[43;1H[?12l[?25h[?25l_current[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;38H[K[43;1H[?12l[?25h[?25lcurrent[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;37H[K[43;1H[?12l[?25h[?25lurrent[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;36H[K[43;1H[?12l[?25h[?25lrrent[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;35H[K[43;1H[?12l[?25h[?25lrent[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;34H[K[43;1H[?12l[?25h[?25lent[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;33H[K[43;1H[?12l[?25h[?25lnt[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;32H[K[43;1H[?12l[?25h[?25lt[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;31H[K[43;1H[?12l[?25h[?25l[order,::[31m10[m[1C], aspect=[31m'auto'[m)[43;30H[K[43;1H[106m[[11C][?12l[?25h[?25lo[mrder,::[31m10[m[1C][106m,[m aspect=[31m'auto'[m)[43;29H[K[43;1Ho[11C,[?12l[?25h[?25lrder,::[31m10[m[1C], aspect=[31m'auto'[m)[43;28H[K[43;1H[?12l[?25h[?25lder,::[31m10[m[1C], aspect=[31m'auto'[m)[43;27H[K[43;1H[?12l[?25h[?25ler,::[31m10[m[1C], aspect=[31m'auto'[m)[43;26H[K[43;1H[?12l[?25h[?25lr,::[31m10[m[1C], aspect=[31m'auto'[m)[43;25H[K[43;1H[?12l[?25h[?25l,::[31m10[m[1C], aspect=[31m'auto'[m)[43;24H[K[43;1H[?12l[?25h[?25l::[31m10[m[1C], aspect=[31m'auto'[m)[43;23H[K[43;1H[?12l[?25h[?25l:[31m10[m[1C], aspect=[31m'auto'[m)[43;22H[K[43;1H[?12l[?25h[?25l[31m10[m[1C], aspect=[31m'auto'[m)[43;21H[K[43;1H[?12l[?25h[?25l[31m0[m[1C], aspect=[31m'auto'[m)[43;20H[K[43;1H[?12l[?25h[?25l[1C], aspect=[31m'auto'[m)[43;19H[K[43;1H[?12l[?25h[?25l], aspect=[31m'auto'[m)[43;18H[K[43;1H[?12l[?25h[?25l, aspect=[31m'auto'[m)[43;17H[K[43;1H[?12l[?25h[?25l aspect=[31m'auto'[m)[43;16H[K[43;1H[?12l[?25h[?25laspect=[31m'auto'[m)[43;15H[K[43;1H[?12l[?25h[?25lspect=[31m'auto'[m)[43;14H[K[43;1H[?12l[?25h[?25lpect=[31m'auto'[m)[43;13H[K[43;1H[?12l[?25h[?25lect=[31m'auto'[m)[43;12H[K[43;1H[?12l[?25h[?25lct=[31m'auto'[m)[43;11H[K[43;1H[?12l[?25h[?25lt=[31m'auto'[m)[43;10H[K[43;1H[?12l[?25h[?25l=[31m'auto'[m)[43;9H[K[43;1H[?12l[?25h[?25l[31m'auto'[m)[43;8H[K[43;1H[?12l[?25h[?25lauto[31m')[m[43;7H[K[44;1H[31mplt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)

ep=
a = 
b = 

def f(o,t):
#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    return do

time = np.arange(ORN_Output_current.shape[1])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,0]= [43;1H[?12l[?25h[?25l[muto[31m')[m[43;6H[K[43;1H[?12l[?25h[?25lto[31m')[m[43;5H[K[43;1H[?12l[?25h[?25lo[31m')[m[43;4H[K[43;1H[?12l[?25h[?25l[31m')[m[43;3H[K[43;1H[?12l[?25h[?25l)[43;2H[K[44;1Hplt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)

ep=
a = 
b = 

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([3C-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[2C]*[2C+[[3C]*[2C) - b*o
    [38;5;130mreturn[m do

time = np.arange(ORN_Output_current.shape[[1C])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,[1C]= [43;1H[?12l[?25h[?25l[43;1H[K[43;1H[?12l[?25h[?25l[43;61r[61;1H
[1;62r[62;221H[K[62;221H133,1[9C72%[43;1H[?12l[?25h[?25llt.colorbar()[43;14H[K[43;1H[?12l[?25h[?25lt.colorbar()[43;13H[K[43;1H[?12l[?25h[?25l.colorbar()[43;12H[K[43;1H[?12l[?25h[?25lcolorbar()[43;11H[K[43;1H[?12l[?25h[?25lolorbar()[43;10H[K[43;1H[?12l[?25h[?25llorbar()[43;9H[K[43;1H[?12l[?25h[?25lorbar()[43;8H[K[43;1H[?12l[?25h[?25lrbar()[43;7H[K[43;1H[?12l[?25h[?25lbar()[43;6H[K[43;1H[?12l[?25h[?25lar()[43;5H[K[43;1H[?12l[?25h[?25lr()[43;4H[K[43;1H[?12l[?25h[?25l()[43;3H[K[43;1H[106m()[?12l[?25h[?25l) [m)[43;2H[K[43;1H[?12l[?25h[?25l[43;1H[K[43;1H[?12l[?25h[?25l[43;61r[61;1H
[1;62r[61;1H[38;5;130mfor[m i [38;5;130min[m [36mrange[m([31m1[m,time.shape[[31m0[m]):[62;221H[K[62;221H133,1[9C72%[43;1H[?12l[?25h[?25llt.xlabel([31m'Time (in ms)'[m)[43;26H[K[43;1H[?12l[?25h[?25lt.xlabel([31m'Time (in ms)'[m)[43;25H[K[43;1H[?12l[?25h[?25l.xlabel([31m'Time (in ms)'[m)[43;24H[K[43;1H[?12l[?25h[?25lxlabel([31m'Time (in ms)'[m)[43;23H[K[43;1H[?12l[?25h[?25llabel([31m'Time (in ms)'[m)[43;22H[K[43;1H[?12l[?25h[?25label([31m'Time (in ms)'[m)[43;21H[K[43;1H[?12l[?25h[?25lbel([31m'Time (in ms)'[m)[43;20H[K[43;1H[?12l[?25h[?25lel([31m'Time (in ms)'[m)[43;19H[K[43;1H[?12l[?25h[?25ll([31m'Time (in ms)'[m)[43;18H[K[43;1H[?12l[?25h[?25l([31m'Time (in ms)'[m)[43;17H[K[43;1H[106m([14C)[?12l[?25h[?25l[m[31m[106m'[m[31mTime (in ms)'[m)[106m [m[31m'[m[43;16H[K[43;1H[?12l[?25h[?25lTime ([38;5;130min[m ms)[31m')[m[43;15H[K[44;1H[31mplt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)

ep=
a = 
b = 

def f(o,t):
#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    return do

time = np.arange(ORN_Output_current.shape[1])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,0]= 

for i in range(1,time.shape[0]):[43;1H[?12l[?25h[?25l[mime ([38;5;130min[m ms)[31m')[m[43;14H[K[43;1H[?12l[?25h[?25lme ([38;5;130min[m ms)[31m')[m[43;13H[K[43;1H[?12l[?25h[?25le ([38;5;130min[m ms)[31m')[m[43;12H[K[43;1H[?12l[?25h[?25l ([38;5;130min[m ms)[31m')[m[43;11H[K[43;1H[?12l[?25h[?25l([38;5;130min[m ms)[31m')[m[43;10H[K[43;1H[106m([5C)[?12l[?25h[?25l[m[38;5;130m[106mi[m[38;5;130mn[m ms)[31m[106m'[m[31m)[m[43;9H[K[43;1H[38;5;130mi[m[5C[31m'[?12l[?25h[?25l[mn ms)[31m')[m[43;8H[K[43;1H[?12l[?25h[?25l ms)[31m')[m[43;7H[K[43;1H[?12l[?25h[?25lms)[31m')[m[43;6H[K[43;1H[?12l[?25h[?25ls)[31m')[m[43;5H[K[43;1H[?12l[?25h[?25l)[31m')[m[43;4H[K[43;1H[?12l[?25h[?25l[31m')[m[43;3H[K[43;1H[?12l[?25h[?25l)[43;2H[K[44;1Hplt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)

ep=
a = 
b = 

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([3C-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[2C]*[2C+[[3C]*[2C) - b*o
    [38;5;130mreturn[m do

time = np.arange(ORN_Output_current.shape[[1C])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,[1C]= 

[38;5;130mfor[m i [38;5;130min[m [36mrange[m([1C,time.shape[[1C]):[43;1H[?12l[?25h[?25l[43;1H[K[43;1H[?12l[?25h[?25l[43;61r[61;1H
[1;62r[61;5HX[:,i] = X[:,i-[31m1[m] + ep*f(X[:,i-[31m1[m],time[i-[31m1[m])[62;221H[K[62;221H133,1[9C73%[43;1H[?12l[?25h[?25llt.ylabel([31m'Neuron Number'[m)[43;27H[K[43;1H[?12l[?25h[?25lt.ylabel([31m'Neuron Number'[m)[43;26H[K[43;1H[?12l[?25h[?25l.ylabel([31m'Neuron Number'[m)[43;25H[K[43;1H[?12l[?25h[?25lylabel([31m'Neuron Number'[m)[43;24H[K[43;1H[?12l[?25h[?25llabel([31m'Neuron Number'[m)[43;23H[K[43;1H[?12l[?25h[?25label([31m'Neuron Number'[m)[43;22H[K[43;1H[?12l[?25h[?25lbel([31m'Neuron Number'[m)[43;21H[K[43;1H[?12l[?25h[?25lel([31m'Neuron Number'[m)[43;20H[K[43;1H[?12l[?25h[?25ll([31m'Neuron Number'[m)[43;19H[K[43;1H[?12l[?25h[?25l([31m'Neuron Number'[m)[43;18H[K[43;1H[106m([15C)[?12l[?25h[?25l[m[31m[106m'[m[31mNeuron Number'[m)[106m [m[31m'[m[43;17H[K[43;1H[?12l[?25h[?25lNeuron Numbe[31mr')[m[43;16H[K[44;1H[31mplt.savefig([m[1CAcetylcholine Concentration.png[1C[31m)

ep=
a = 
b = 

def f(o,t):
#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    return do

time = np.arange(ORN_Output_current.shape[1])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,0]= 

for i in range(1,time.shape[0]):
    X[:,i] = X[:,i-1] + ep*f(X[:,i-1],time[i-1])[43;1H[?12l[?25h[?25l[meuron Numbe[31mr')[m[43;15H[K[43;1H[?12l[?25h[?25luron Numbe[31mr')[m[43;14H[K[43;1H[?12l[?25h[?25lron Numbe[31mr')[m[43;13H[K[43;1H[?12l[?25h[?25lon Numbe[31mr')[m[43;12H[K[43;1H[?12l[?25h[?25ln Numbe[31mr')[m[43;11H[K[43;1H[?12l[?25h[?25l Numbe[31mr')[m[43;10H[K[43;1H[?12l[?25h[?25lNumbe[31mr')[m[43;9H[K[43;1H[?12l[?25h[?25lumbe[31mr')[m[43;8H[K[43;1H[?12l[?25h[?25lmbe[31mr')[m[43;7H[K[43;1H[?12l[?25h[?25lbe[31mr')[m[43;6H[K[43;1H[?12l[?25h[?25le[31mr')[m[43;5H[K[43;1H[?12l[?25h[?25l[31mr')[m[43;4H[K[43;1H[?12l[?25h[?25l[31m')[m[43;3H[K[43;1H[?12l[?25h[?25l)[43;2H[K[44;1Hplt.savefig([1C[31mAcetylcholine Concentration.png[m[1C)

ep=
a = 
b = 

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([3C-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[2C]*[2C+[[3C]*[2C) - b*o
    [38;5;130mreturn[m do

time = np.arange(ORN_Output_current.shape[[1C])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,[1C]= 

[38;5;130mfor[m i [38;5;130min[m [36mrange[m([1C,time.shape[[1C]):
    X[:,i] = X[:,i-[1C] + ep*f(X[:,i-[1C],time[i-[1C])[43;1H[?12l[?25h[?25l[43;1H[K[43;1H[?12l[?25h[?25l[43;61r[61;1H
[1;62r[61;5H[38;5;130mif[m i%[36mint[m([31m100[m/ep) == [31m0[m:[62;221H[K[62;221H133,1[9C73%[43;1H[?12l[?25h[?25llt.savefig([31m'Acetylcholine Concentration.png'[m)[43;46H[K[43;1H[?12l[?25h[?25lt.savefig([31m'Acetylcholine Concentration.png'[m)[43;45H[K[43;1H[?12l[?25h[?25l.savefig([31m'Acetylcholine Concentration.png'[m)[43;44H[K[43;1H[?12l[?25h[?25lsavefig([31m'Acetylcholine Concentration.png'[m)[43;43H[K[43;1H[?12l[?25h[?25lavefig([31m'Acetylcholine Concentration.png'[m)[43;42H[K[43;1H[?12l[?25h[?25lvefig([31m'Acetylcholine Concentration.png'[m)[43;41H[K[43;1H[?12l[?25h[?25lefig([31m'Acetylcholine Concentration.png'[m)[43;40H[K[43;1H[?12l[?25h[?25lfig([31m'Acetylcholine Concentration.png'[m)[43;39H[K[43;1H[?12l[?25h[?25lig([31m'Acetylcholine Concentration.png'[m)[43;38H[K[43;1H[?12l[?25h[?25lg([31m'Acetylcholine Concentration.png'[m)[43;37H[K[43;1H[?12l[?25h[?25l([31m'Acetylcholine Concentration.png'[m)[43;36H[K[43;1H[106m([33C)[?12l[?25h[?25l[m[31m[106m'[m[31mAcetylcholine Concentration.png'[m)[106m [m[31m'[m[43;35H[K[43;1H[?12l[?25h[?25lAcetylcholine Concentration.png[31m')[m[43;34H[K[45;1H[31mep=
a = 
b = 

def f(o,t):
#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o
    return do

time = np.arange(ORN_Output_current.shape[1])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,0]= 

for i in range(1,time.shape[0]):
    X[:,i] = X[:,i-1] + ep*f(X[:,i-1],time[i-1])
    if i%int(100/ep) == 0:[43;1H[?12l[?25h[?25l[mcetylcholine Concentration.png[31m')[m[43;33H[K[43;1H[?12l[?25h[?25letylcholine Concentration.png[31m')[m[43;32H[K[43;1H[?12l[?25h[?25ltylcholine Concentration.png[31m')[m[43;31H[K[43;1H[?12l[?25h[?25lylcholine Concentration.png[31m')[m[43;30H[K[43;1H[?12l[?25h[?25llcholine Concentration.png[31m')[m[43;29H[K[43;1H[?12l[?25h[?25lcholine Concentration.png[31m')[m[43;28H[K[43;1H[?12l[?25h[?25lholine Concentration.png[31m')[m[43;27H[K[43;1H[?12l[?25h[?25loline Concentration.png[31m')[m[43;26H[K[43;1H[?12l[?25h[?25lline Concentration.png[31m')[m[43;25H[K[43;1H[?12l[?25h[?25line Concentration.png[31m')[m[43;24H[K[43;1H[?12l[?25h[?25lne Concentration.png[31m')[m[43;23H[K[43;1H[?12l[?25h[?25le Concentration.png[31m')[m[43;22H[K[43;1H[?12l[?25h[?25l Concentration.png[31m')[m[43;21H[K[43;1H[?12l[?25h[?25lConcentration.png[31m')[m[43;20H[K[43;1H[?12l[?25h[?25loncentration.png[31m')[m[43;19H[K[43;1H[?12l[?25h[?25lncentration.png[31m')[m[43;18H[K[43;1H[?12l[?25h[?25lcentration.png[31m')[m[43;17H[K[43;1H[?12l[?25h[?25lentration.png[31m')[m[43;16H[K[43;1H[?12l[?25h[?25lntration.png[31m')[m[43;15H[K[43;1H[?12l[?25h[?25ltration.png[31m')[m[43;14H[K[43;1H[?12l[?25h[?25lration.png[31m')[m[43;13H[K[43;1H[?12l[?25h[?25lation.png[31m')[m[43;12H[K[43;1H[?12l[?25h[?25ltion.png[31m')[m[43;11H[K[43;1H[?12l[?25h[?25lion.png[31m')[m[43;10H[K[43;1H[?12l[?25h[?25lon.png[31m')[m[43;9H[K[43;1H[?12l[?25h[?25ln.png[31m')[m[43;8H[K[43;1H[?12l[?25h[?25l.png[31m')[m[43;7H[K[43;1H[?12l[?25h[?25lpng[31m')[m[43;6H[K[43;1H[?12l[?25h[?25lng[31m')[m[43;5H[K[43;1H[?12l[?25h[?25lg[31m')[m[43;4H[K[43;1H[?12l[?25h[?25l[31m')[m[43;3H[K[43;1H[?12l[?25h[?25l)[43;2H[K[45;1Hep=
a = 
b = 

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([3C-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[2C]*[2C+[[3C]*[2C) - b*o
    [38;5;130mreturn[m do

time = np.arange(ORN_Output_current.shape[[1C])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,[1C]= 

[38;5;130mfor[m i [38;5;130min[m [36mrange[m([1C,time.shape[[1C]):
    X[:,i] = X[:,i-[1C] + ep*f(X[:,i-[1C],time[i-[1C])
    [38;5;130mif[m i%[36mint[m([3C/ep) == [1C:[43;1H[?12l[?25h[?25l[43;1H[K[43;1H[?12l[?25h[?25l[43;61r[61;1H
[1;62r[61;9H[36mprint[m([31m'{}s/{}s Acetylcholine Receptor Integration Completed'[m.[36mformat[m(i*ep,time.shape[[31m0[m]*ep), end = [31m'[m[35m\r[m[31m'[m)[62;221H[K[62;221H133,1[9C74%[43;1H[?12l[?25h[?25l[62;223H4[44;1H[?12l[?25h[?25l[62;223H5[45;1H[?12l[?25h[?25l[62;223H6[46;1H[?12l[?25h[?25l[62;223H7[47;1H[?12l[?25h[?25l[62;223H8[48;1H[?12l[?25h[?25l[62;223H9[49;1H[?12l[?25h[?25l[62;222H40[50;1H[?12l[?25h[?25l[62;223H1[51;1H[?12l[?25h[?25l[62;223H2[52;1H[?12l[?25h[?25l[62;223H3[53;1H[?12l[?25h[?25l[62;223H4[54;1H[?12l[?25h[?25l[62;223H5[55;1H[?12l[?25h[?25l[62;223H6[56;1H[?12l[?25h[?25l[62;223H7[57;1H[?12l[?25h[?25l[62;223H8[58;1H[?12l[?25h[?25l[62;223H9[59;1H[?12l[?25h[?25l[62;222H50[60;1H[?12l[?25h[?25l[62;223H1[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m()[62;221H[K[62;221H152,1[9C75%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H153,1[9C76%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"Generation Complete"[m)[62;221H[K[62;221H154,1[9C76%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H155,1[9C77%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Plot PN Current [m[62;221H[K[62;221H156,1[9C78%[61;1H[?12l[?25h[?25l[62;223H5[60;1H[?12l[?25h[?25l[62;223H4[59;1H[?12l[?25h[?25l[62;223H3[58;1H[?12l[?25h[?25l[62;223H2[57;1H[?12l[?25h[?25l[62;223H1[56;1H[?12l[?25h[?25l[62;223H0[55;1H[?12l[?25h[?25l[62;222H49[54;1H[?12l[?25h[?25l[62;223H8[53;1H[?12l[?25h[?25l[62;223H7[52;1H[?12l[?25h[?25l[62;223H6[51;1H[?12l[?25h[?25l[62;223H7[52;1H[?12l[?25h[?25l[62;223H8[53;1H[?12l[?25h[?25l[62;223H9[54;1H[?12l[?25h[?25l[62;222H50[55;1H[?12l[?25h[?25l[62;223H1[56;1H[?12l[?25h[?25l[62;223H2[57;1H[?12l[?25h[?25l[62;223H3[58;1H[?12l[?25h[?25l[62;223H4[59;1H[?12l[?25h[?25l[62;223H5[60;1H[?12l[?25h[?25l[62;223H6[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.figure()[62;221H[K[62;221H157,1[9C79%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.plot(X[:p_n,::[31m100[m].T)[62;221H[K[62;221H158,1[9C80%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.xlabel([31m'Time (in ms)'[m)[62;221H[K[62;221H159,1[9C80%[61;1H[?12l[?25h[?25l[1;61r[1;1H[4M[1;62r[58;1Hplt.ylabel([31m'PN Current Input'[m)
plt.savefig([31m'PN Current.png'[m)

[34m# Plot LN Current [m[62;221H[K[62;221H163,1[9C84%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.figure()[62;221H[K[62;221H164,1[9C85%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.plot(X[p_n:,::[31m100[m].T)[62;221H[K[62;221H165,1[9C85%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.xlabel([31m'Time (in ms)'[m)[62;221H[K[62;221H166,1[9C86%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.ylabel([31m'LN Current Input'[m)[62;221H[K[62;221H167,1[9C87%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.savefig([31m'LN Current.png'[m)[62;221H[K[62;221H168,1[9C88%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H169,1[9C89%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Plot Overall Current[m[62;221H[K[62;221H170,1[9C90%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.figure()[62;221H[K[62;221H171,1[9C90%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Horder = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m]))[62;221H[K[62;221H172,1[9C91%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.imshow(X[order,::[31m100[m], aspect=[31m'auto'[m)[62;221H[K[62;221H173,1[9C92%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.colorbar()[62;221H[K[62;221H174,1[9C93%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.xlabel([31m'Time (in ms)'[m)[62;221H[K[62;221H175,1[9C94%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.ylabel([31m'Neuron Number'[m)[62;221H[K[62;221H176,1[9C95%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hplt.savefig([31m'AL Input Current.png'[m)[62;221H[K[62;221H177,1[9C95%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H178,1[9C96%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Save Current Input[m[62;221H[K[62;221H179,1[9C97%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hnp.save([31m'current_input'[m,X)[62;221H[K[62;221H180,1[9C98%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H181,1[9C99%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"'Information has been transferred to the Antennal Lobe. Thank you for using our services.' - ORNs"[m)[62;221H[K[62;221H182,1[9CBot[61;1H[?12l[?25h[?25l[62;223H1[60;1H[?12l[?25h[?25l[62;223H0[59;1H[?12l[?25h[?25l[62;222H79[58;1H[?12l[?25h[?25l[62;223H8[57;1H[?12l[?25h[?25l[62;223H7[56;1H[?12l[?25h[?25l[62;223H6[55;1H[?12l[?25h[?25l[62;223H5[54;1H[?12l[?25h[?25l[62;223H4[53;1H[?12l[?25h[?25l[62;223H3[52;1H[?12l[?25h[?25l[62;223H2[51;1H[?12l[?25h[?25l[62;223H1[50;1H[?12l[?25h[?25l[62;223H0[49;1H[?12l[?25h[?25l[62;222H69[48;1H[?12l[?25h[?25l[62;223H8[47;1H[?12l[?25h[?25l[62;223H7[46;1H[?12l[?25h[?25l[62;223H6[45;1H[?12l[?25h[?25l[62;223H5[44;1H[?12l[?25h[?25l[62;223H4[43;1H[?12l[?25h[?25l[62;223H3[42;1H[?12l[?25h[?25l[62;223H2[41;1H[?12l[?25h[?25l[62;223H1[40;1H[?12l[?25h[?25l[62;223H0[39;1H[?12l[?25h[?25l[62;222H59[38;1H[?12l[?25h[?25l[62;223H8[37;1H[?12l[?25h[?25l[62;223H7[36;1H[?12l[?25h[?25l[62;223H6[35;1H[?12l[?25h[?25l[62;223H5[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25l Plot PN Current [34;18H[K[34;1H[?12l[?25h[?25lPlot PN Current [?12l[?25h[?25llot PN Current [?12l[?25h[?25lot PN Current [?12l[?25h[?25lt PN Current [?12l[?25h[?25l PN Current [?12l[?25h[?25lPN Current [?12l[?25h[?25lN Current [?12l[?25h[?25l Current [?12l[?25h[?25lCurrent [?12l[?25h[?25lurrent [?12l[?25h[?25lrrent [?12l[?25h[?25lrent [?12l[?25h[?25lent [?12l[?25h[?25lnt [?12l[?25h[?25lt [?12l[?25h[?25l [?12l[?25h[?25l[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.figure()[34;12H[K[34;1H[?12l[?25h[?25lt.figure()[34;11H[K[34;1H[?12l[?25h[?25l.figure()[34;10H[K[34;1H[?12l[?25h[?25lfigure()[34;9H[K[34;1H[?12l[?25h[?25ligure()[34;8H[K[34;1H[?12l[?25h[?25lgure()[34;7H[K[34;1H[?12l[?25h[?25lure()[34;6H[K[34;1H[?12l[?25h[?25lre()[34;5H[K[34;1H[?12l[?25h[?25le()[34;4H[K[34;1H[?12l[?25h[?25l()[34;3H[K[34;1H[106m()[?12l[?25h[?25l) [m)[34;2H[K[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.plot(X[:p_n,::[31m10[m[1C].T)[34;25H[K[34;1H[?12l[?25h[?25lt.plot(X[:p_n,::[31m10[m[1C].T)[34;24H[K[34;1H[?12l[?25h[?25l.plot(X[:p_n,::[31m10[m[1C].T)[34;23H[K[34;1H[?12l[?25h[?25lplot(X[:p_n,::[31m10[m[1C].T)[34;22H[K[34;1H[?12l[?25h[?25llot(X[:p_n,::[31m10[m[1C].T)[34;21H[K[34;1H[?12l[?25h[?25lot(X[:p_n,::[31m10[m[1C].T)[34;20H[K[34;1H[?12l[?25h[?25lt(X[:p_n,::[31m10[m[1C].T)[34;19H[K[34;1H[?12l[?25h[?25l(X[:p_n,::[31m10[m[1C].T)[34;18H[K[34;1H[106m([15C)[?12l[?25h[?25lX[m[:p_n,::[31m10[m[1C].T)[106m [mX[34;17H[K[34;1H[?12l[?25h[?25l[:p_n,::[31m10[m[1C].T)[34;16H[K[34;1H[106m[[10C][?12l[?25h[?25l:[mp_n,::[31m10[m[1C][106m.[mT)[34;15H[K[34;1H:[10C.[?12l[?25h[?25lp_n,::[31m10[m[1C].T)[34;14H[K[34;1H[?12l[?25h[?25l_n,::[31m10[m[1C].T)[34;13H[K[34;1H[?12l[?25h[?25ln,::[31m10[m[1C].T)[34;12H[K[34;1H[?12l[?25h[?25l,::[31m10[m[1C].T)[34;11H[K[34;1H[?12l[?25h[?25l::[31m10[m[1C].T)[34;10H[K[34;1H[?12l[?25h[?25l:[31m10[m[1C].T)[34;9H[K[34;1H[?12l[?25h[?25l[31m10[m[1C].T)[34;8H[K[34;1H[?12l[?25h[?25l[31m0[m[1C].T)[34;7H[K[34;1H[?12l[?25h[?25l[1C].T)[34;6H[K[34;1H[?12l[?25h[?25l].T)[34;5H[K[34;1H[?12l[?25h[?25l.T)[34;4H[K[34;1H[?12l[?25h[?25lT)[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.xlabel([31m'Time (in ms)'[m)[34;26H[K[34;1H[?12l[?25h[?25lt.xlabel([31m'Time (in ms)'[m)[34;25H[K[34;1H[?12l[?25h[?25l.xlabel([31m'Time (in ms)'[m)[34;24H[K[34;1H[?12l[?25h[?25lxlabel([31m'Time (in ms)'[m)[34;23H[K[34;1H[?12l[?25h[?25llabel([31m'Time (in ms)'[m)[34;22H[K[34;1H[?12l[?25h[?25label([31m'Time (in ms)'[m)[34;21H[K[34;1H[?12l[?25h[?25lbel([31m'Time (in ms)'[m)[34;20H[K[34;1H[?12l[?25h[?25lel([31m'Time (in ms)'[m)[34;19H[K[34;1H[?12l[?25h[?25ll([31m'Time (in ms)'[m)[34;18H[K[34;1H[?12l[?25h[?25l([31m'Time (in ms)'[m)[34;17H[K[34;1H[106m([14C)[?12l[?25h[?25l[m[31m[106m'[m[31mTime (in ms)'[m)[106m [m[31m'[m[34;16H[K[34;1H[?12l[?25h[?25lTime ([38;5;130min[m ms)[31m')[m[34;15H[K[35;1H[31mplt.ylabel([m[1CPN Current Input[1C[31m)
plt.savefig([m[1CPN Current.png[1C[31m)

# Plot LN Current 
plt.figure()
plt.plot(X[p_n:,::100].T)
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CLN Current Input[1C[31m)
plt.savefig([m[1CLN Current.png[1C[31m)

# Plot Overall Current
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(X[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(X[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAL Input Current.png[1C[31m)

# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[mime ([38;5;130min[m ms)[31m')[m[34;14H[K[34;1H[?12l[?25h[?25lme ([38;5;130min[m ms)[31m')[m[34;13H[K[34;1H[?12l[?25h[?25le ([38;5;130min[m ms)[31m')[m[34;12H[K[34;1H[?12l[?25h[?25l ([38;5;130min[m ms)[31m')[m[34;11H[K[34;1H[?12l[?25h[?25l([38;5;130min[m ms)[31m')[m[34;10H[K[34;1H[106m([5C)[?12l[?25h[?25l[m[38;5;130m[106mi[m[38;5;130mn[m ms)[31m[106m'[m[31m)[m[34;9H[K[34;1H[38;5;130mi[m[5C[31m'[?12l[?25h[?25l[mn ms)[31m')[m[34;8H[K[34;1H[?12l[?25h[?25l ms)[31m')[m[34;7H[K[34;1H[?12l[?25h[?25lms)[31m')[m[34;6H[K[34;1H[?12l[?25h[?25ls)[31m')[m[34;5H[K[34;1H[?12l[?25h[?25l)[31m')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[35;1Hplt.ylabel([1C[31mPN Current Input[m[1C)
plt.savefig([1C[31mPN Current.png[m[1C)

[34m# Plot LN Current [m
plt.figure()
plt.plot(X[p_n:,::[3C].T)
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mLN Current Input[m[1C)
plt.savefig([1C[31mLN Current.png[m[1C)

[34m# Plot Overall Current[m
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(X[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(X[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAL Input Current.png[m[1C)

[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.ylabel([31m'PN Current Input'[m)[34;30H[K[34;1H[?12l[?25h[?25lt.ylabel([31m'PN Current Input'[m)[34;29H[K[34;1H[?12l[?25h[?25l.ylabel([31m'PN Current Input'[m)[34;28H[K[34;1H[?12l[?25h[?25lylabel([31m'PN Current Input'[m)[34;27H[K[34;1H[?12l[?25h[?25llabel([31m'PN Current Input'[m)[34;26H[K[34;1H[?12l[?25h[?25label([31m'PN Current Input'[m)[34;25H[K[34;1H[?12l[?25h[?25lbel([31m'PN Current Input'[m)[34;24H[K[34;1H[?12l[?25h[?25lel([31m'PN Current Input'[m)[34;23H[K[34;1H[?12l[?25h[?25ll([31m'PN Current Input'[m)[34;22H[K[34;1H[?12l[?25h[?25l([31m'PN Current Input'[m)[34;21H[K[34;1H[106m([18C)[?12l[?25h[?25l[m[31m[106m'[m[31mPN Current Input'[m)[106m [m[31m'[m[34;20H[K[34;1H[?12l[?25h[?25lPN Current Input[31m')[m[34;19H[K[35;1H[31mplt.savefig([m[1CPN Current.png[1C[31m)

# Plot LN Current 
plt.figure()
plt.plot(X[p_n:,::100].T)
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CLN Current Input[1C[31m)
plt.savefig([m[1CLN Current.png[1C[31m)

# Plot Overall Current
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(X[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(X[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAL Input Current.png[1C[31m)

# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[mN Current Input[31m')[m[34;18H[K[34;1H[?12l[?25h[?25l Current Input[31m')[m[34;17H[K[34;1H[?12l[?25h[?25lCurrent Input[31m')[m[34;16H[K[34;1H[?12l[?25h[?25lurrent Input[31m')[m[34;15H[K[34;1H[?12l[?25h[?25lrrent Input[31m')[m[34;14H[K[34;1H[?12l[?25h[?25lrent Input[31m')[m[34;13H[K[34;1H[?12l[?25h[?25lent Input[31m')[m[34;12H[K[34;1H[?12l[?25h[?25lnt Input[31m')[m[34;11H[K[34;1H[?12l[?25h[?25lt Input[31m')[m[34;10H[K[34;1H[?12l[?25h[?25l Input[31m')[m[34;9H[K[34;1H[?12l[?25h[?25lInput[31m')[m[34;8H[K[34;1H[?12l[?25h[?25lnput[31m')[m[34;7H[K[34;1H[?12l[?25h[?25lput[31m')[m[34;6H[K[34;1H[?12l[?25h[?25lut[31m')[m[34;5H[K[34;1H[?12l[?25h[?25lt[31m')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[35;1Hplt.savefig([1C[31mPN Current.png[m[1C)

[34m# Plot LN Current [m
plt.figure()
plt.plot(X[p_n:,::[3C].T)
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mLN Current Input[m[1C)
plt.savefig([1C[31mLN Current.png[m[1C)

[34m# Plot Overall Current[m
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(X[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(X[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAL Input Current.png[m[1C)

[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.savefig([31m'PN Current.png'[m)[34;29H[K[34;1H[?12l[?25h[?25lt.savefig([31m'PN Current.png'[m)[34;28H[K[34;1H[?12l[?25h[?25l.savefig([31m'PN Current.png'[m)[34;27H[K[34;1H[?12l[?25h[?25lsavefig([31m'PN Current.png'[m)[34;26H[K[34;1H[?12l[?25h[?25lavefig([31m'PN Current.png'[m)[34;25H[K[34;1H[?12l[?25h[?25lvefig([31m'PN Current.png'[m)[34;24H[K[34;1H[?12l[?25h[?25lefig([31m'PN Current.png'[m)[34;23H[K[34;1H[?12l[?25h[?25lfig([31m'PN Current.png'[m)[34;22H[K[34;1H[?12l[?25h[?25lig([31m'PN Current.png'[m)[34;21H[K[34;1H[?12l[?25h[?25lg([31m'PN Current.png'[m)[34;20H[K[34;1H[?12l[?25h[?25l([31m'PN Current.png'[m)[34;19H[K[34;1H[106m([16C)[?12l[?25h[?25l[m[31m[106m'[m[31mPN Current.png'[m)[106m [m[31m'[m[34;18H[K[34;1H[?12l[?25h[?25lPN Current.png[31m')[m[34;17H[K[36;1H[31m# Plot LN Current 
plt.figure()
plt.plot(X[p_n:,::100].T)
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CLN Current Input[1C[31m)
plt.savefig([m[1CLN Current.png[1C[31m)

# Plot Overall Current
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(X[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(X[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAL Input Current.png[1C[31m)

# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[mN Current.png[31m')[m[34;16H[K[34;1H[?12l[?25h[?25l Current.png[31m')[m[34;15H[K[34;1H[?12l[?25h[?25lCurrent.png[31m')[m[34;14H[K[34;1H[?12l[?25h[?25lurrent.png[31m')[m[34;13H[K[34;1H[?12l[?25h[?25lrrent.png[31m')[m[34;12H[K[34;1H[?12l[?25h[?25lrent.png[31m')[m[34;11H[K[34;1H[?12l[?25h[?25lent.png[31m')[m[34;10H[K[34;1H[?12l[?25h[?25lnt.png[31m')[m[34;9H[K[34;1H[?12l[?25h[?25lt.png[31m')[m[34;8H[K[34;1H[?12l[?25h[?25l.png[31m')[m[34;7H[K[34;1H[?12l[?25h[?25lpng[31m')[m[34;6H[K[34;1H[?12l[?25h[?25lng[31m')[m[34;5H[K[34;1H[?12l[?25h[?25lg[31m')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[36;1H[34m# Plot LN Current [m
plt.figure()
plt.plot(X[p_n:,::[3C].T)
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mLN Current Input[m[1C)
plt.savefig([1C[31mLN Current.png[m[1C)

[34m# Plot Overall Current[m
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(X[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(X[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAL Input Current.png[m[1C)

[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25l Plot LN Current [34;18H[K[34;1H[?12l[?25h[?25lPlot LN Current [?12l[?25h[?25llot LN Current [?12l[?25h[?25lot LN Current [?12l[?25h[?25lt LN Current [?12l[?25h[?25l LN Current [?12l[?25h[?25lLN Current [?12l[?25h[?25lN Current [?12l[?25h[?25l Current [?12l[?25h[?25lCurrent [?12l[?25h[?25lurrent [?12l[?25h[?25lrrent [?12l[?25h[?25lrent [?12l[?25h[?25lent [?12l[?25h[?25lnt [?12l[?25h[?25lt [?12l[?25h[?25l [?12l[?25h[?25l[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.figure()[34;12H[K[34;1H[?12l[?25h[?25lt.figure()[34;11H[K[34;1H[?12l[?25h[?25l.figure()[34;10H[K[34;1H[?12l[?25h[?25lfigure()[34;9H[K[34;1H[?12l[?25h[?25ligure()[34;8H[K[34;1H[?12l[?25h[?25lgure()[34;7H[K[34;1H[?12l[?25h[?25lure()[34;6H[K[34;1H[?12l[?25h[?25lre()[34;5H[K[34;1H[?12l[?25h[?25le()[34;4H[K[34;1H[?12l[?25h[?25l()[34;3H[K[34;1H[106m()[?12l[?25h[?25l) [m)[34;2H[K[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.plot(X[p_n:,::[31m10[m[1C].T)[34;25H[K[34;1H[?12l[?25h[?25lt.plot(X[p_n:,::[31m10[m[1C].T)[34;24H[K[34;1H[?12l[?25h[?25l.plot(X[p_n:,::[31m10[m[1C].T)[34;23H[K[34;1H[?12l[?25h[?25lplot(X[p_n:,::[31m10[m[1C].T)[34;22H[K[34;1H[?12l[?25h[?25llot(X[p_n:,::[31m10[m[1C].T)[34;21H[K[34;1H[?12l[?25h[?25lot(X[p_n:,::[31m10[m[1C].T)[34;20H[K[34;1H[?12l[?25h[?25lt(X[p_n:,::[31m10[m[1C].T)[34;19H[K[34;1H[?12l[?25h[?25l(X[p_n:,::[31m10[m[1C].T)[34;18H[K[34;1H[106m([15C)[?12l[?25h[?25lX[m[p_n:,::[31m10[m[1C].T)[106m [mX[34;17H[K[34;1H[?12l[?25h[?25l[p_n:,::[31m10[m[1C].T)[34;16H[K[34;1H[106m[[10C][?12l[?25h[?25lp[m_n:,::[31m10[m[1C][106m.[mT)[34;15H[K[34;1Hp[10C.[?12l[?25h[?25l_n:,::[31m10[m[1C].T)[34;14H[K[34;1H[?12l[?25h[?25ln:,::[31m10[m[1C].T)[34;13H[K[34;1H[?12l[?25h[?25l:,::[31m10[m[1C].T)[34;12H[K[34;1H[?12l[?25h[?25l,::[31m10[m[1C].T)[34;11H[K[34;1H[?12l[?25h[?25l::[31m10[m[1C].T)[34;10H[K[34;1H[?12l[?25h[?25l:[31m10[m[1C].T)[34;9H[K[34;1H[?12l[?25h[?25l[31m10[m[1C].T)[34;8H[K[34;1H[?12l[?25h[?25l[31m0[m[1C].T)[34;7H[K[34;1H[?12l[?25h[?25l[1C].T)[34;6H[K[34;1H[?12l[?25h[?25l].T)[34;5H[K[34;1H[?12l[?25h[?25l.T)[34;4H[K[34;1H[?12l[?25h[?25lT)[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.xlabel([31m'Time (in ms)'[m)[34;26H[K[34;1H[?12l[?25h[?25lt.xlabel([31m'Time (in ms)'[m)[34;25H[K[34;1H[?12l[?25h[?25l.xlabel([31m'Time (in ms)'[m)[34;24H[K[34;1H[?12l[?25h[?25lxlabel([31m'Time (in ms)'[m)[34;23H[K[34;1H[?12l[?25h[?25llabel([31m'Time (in ms)'[m)[34;22H[K[34;1H[?12l[?25h[?25label([31m'Time (in ms)'[m)[34;21H[K[34;1H[?12l[?25h[?25lbel([31m'Time (in ms)'[m)[34;20H[K[34;1H[?12l[?25h[?25lel([31m'Time (in ms)'[m)[34;19H[K[34;1H[?12l[?25h[?25ll([31m'Time (in ms)'[m)[34;18H[K[34;1H[?12l[?25h[?25l([31m'Time (in ms)'[m)[34;17H[K[34;1H[106m([14C)[?12l[?25h[?25l[m[31m[106m'[m[31mTime (in ms)'[m)[106m [m[31m'[m[34;16H[K[34;1H[?12l[?25h[?25lTime ([38;5;130min[m ms)[31m')[m[34;15H[K[35;1H[31mplt.ylabel([m[1CLN Current Input[1C[31m)
plt.savefig([m[1CLN Current.png[1C[31m)

# Plot Overall Current
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(X[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(X[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAL Input Current.png[1C[31m)

# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[mime ([38;5;130min[m ms)[31m')[m[34;14H[K[34;1H[?12l[?25h[?25lme ([38;5;130min[m ms)[31m')[m[34;13H[K[34;1H[?12l[?25h[?25le ([38;5;130min[m ms)[31m')[m[34;12H[K[34;1H[?12l[?25h[?25l ([38;5;130min[m ms)[31m')[m[34;11H[K[34;1H[?12l[?25h[?25l([38;5;130min[m ms)[31m')[m[34;10H[K[34;1H[106m([5C)[?12l[?25h[?25l[m[38;5;130m[106mi[m[38;5;130mn[m ms)[31m[106m'[m[31m)[m[34;9H[K[34;1H[38;5;130mi[m[5C[31m'[?12l[?25h[?25l[mn ms)[31m')[m[34;8H[K[34;1H[?12l[?25h[?25l ms)[31m')[m[34;7H[K[34;1H[?12l[?25h[?25lms)[31m')[m[34;6H[K[34;1H[?12l[?25h[?25ls)[31m')[m[34;5H[K[34;1H[?12l[?25h[?25l)[31m')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[35;1Hplt.ylabel([1C[31mLN Current Input[m[1C)
plt.savefig([1C[31mLN Current.png[m[1C)

[34m# Plot Overall Current[m
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(X[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(X[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAL Input Current.png[m[1C)

[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.ylabel([31m'LN Current Input'[m)[34;30H[K[34;1H[?12l[?25h[?25lt.ylabel([31m'LN Current Input'[m)[34;29H[K[34;1H[?12l[?25h[?25l.ylabel([31m'LN Current Input'[m)[34;28H[K[34;1H[?12l[?25h[?25lylabel([31m'LN Current Input'[m)[34;27H[K[34;1H[?12l[?25h[?25llabel([31m'LN Current Input'[m)[34;26H[K[34;1H[?12l[?25h[?25label([31m'LN Current Input'[m)[34;25H[K[34;1H[?12l[?25h[?25lbel([31m'LN Current Input'[m)[34;24H[K[34;1H[?12l[?25h[?25lel([31m'LN Current Input'[m)[34;23H[K[34;1H[?12l[?25h[?25ll([31m'LN Current Input'[m)[34;22H[K[34;1H[?12l[?25h[?25l([31m'LN Current Input'[m)[34;21H[K[34;1H[106m([18C)[?12l[?25h[?25l[m[31m[106m'[m[31mLN Current Input'[m)[106m [m[31m'[m[34;20H[K[34;1H[?12l[?25h[?25lLN Current Input[31m')[m[34;19H[K[35;1H[31mplt.savefig([m[1CLN Current.png[1C[31m)

# Plot Overall Current
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(X[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(X[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAL Input Current.png[1C[31m)

# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[mN Current Input[31m')[m[34;18H[K[34;1H[?12l[?25h[?25l Current Input[31m')[m[34;17H[K[34;1H[?12l[?25h[?25lCurrent Input[31m')[m[34;16H[K[34;1H[?12l[?25h[?25lurrent Input[31m')[m[34;15H[K[34;1H[?12l[?25h[?25lrrent Input[31m')[m[34;14H[K[34;1H[?12l[?25h[?25lrent Input[31m')[m[34;13H[K[34;1H[?12l[?25h[?25lent Input[31m')[m[34;12H[K[34;1H[?12l[?25h[?25lnt Input[31m')[m[34;11H[K[34;1H[?12l[?25h[?25lt Input[31m')[m[34;10H[K[34;1H[?12l[?25h[?25l Input[31m')[m[34;9H[K[34;1H[?12l[?25h[?25lInput[31m')[m[34;8H[K[34;1H[?12l[?25h[?25lnput[31m')[m[34;7H[K[34;1H[?12l[?25h[?25lput[31m')[m[34;6H[K[34;1H[?12l[?25h[?25lut[31m')[m[34;5H[K[34;1H[?12l[?25h[?25lt[31m')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[35;1Hplt.savefig([1C[31mLN Current.png[m[1C)

[34m# Plot Overall Current[m
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(X[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(X[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAL Input Current.png[m[1C)

[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.savefig([31m'LN Current.png'[m)[34;29H[K[34;1H[?12l[?25h[?25lt.savefig([31m'LN Current.png'[m)[34;28H[K[34;1H[?12l[?25h[?25l.savefig([31m'LN Current.png'[m)[34;27H[K[34;1H[?12l[?25h[?25lsavefig([31m'LN Current.png'[m)[34;26H[K[34;1H[?12l[?25h[?25lavefig([31m'LN Current.png'[m)[34;25H[K[34;1H[?12l[?25h[?25lvefig([31m'LN Current.png'[m)[34;24H[K[34;1H[?12l[?25h[?25lefig([31m'LN Current.png'[m)[34;23H[K[34;1H[?12l[?25h[?25lfig([31m'LN Current.png'[m)[34;22H[K[34;1H[?12l[?25h[?25lig([31m'LN Current.png'[m)[34;21H[K[34;1H[?12l[?25h[?25lg([31m'LN Current.png'[m)[34;20H[K[34;1H[?12l[?25h[?25l([31m'LN Current.png'[m)[34;19H[K[34;1H[106m([16C)[?12l[?25h[?25l[m[31m[106m'[m[31mLN Current.png'[m)[106m [m[31m'[m[34;18H[K[34;1H[?12l[?25h[?25lLN Current.png[31m')[m[34;17H[K[36;1H[31m# Plot Overall Current
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=1))[::-1],p_n+np.argsort(X[p_n:,:].mean(axis=1))[::-1]))
plt.imshow(X[order,::100], aspect=[m[1Cauto[1C[31m)
plt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAL Input Current.png[1C[31m)

# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[mN Current.png[31m')[m[34;16H[K[34;1H[?12l[?25h[?25l Current.png[31m')[m[34;15H[K[34;1H[?12l[?25h[?25lCurrent.png[31m')[m[34;14H[K[34;1H[?12l[?25h[?25lurrent.png[31m')[m[34;13H[K[34;1H[?12l[?25h[?25lrrent.png[31m')[m[34;12H[K[34;1H[?12l[?25h[?25lrent.png[31m')[m[34;11H[K[34;1H[?12l[?25h[?25lent.png[31m')[m[34;10H[K[34;1H[?12l[?25h[?25lnt.png[31m')[m[34;9H[K[34;1H[?12l[?25h[?25lt.png[31m')[m[34;8H[K[34;1H[?12l[?25h[?25l.png[31m')[m[34;7H[K[34;1H[?12l[?25h[?25lpng[31m')[m[34;6H[K[34;1H[?12l[?25h[?25lng[31m')[m[34;5H[K[34;1H[?12l[?25h[?25lg[31m')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[36;1H[34m# Plot Overall Current[m
plt.figure()
order = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[1C))[::-[1C],p_n+np.argsort(X[p_n:,:].mean(axis=[1C))[::-[1C]))
plt.imshow(X[order,::[3C], aspect=[1C[31mauto[m[1C)
plt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAL Input Current.png[m[1C)

[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25l Plot Overall Current[34;22H[K[34;1H[?12l[?25h[?25lPlot Overall Current[34;21H[K[34;1H[?12l[?25h[?25llot Overall Current[34;20H[K[34;1H[?12l[?25h[?25lot Overall Current[34;19H[K[34;1H[?12l[?25h[?25lt Overall Current[34;18H[K[34;1H[?12l[?25h[?25l Overall Current[34;17H[K[34;1H[?12l[?25h[?25lOverall Current[34;16H[K[34;1H[?12l[?25h[?25lverall Current[34;15H[K[34;1H[?12l[?25h[?25lerall Current[34;14H[K[34;1H[?12l[?25h[?25lrall Current[34;13H[K[34;1H[?12l[?25h[?25l[36mall[m Current[34;12H[K[34;1H[?12l[?25h[?25lll Current[34;11H[K[34;1H[?12l[?25h[?25ll Current[34;10H[K[34;1H[?12l[?25h[?25l Current[34;9H[K[34;1H[?12l[?25h[?25lCurrent[34;8H[K[34;1H[?12l[?25h[?25lurrent[34;7H[K[34;1H[?12l[?25h[?25lrrent[34;6H[K[34;1H[?12l[?25h[?25lrent[34;5H[K[34;1H[?12l[?25h[?25lent[34;4H[K[34;1H[?12l[?25h[?25lnt[34;3H[K[34;1H[?12l[?25h[?25lt[34;2H[K[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.figure()[34;12H[K[34;1H[?12l[?25h[?25lt.figure()[34;11H[K[34;1H[?12l[?25h[?25l.figure()[34;10H[K[34;1H[?12l[?25h[?25lfigure()[34;9H[K[34;1H[?12l[?25h[?25ligure()[34;8H[K[34;1H[?12l[?25h[?25lgure()[34;7H[K[34;1H[?12l[?25h[?25lure()[34;6H[K[34;1H[?12l[?25h[?25lre()[34;5H[K[34;1H[?12l[?25h[?25le()[34;4H[K[34;1H[?12l[?25h[?25l()[34;3H[K[34;1H[106m()[?12l[?25h[?25l) [m)[34;2H[K[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25lrder = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;111H[K[34;1H[?12l[?25h[?25lder = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;110H[K[34;1H[?12l[?25h[?25ler = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;109H[K[34;1H[?12l[?25h[?25lr = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;108H[K[34;1H[?12l[?25h[?25l = np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;107H[K[34;1H[?12l[?25h[?25l= np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;106H[K[34;1H[?12l[?25h[?25l np.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;105H[K[34;1H[?12l[?25h[?25lnp.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;104H[K[34;1H[?12l[?25h[?25lp.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;103H[K[34;1H[?12l[?25h[?25l.concatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;102H[K[34;1H[?12l[?25h[?25lconcatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;101H[K[34;1H[?12l[?25h[?25loncatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;100H[K[34;1H[?12l[?25h[?25lncatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;99H[K[34;1H[?12l[?25h[?25lcatenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;98H[K[34;1H[?12l[?25h[?25latenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;97H[K[34;1H[?12l[?25h[?25ltenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;96H[K[34;1H[?12l[?25h[?25lenate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;95H[K[34;1H[?12l[?25h[?25lnate((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;94H[K[34;1H[?12l[?25h[?25late((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;93H[K[34;1H[?12l[?25h[?25lte((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;92H[K[34;1H[?12l[?25h[?25le((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;91H[K[34;1H[?12l[?25h[?25l((np.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;90H[K[34;1H[106m([87C)[?12l[?25h[?25l[m[1Cnp.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m]))[106m )[m[34;89H[K[34;1H[?12l[?25h[?25l[106mn[mp.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;88H[K[34;1Hn[85C)[?12l[?25h[?25lp.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;87H[K[34;1H[?12l[?25h[?25l.argsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;86H[K[34;1H[?12l[?25h[?25largsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;85H[K[34;1H[?12l[?25h[?25lrgsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;84H[K[34;1H[?12l[?25h[?25lgsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;83H[K[34;1H[?12l[?25h[?25lsort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;82H[K[34;1H[?12l[?25h[?25lort(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;81H[K[34;1H[?12l[?25h[?25lrt(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;80H[K[34;1H[?12l[?25h[?25lt(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;79H[K[34;1H[?12l[?25h[?25l(X[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;78H[K[34;1H[106m([22C)[?12l[?25h[?25lX[m[:p_n,:].mean(axis=[31m1[m))[106m[[m::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;77H[K[34;1HX[22C[[?12l[?25h[?25l[:p_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;76H[K[34;1H[106m[[m:p_n,:[106m][?12l[?25h[?25l:[mp_n,:][106m.[mmean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;75H[K[34;1H:p_n,:].[?12l[?25h[?25lp_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;74H[K[34;1H[?12l[?25h[?25l_n,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;73H[K[34;1H[?12l[?25h[?25ln,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;72H[K[34;1H[?12l[?25h[?25l,:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;71H[K[34;1H[?12l[?25h[?25l:].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;70H[K[34;1H[?12l[?25h[?25l].mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;69H[K[34;1H[?12l[?25h[?25l.mean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;68H[K[34;1H[?12l[?25h[?25lmean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;67H[K[34;1H[?12l[?25h[?25lean(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;66H[K[34;1H[?12l[?25h[?25lan(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;65H[K[34;1H[?12l[?25h[?25ln(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;64H[K[34;1H[?12l[?25h[?25l(axis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;63H[K[34;1H[106m([6C)[?12l[?25h[?25la[mxis=[31m1[m)[1C[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;62H[K[34;1Ha[6C)[?12l[?25h[?25lxis=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;61H[K[34;1H[?12l[?25h[?25l[38;5;130mis[m=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;60H[K[34;1H[?12l[?25h[?25ls=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;59H[K[34;1H[?12l[?25h[?25l=[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;58H[K[34;1H[?12l[?25h[?25l[31m1[m))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;57H[K[34;1H[?12l[?25h[?25l))[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;56H[K[34;1H[?12l[?25h[?25l)[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;55H[K[34;1H[?12l[?25h[?25l[::-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;54H[K[34;1H[106m[[4C][?12l[?25h[?25l:[m:-[31m1[m][106m,[mp_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;53H[K[34;1H:[4C,[?12l[?25h[?25l:-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;52H[K[34;1H[?12l[?25h[?25l-[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;51H[K[34;1H[?12l[?25h[?25l[31m1[m],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;50H[K[34;1H[?12l[?25h[?25l],p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;49H[K[34;1H[?12l[?25h[?25l,p_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;48H[K[34;1H[?12l[?25h[?25lp_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;47H[K[34;1H[?12l[?25h[?25l_n+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;46H[K[34;1H[?12l[?25h[?25ln+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;45H[K[34;1H[?12l[?25h[?25l+np.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;44H[K[34;1H[?12l[?25h[?25lnp.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;43H[K[34;1H[?12l[?25h[?25lp.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;42H[K[34;1H[?12l[?25h[?25l.argsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;41H[K[34;1H[?12l[?25h[?25largsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;40H[K[34;1H[?12l[?25h[?25lrgsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;39H[K[34;1H[?12l[?25h[?25lgsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;38H[K[34;1H[?12l[?25h[?25lsort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;37H[K[34;1H[?12l[?25h[?25lort(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;36H[K[34;1H[?12l[?25h[?25lrt(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;35H[K[34;1H[?12l[?25h[?25lt(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;34H[K[34;1H[?12l[?25h[?25l(X[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;33H[K[34;1H[106m([22C)[?12l[?25h[?25lX[m[p_n:,:].mean(axis=[31m1[m))[106m[[m::-[31m1[m])[34;32H[K[34;1HX[22C[[?12l[?25h[?25l[p_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;31H[K[34;1H[106m[[mp_n:,:[106m][?12l[?25h[?25lp[m_n:,:][106m.[mmean(axis=[31m1[m))[::-[31m1[m])[34;30H[K[34;1Hp_n:,:].[?12l[?25h[?25l_n:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;29H[K[34;1H[?12l[?25h[?25ln:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;28H[K[34;1H[?12l[?25h[?25l:,:].mean(axis=[31m1[m))[::-[31m1[m])[34;27H[K[34;1H[?12l[?25h[?25l,:].mean(axis=[31m1[m))[::-[31m1[m])[34;26H[K[34;1H[?12l[?25h[?25l:].mean(axis=[31m1[m))[::-[31m1[m])[34;25H[K[34;1H[?12l[?25h[?25l].mean(axis=[31m1[m))[::-[31m1[m])[34;24H[K[34;1H[?12l[?25h[?25l.mean(axis=[31m1[m))[::-[31m1[m])[34;23H[K[34;1H[?12l[?25h[?25lmean(axis=[31m1[m))[::-[31m1[m])[34;22H[K[34;1H[?12l[?25h[?25lean(axis=[31m1[m))[::-[31m1[m])[34;21H[K[34;1H[?12l[?25h[?25lan(axis=[31m1[m))[::-[31m1[m])[34;20H[K[34;1H[?12l[?25h[?25ln(axis=[31m1[m))[::-[31m1[m])[34;19H[K[34;1H[?12l[?25h[?25l(axis=[31m1[m))[::-[31m1[m])[34;18H[K[34;1H[106m([6C)[?12l[?25h[?25la[mxis=[31m1[m)[1C[::-[31m1[m])[34;17H[K[34;1Ha[6C)[?12l[?25h[?25lxis=[31m1[m))[::-[31m1[m])[34;16H[K[34;1H[?12l[?25h[?25l[38;5;130mis[m=[31m1[m))[::-[31m1[m])[34;15H[K[34;1H[?12l[?25h[?25ls=[31m1[m))[::-[31m1[m])[34;14H[K[34;1H[?12l[?25h[?25l=[31m1[m))[::-[31m1[m])[34;13H[K[34;1H[?12l[?25h[?25l[31m1[m))[::-[31m1[m])[34;12H[K[34;1H[?12l[?25h[?25l))[::-[31m1[m])[34;11H[K[34;1H[?12l[?25h[?25l)[::-[31m1[m])[34;10H[K[34;1H[?12l[?25h[?25l[::-[31m1[m])[34;9H[K[34;1H[106m[[4C][?12l[?25h[?25l:[m:-[31m1[m][106m)[m[34;8H[K[34;1H:[4C)[?12l[?25h[?25l:-[31m1[m])[34;7H[K[34;1H[?12l[?25h[?25l-[31m1[m])[34;6H[K[34;1H[?12l[?25h[?25l[31m1[m])[34;5H[K[34;1H[?12l[?25h[?25l])[34;4H[K[34;1H[?12l[?25h[?25l)[34;3H[K[34;1H[?12l[?25h[?25l[34;2H[K[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.imshow(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;41H[K[34;1H[?12l[?25h[?25lt.imshow(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;40H[K[34;1H[?12l[?25h[?25l.imshow(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;39H[K[34;1H[?12l[?25h[?25limshow(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;38H[K[34;1H[?12l[?25h[?25lmshow(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;37H[K[34;1H[?12l[?25h[?25lshow(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;36H[K[34;1H[?12l[?25h[?25lhow(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;35H[K[34;1H[?12l[?25h[?25low(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;34H[K[34;1H[?12l[?25h[?25lw(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;33H[K[34;1H[?12l[?25h[?25l(X[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;32H[K[34;1H[106m([29C)[?12l[?25h[?25lX[m[order,::[31m10[m[1C], aspect=[31m'auto'[m)[106m [mX[34;31H[K[34;1H[?12l[?25h[?25l[order,::[31m10[m[1C], aspect=[31m'auto'[m)[34;30H[K[34;1H[106m[[11C][?12l[?25h[?25lo[mrder,::[31m10[m[1C][106m,[m aspect=[31m'auto'[m)[34;29H[K[34;1Ho[11C,[?12l[?25h[?25lrder,::[31m10[m[1C], aspect=[31m'auto'[m)[34;28H[K[34;1H[?12l[?25h[?25lder,::[31m10[m[1C], aspect=[31m'auto'[m)[34;27H[K[34;1H[?12l[?25h[?25ler,::[31m10[m[1C], aspect=[31m'auto'[m)[34;26H[K[34;1H[?12l[?25h[?25lr,::[31m10[m[1C], aspect=[31m'auto'[m)[34;25H[K[34;1H[?12l[?25h[?25l,::[31m10[m[1C], aspect=[31m'auto'[m)[34;24H[K[34;1H[?12l[?25h[?25l::[31m10[m[1C], aspect=[31m'auto'[m)[34;23H[K[34;1H[?12l[?25h[?25l:[31m10[m[1C], aspect=[31m'auto'[m)[34;22H[K[34;1H[?12l[?25h[?25l[31m10[m[1C], aspect=[31m'auto'[m)[34;21H[K[34;1H[?12l[?25h[?25l[31m0[m[1C], aspect=[31m'auto'[m)[34;20H[K[34;1H[?12l[?25h[?25l[1C], aspect=[31m'auto'[m)[34;19H[K[34;1H[?12l[?25h[?25l], aspect=[31m'auto'[m)[34;18H[K[34;1H[?12l[?25h[?25l, aspect=[31m'auto'[m)[34;17H[K[34;1H[?12l[?25h[?25l aspect=[31m'auto'[m)[34;16H[K[34;1H[?12l[?25h[?25laspect=[31m'auto'[m)[34;15H[K[34;1H[?12l[?25h[?25lspect=[31m'auto'[m)[34;14H[K[34;1H[?12l[?25h[?25lpect=[31m'auto'[m)[34;13H[K[34;1H[?12l[?25h[?25lect=[31m'auto'[m)[34;12H[K[34;1H[?12l[?25h[?25lct=[31m'auto'[m)[34;11H[K[34;1H[?12l[?25h[?25lt=[31m'auto'[m)[34;10H[K[34;1H[?12l[?25h[?25l=[31m'auto'[m)[34;9H[K[34;1H[?12l[?25h[?25l[31m'auto'[m)[34;8H[K[34;1H[?12l[?25h[?25lauto[31m')[m[34;7H[K[35;1H[31mplt.colorbar()
plt.xlabel([m[1CTime ([38;5;130min[m ms)[1C[31m)
plt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAL Input Current.png[1C[31m)

# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[muto[31m')[m[34;6H[K[34;1H[?12l[?25h[?25lto[31m')[m[34;5H[K[34;1H[?12l[?25h[?25lo[31m')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[35;1Hplt.colorbar()
plt.xlabel([1C[31mTime (in ms)[m[1C)
plt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAL Input Current.png[m[1C)

[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.colorbar()[34;14H[K[34;1H[?12l[?25h[?25lt.colorbar()[34;13H[K[34;1H[?12l[?25h[?25l.colorbar()[34;12H[K[34;1H[?12l[?25h[?25lcolorbar()[34;11H[K[34;1H[?12l[?25h[?25lolorbar()[34;10H[K[34;1H[?12l[?25h[?25llorbar()[34;9H[K[34;1H[?12l[?25h[?25lorbar()[34;8H[K[34;1H[?12l[?25h[?25lrbar()[34;7H[K[34;1H[?12l[?25h[?25lbar()[34;6H[K[34;1H[?12l[?25h[?25lar()[34;5H[K[34;1H[?12l[?25h[?25lr()[34;4H[K[34;1H[?12l[?25h[?25l()[34;3H[K[34;1H[106m()[?12l[?25h[?25l) [m)[34;2H[K[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.xlabel([31m'Time (in ms)'[m)[34;26H[K[34;1H[?12l[?25h[?25lt.xlabel([31m'Time (in ms)'[m)[34;25H[K[34;1H[?12l[?25h[?25l.xlabel([31m'Time (in ms)'[m)[34;24H[K[34;1H[?12l[?25h[?25lxlabel([31m'Time (in ms)'[m)[34;23H[K[34;1H[?12l[?25h[?25llabel([31m'Time (in ms)'[m)[34;22H[K[34;1H[?12l[?25h[?25label([31m'Time (in ms)'[m)[34;21H[K[34;1H[?12l[?25h[?25lbel([31m'Time (in ms)'[m)[34;20H[K[34;1H[?12l[?25h[?25lel([31m'Time (in ms)'[m)[34;19H[K[34;1H[?12l[?25h[?25ll([31m'Time (in ms)'[m)[34;18H[K[34;1H[?12l[?25h[?25l([31m'Time (in ms)'[m)[34;17H[K[34;1H[106m([14C)[?12l[?25h[?25l[m[31m[106m'[m[31mTime (in ms)'[m)[106m [m[31m'[m[34;16H[K[34;1H[?12l[?25h[?25lTime ([38;5;130min[m ms)[31m')[m[34;15H[K[35;1H[31mplt.ylabel([m[1CNeuron Numbe[2C[31m)
plt.savefig([m[1CAL Input Current.png[1C[31m)

# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[mime ([38;5;130min[m ms)[31m')[m[34;14H[K[34;1H[?12l[?25h[?25lme ([38;5;130min[m ms)[31m')[m[34;13H[K[34;1H[?12l[?25h[?25le ([38;5;130min[m ms)[31m')[m[34;12H[K[34;1H[?12l[?25h[?25l ([38;5;130min[m ms)[31m')[m[34;11H[K[34;1H[?12l[?25h[?25l([38;5;130min[m ms)[31m')[m[34;10H[K[34;1H[106m([5C)[?12l[?25h[?25l[m[38;5;130m[106mi[m[38;5;130mn[m ms)[31m[106m'[m[31m)[m[34;9H[K[34;1H[38;5;130mi[m[5C[31m'[?12l[?25h[?25l[mn ms)[31m')[m[34;8H[K[34;1H[?12l[?25h[?25l ms)[31m')[m[34;7H[K[34;1H[?12l[?25h[?25lms)[31m')[m[34;6H[K[34;1H[?12l[?25h[?25ls)[31m')[m[34;5H[K[34;1H[?12l[?25h[?25l)[31m')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[35;1Hplt.ylabel([1C[31mNeuron Numbe[m[2C)
plt.savefig([1C[31mAL Input Current.png[m[1C)

[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.ylabel([31m'Neuron Number'[m)[34;27H[K[34;1H[?12l[?25h[?25lt.ylabel([31m'Neuron Number'[m)[34;26H[K[34;1H[?12l[?25h[?25l.ylabel([31m'Neuron Number'[m)[34;25H[K[34;1H[?12l[?25h[?25lylabel([31m'Neuron Number'[m)[34;24H[K[34;1H[?12l[?25h[?25llabel([31m'Neuron Number'[m)[34;23H[K[34;1H[?12l[?25h[?25label([31m'Neuron Number'[m)[34;22H[K[34;1H[?12l[?25h[?25lbel([31m'Neuron Number'[m)[34;21H[K[34;1H[?12l[?25h[?25lel([31m'Neuron Number'[m)[34;20H[K[34;1H[?12l[?25h[?25ll([31m'Neuron Number'[m)[34;19H[K[34;1H[?12l[?25h[?25l([31m'Neuron Number'[m)[34;18H[K[34;1H[106m([15C)[?12l[?25h[?25l[m[31m[106m'[m[31mNeuron Number'[m)[106m [m[31m'[m[34;17H[K[34;1H[?12l[?25h[?25lNeuron Numbe[31mr')[m[34;16H[K[35;1H[31mplt.savefig([m[1CAL Input Current.png[1C[31m)

# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[meuron Numbe[31mr')[m[34;15H[K[34;1H[?12l[?25h[?25luron Numbe[31mr')[m[34;14H[K[34;1H[?12l[?25h[?25lron Numbe[31mr')[m[34;13H[K[34;1H[?12l[?25h[?25lon Numbe[31mr')[m[34;12H[K[34;1H[?12l[?25h[?25ln Numbe[31mr')[m[34;11H[K[34;1H[?12l[?25h[?25l Numbe[31mr')[m[34;10H[K[34;1H[?12l[?25h[?25lNumbe[31mr')[m[34;9H[K[34;1H[?12l[?25h[?25lumbe[31mr')[m[34;8H[K[34;1H[?12l[?25h[?25lmbe[31mr')[m[34;7H[K[34;1H[?12l[?25h[?25lbe[31mr')[m[34;6H[K[34;1H[?12l[?25h[?25le[31mr')[m[34;5H[K[34;1H[?12l[?25h[?25l[31mr')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[35;1Hplt.savefig([1C[31mAL Input Current.png[m[1C)

[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[?25llt.savefig([31m'AL Input Current.png'[m)[34;35H[K[34;1H[?12l[?25h[?25lt.savefig([31m'AL Input Current.png'[m)[34;34H[K[34;1H[?12l[?25h[?25l.savefig([31m'AL Input Current.png'[m)[34;33H[K[34;1H[?12l[?25h[?25lsavefig([31m'AL Input Current.png'[m)[34;32H[K[34;1H[?12l[?25h[?25lavefig([31m'AL Input Current.png'[m)[34;31H[K[34;1H[?12l[?25h[?25lvefig([31m'AL Input Current.png'[m)[34;30H[K[34;1H[?12l[?25h[?25lefig([31m'AL Input Current.png'[m)[34;29H[K[34;1H[?12l[?25h[?25lfig([31m'AL Input Current.png'[m)[34;28H[K[34;1H[?12l[?25h[?25lig([31m'AL Input Current.png'[m)[34;27H[K[34;1H[?12l[?25h[?25lg([31m'AL Input Current.png'[m)[34;26H[K[34;1H[?12l[?25h[?25l([31m'AL Input Current.png'[m)[34;25H[K[34;1H[106m([22C)[?12l[?25h[?25l[m[31m[106m'[m[31mAL Input Current.png'[m)[106m [m[31m'[m[34;24H[K[34;1H[?12l[?25h[?25lAL Input Current.png[31m')[m[34;23H[K[36;1H[31m# Save Current Input
np.save([m[1Ccurrent_input[1C[31m,X)

print([m[2CInformation has been transferred to the Antennal Lobe. Thank you [38;5;130mfor[m using our services.[9C[31m)[34;1H[?12l[?25h[?25l[mL Input Current.png[31m')[m[34;22H[K[34;1H[?12l[?25h[?25l Input Current.png[31m')[m[34;21H[K[34;1H[?12l[?25h[?25lInput Current.png[31m')[m[34;20H[K[34;1H[?12l[?25h[?25lnput Current.png[31m')[m[34;19H[K[34;1H[?12l[?25h[?25lput Current.png[31m')[m[34;18H[K[34;1H[?12l[?25h[?25lut Current.png[31m')[m[34;17H[K[34;1H[?12l[?25h[?25lt Current.png[31m')[m[34;16H[K[34;1H[?12l[?25h[?25l Current.png[31m')[m[34;15H[K[34;1H[?12l[?25h[?25lCurrent.png[31m')[m[34;14H[K[34;1H[?12l[?25h[?25lurrent.png[31m')[m[34;13H[K[34;1H[?12l[?25h[?25lrrent.png[31m')[m[34;12H[K[34;1H[?12l[?25h[?25lrent.png[31m')[m[34;11H[K[34;1H[?12l[?25h[?25lent.png[31m')[m[34;10H[K[34;1H[?12l[?25h[?25lnt.png[31m')[m[34;9H[K[34;1H[?12l[?25h[?25lt.png[31m')[m[34;8H[K[34;1H[?12l[?25h[?25l.png[31m')[m[34;7H[K[34;1H[?12l[?25h[?25lpng[31m')[m[34;6H[K[34;1H[?12l[?25h[?25lng[31m')[m[34;5H[K[34;1H[?12l[?25h[?25lg[31m')[m[34;4H[K[34;1H[?12l[?25h[?25l[31m')[m[34;3H[K[34;1H[?12l[?25h[?25l)[34;2H[K[36;1H[34m# Save Current Input[m
np.save([1C[31mcurrent_input[m[1C,X)

[36mprint[m([2C[31mInformation has been transferred to the Antennal Lobe. Thank you for using our services.[m[9C)[34;1H[?12l[?25h[?25l[34;1H[K[34;1H[?12l[?25h[?25l[34;61r[61;1H
[1;62r[61;1H[94m~                                                                                                                                                                                                                                             [m[62;221H[K[62;221H155,1[9CBot[34;1H[?12l[?25h[62;1H[K[34;1H[?25l[62;221H155,0-1[7CBot[34;1H[?12l[?25h[?25l[62;221H[K[62;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h![?25l[?12l[?25h[?25l"receptorLayer.py" 159L, 6442C written
[?1l>[?12l[?25h[?1049l[collins@login3 Param_test]$ vi receptorLayer.py 
[?1049h[?1h=[2;1H‚ñΩ[6n[1;1H  [1;1H[1;62r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[62;1H"receptorLayer.py" 159L, 6442C[>c[1;1Hnp.save([31m'ORN Firing Data'[m,orns[:,::[31m100[m])

init_theta = np.random.uniform(size=orns.shape[[31m0[m])
random_normal = np.random.normal(size=orns.shape)

[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):
    spike = np.zeros(fr.shape)
    theta = init_theta
    [38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[31m1[m]):[10;9Hdtheta = resolution/[31m1000[m*fr[:,i][11;9Htheta = theta + dtheta + [31m0.005[m*random_normal[:,i][12;9Hspike[:,i]= theta>[31m1[m[13;9Htheta = np.where(theta>[31m1[m,np.zeros(theta.shape[[31m0[m]),theta)[14;9H[38;5;130mif[m i%[36mint[m([31m1000[m/resolution)==[31m0[m:[15;13H[36mprint[m([31m'ORN Spiking {}/{} ms Completed'[m.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[31m1[m]*resolution)), end = [31m'[m[35m\r[m[31m'[m)
    [38;5;130mreturn[m spike

orns_spike = spike_generator(orns,[31m0.01[m)
[36mprint[m()

[34m# Generate Antennal Output[m

[36mprint[m([31m"Generating Antennal Input..."[m)

ORN_Output_s = np.matmul(orns_spike.T,locust[[31m'ORN-AL'[m]).T

p_n = [36mint[m([31m0.75[m*locust[[31m'AL_n'[m])

ORN_Output_current = np.zeros(ORN_Output_s.shape)
[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[31m0[m]):
    cfilter = [31m0.5[m*np.ones([31m30[m)
    ORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[31m'same'[m)
    [36mprint[m([31m'{}/{} Acetylcholine Concentration Integration Completed'[m.[36mformat[m(i+[31m1[m,locust[[31m'AL_n'[m]), end = [31m'[m[35m\r[m[31m'[m)
[36mprint[m()

ep=[31m0.01[m
a = [31m10.0[m
b = [31m0.2[m

[38;5;130mdef[m [36mf[m(o,t):
[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m
    do = a*([31m1.0[m-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[31m50[m]*[31m90[m+[[31m700[m]*[31m30[m) - b*o
    [38;5;130mreturn[m do

time = np.arange(ORN_Output_current.shape[[31m1[m])*ep
X = np.zeros(ORN_Output_current.shape)

X[:,[31m0[m]= [31m0[m

[38;5;130mfor[m i [38;5;130min[m [36mrange[m([31m1[m,time.shape[[31m0[m]):
    X[:,i] = X[:,i-[31m1[m] + ep*f(X[:,i-[31m1[m],time[i-[31m1[m])
    [38;5;130mif[m i%[36mint[m([31m100[m/ep) == [31m0[m:[53;9H[36mprint[m([31m'{}s/{}s Acetylcholine Receptor Integration Completed'[m.[36mformat[m(i*ep,time.shape[[31m0[m]*ep), end = [31m'[m[35m\r[m[31m'[m)
[36mprint[m()

[36mprint[m([31m"Generation Complete"[m)

[34m# Save Current Input[m
np.save([31m'current_input'[m,X)

[36mprint[m([31m"'Information has been transferred to the Antennal Lobe. Thank you for using our services.' - ORNs"[m)[62;221H155,0-1[7CBot[57;1H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[62;223H6,1  [58;1H[?12l[?25h[?25l[62;223H7[59;1H[?12l[?25h[?25l[62;223H8,0-1[60;1H[?12l[?25h[?25l[62;223H9,1  [61;1H[?12l[?25h[?25l[62;223H8,0-1[60;1H[?12l[?25h[?25l[62;223H7,1  [59;1H[?12l[?25h[?25l[62;223H6[58;1H[?12l[?25h[?25l[62;223H5,0-1[57;1H[?12l[?25h[?25l[62;223H4,1  [56;1H[?12l[?25h[?25l[62;223H3,0-1[55;1H[?12l[?25h[?25l[62;223H2,1  [54;1H[?12l[?25h[?25l[62;223H1[53;1H[?12l[?25h[?25l[62;223H0[52;1H[?12l[?25h[?25l[62;222H49[51;1H[?12l[?25h[?25l[62;223H8[50;1H[?12l[?25h[?25l[62;223H7,0-1[49;1H[?12l[?25h[?25l[62;223H6,1  [48;1H[?12l[?25h[?25l[62;223H5,0-1[47;1H[?12l[?25h[?25l[62;223H4,1  [46;1H[?12l[?25h[?25l[62;223H3[45;1H[?12l[?25h[?25l[62;223H2,0-1[44;1H[?12l[?25h[?25l[62;223H1,1  [43;1H[?12l[?25h[?25l[62;223H0[42;1H[?12l[?25h[?25l[62;222H39[41;1H[?12l[?25h[?25l[62;223H8[40;1H[?12l[?25h[?25l[62;223H7,0-1[39;1H[?12l[?25h[?25l[62;223H6,1  [38;1H[?12l[?25h[?25l[62;223H5[37;1H[?12l[?25h[?25l[62;223H4[36;1H[?12l[?25h[?25l[62;223H3,0-1[35;1H[?12l[?25h[?25l[62;223H2,1  [34;1H[?12l[?25h[?25l[62;223H1[33;1H[?12l[?25h[?25l[62;223H0[32;1H[?12l[?25h[?25l[62;222H29[31;1H[?12l[?25h[?25l[62;223H8[30;1H[?12l[?25h[?25l[62;223H7[29;1H[?12l[?25h[?25l[62;223H6,0-1[28;1H[?12l[?25h[?25l[62;223H5,1  [27;1H[?12l[?25h[?25l[62;223H4,0-1[26;1H[?12l[?25h[?25l[62;223H3,1  [25;1H[?12l[?25h[?25l[62;223H2,0-1[24;1H[?12l[?25h[?25l[62;223H1,1  [23;1H[?12l[?25h[?25l[62;223H0,0-1[22;1H[?12l[?25h[?25l[62;222H19,1  [21;1H[?12l[?25h[?25l[62;223H8,0-1[20;1H[?12l[?25h[?25l[62;223H7,1  [19;1H[?12l[?25h[?25l[62;223H6[18;1H[?12l[?25h[?25l[62;223H5,0-1[17;1H[?12l[?25h[?25l[62;223H4,1  [16;1H[?12l[?25h[?25l[62;223H3[15;1H[?12l[?25h[?25l[62;223H2[14;1H[?12l[?25h[?25l[62;223H1[13;1H[?12l[?25h[?25l[62;223H0[12;1H[?12l[?25h[?25l[62;222H09[11;1H[?12l[?25h[?25l[62;223H8[10;1H[?12l[?25h[?25l[62;223H7[9;1H[?12l[?25h[?25l[62;223H6[8;1H[?12l[?25h[?25l[62;223H5[7;1H[?12l[?25h[?25l[62;223H4[6;1H[?12l[?25h[?25l[62;223H3,0-1[5;1H[?12l[?25h[?25l[62;223H2,1  [4;1H[?12l[?25h[?25l[62;223H1[3;1H[?12l[?25h[?25l[62;223H0,0-1[2;1H[?12l[?25h[?25l[62;221H99,1   [1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[34m# Save ORN Data[m[62;1H[K[62;221H98,1[10C98%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H97,0-1[8C97%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[36mprint[m([31m"Generation Complete."[m)[62;221H[K[62;221H96,1[10C96%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H95,0-1[8C95%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1Horns = np.array(orns*locust[[31m'ORN_replicates'[m])[62;221H[K[62;221H94,1[10C94%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H93,0-1[8C93%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5H[36mprint[m([31m'{}/{} ORN Types Completed'[m.[36mformat[m(i+[31m1[m,locust[[31m'ORN_types'[m]), end = [31m'[m[35m\r[m[31m'[m)[62;221H[K[62;221H92,1[10C92%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Horns.append(generate_orn(i,protocol[[31m'duration'[m],protocol[[31m'resolution'[m],odor[[31m'odor_vector'[m],protocol[[31m'odor_start'[m],protocol[[31m'odor_start'[m]+protocol[[31m'odor_duration'[m]))[62;221H[K[62;221H91,1[10C91%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[38;5;130mfor[m i [38;5;130min[m [36mrange[m(locust[[31m'ORN_types'[m]): [34m# Generate ORN types[m[62;221H[K[62;221H90,1[10C90%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1Horns = [][62;221H[K[62;221H89,1[10C89%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H88,0-1[8C88%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[36mprint[m([31m"Generating ORN Responses..."[m)[62;221H[K[62;221H87,1[10C87%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H86,0-1[8C86%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[34m# Generate Odor Response[m[62;221H[K[62;221H85,1[10C85%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H84,0-1[8C84%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5H[38;5;130mreturn[m trace[62;221H[K[62;221H83,1[10C83%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H82,1[10C82%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Htrace = trace*locust[[31m'peak_firing'[m] [34m# Scale to Peak Firing Rate[m[62;221H[K[62;221H81,1[10C81%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H80,1[10C80%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Htrace[fallStartIndex:] = fall[62;221H[K[62;221H79,1[10C79%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9HfallStartIndex = adaptationEndIndex[62;221H[K[62;221H78,1[10C78%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hfall = (peak_2-baseline)*np.exp(-fall/t_fall) + baseline[62;221H[K[62;221H77,1[10C77%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hfall = np.arange([31m0[m,(trace.shape[[31m0[m]-adaptationEndIndex)*resolution,resolution)[62;221H[K[62;221H76,1[10C76%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hpeak_2 = adaptation[-[31m1[m][62;221H[K[62;221H75,1[10C75%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Htrace[adaptationStartIndex:adaptationEndIndex] = adaptation[62;221H[K[62;221H74,1[10C74%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9HadaptationEndIndex = adaptationStartIndex+adaptation.shape[[31m0[m][62;221H[K[62;221H73,1[10C73%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9HadaptationStartIndex = riseEndIndex[62;221H[K[62;221H72,1[10C72%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hadaptation = (peak_1-(adaptation_rate*res_strength+baseline))*np.exp(-adaptation/t_adaptation)+(adaptation_rate*res_strength+baseline)[62;221H[K[62;221H71,1[10C71%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hadaptation = np.arange([31m0[m,([36mint[m(odorEnd/resolution)-riseEndIndex)*resolution,resolution)[62;221H[K[62;221H70,1[10C70%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Ht_adaptation = locust[[31m't_adaptation'[m][orn_number] [34m# Odor Adaptation Time[m[62;221H[K[62;221H69,1[10C69%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hadaptation_rate = locust[[31m'adaptation_extent'[m][orn_number] [34m# Amplitude of Adaptation-related Decay[m[62;221H[K[62;221H68,1[10C68%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hpeak_1 = rise[-[31m1[m][62;221H[K[62;221H67,1[10C67%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Htrace[riseStartIndex:riseEndIndex] = rise[62;221H[K[62;221H66,1[10C66%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9HriseEndIndex = [36mint[m((odorStart+latency)/resolution)+rise.shape[[31m0[m][62;221H[K[62;221H65,1[10C65%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9HriseStartIndex = [36mint[m((odorStart+latency)/resolution)[62;221H[K[62;221H64,1[10C64%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hrise = baseline+res_strength*np.exp([31m1[m)/t_rise*rise*np.exp(-rise/t_rise)[62;221H[K[62;221H63,1[10C63%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hrise = np.arange([31m0[m,t_rise,resolution)[62;221H[K[62;221H62,1[10C62%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9H[34m# Generate Broad Trace[m[62;221H[K[62;221H61,1[10C61%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5H[38;5;130melse[m:[62;221H[K[62;221H60,1[10C60%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Htrace[fallStartIndex:] = fall[62;221H[K[62;221H59,1[10C59%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9HfallStartIndex = riseEndIndex[62;221H[K[62;221H58,1[10C58%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hfall = (peak-baseline)*np.exp(-fall/t_fall)+baseline[62;221H[K[62;221H57,1[10C57%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hfall = np.linspace([31m0[m,duration-riseEndIndex*resolution,trace.shape[[31m0[m]-riseEndIndex)[62;221H[K[62;221H56,1[10C56%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hpeak = rise[-[31m1[m][62;221H[K[62;221H55,1[10C55%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Htrace[riseStartIndex:riseEndIndex] = rise[62;221H[K[62;221H54,1[10C54%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9HriseEndIndex = riseStartIndex+rise.shape[[31m0[m][62;221H[K[62;221H53,1[10C53%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9HriseStartIndex = [36mint[m((odorStart+latency)/resolution)[62;221H[K[62;221H52,1[10C52%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hrise = baseline+res_strength*[31m2[m*np.exp([31m1[m)/t_rise*rise*np.exp(-[31m2[m*rise/t_rise)[62;221H[K[62;221H51,1[10C51%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hrise = np.arange([31m0[m,t_rise/[31m2[m,resolution)[62;221H[K[62;221H50,1[10C50%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9H[34m# Generate Sharp Trace[m[62;221H[K[62;221H49,1[10C48%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5H[38;5;130mif[m locust[[31m'f_sharp'[m][orn_number]:[62;221H[K[62;221H48,1[10C47%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H47,1[10C46%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hres_strength = -baseline*np.linalg.norm(odorVec)[62;221H[K[62;221H46,1[10C45%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5H[38;5;130melse[m:[62;221H[K[62;221H45,1[10C44%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9Hres_strength = ([31m1[m-baseline)*tanc(odorMag*np.cos(np.arccos(cosSim)/[31m2[m)**tuning)[62;221H[K[62;221H44,1[10C43%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5H[38;5;130mif[m np.arccos(cosSim) < np.deg2rad([31m121[m):[34m#locust['inh_threshold']):   # Minimum Response Threshhold[m[62;221H[K[62;221H43,1[10C42%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H42,0-1[8C41%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5HcosSim = np.dot(odorVec,rec_field)/(np.linalg.norm(odorVec)*np.linalg.norm(rec_field)) [34m# Cosine Similarity wrt Odor[m[62;221H[K[62;221H41,1[10C40%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5HodorMag = np.linalg.norm(odorVec) [34m# Odor Concentration[m[62;221H[K[62;221H40,1[10C39%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H39,1[10C38%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9H[38;5;130mreturn[m a+b*np.tan(c*x-d)[62;221H[K[62;221H38,1[10C37%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5H[38;5;130mdef[m [36mtanc[m(x, a=[31m0.06083939[m,b=[31m0.16323569[m,c=[31m1.73986923[m,d=[31m0.34085669[m):[62;221H[K[62;221H37,1[10C36%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H36,0-1[8C35%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;9H[38;5;130mreturn[m [31m1[m/([31m1[m+np.exp(-a1*(x-a2)))[62;221H[K[62;221H35,1[10C34%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5H[38;5;130mdef[m [36msigmoid[m(x,a1=locust[[31m'a1'[m],a2=locust[[31m'a2'[m]):     [34m# Sigmoid for Response[m[62;221H[K[62;221H34,1[10C33%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H33,1[10C32%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Htuning = locust[[31m'tuning'[m][orn_number]/[31m2[m [34m# Odor Tuning-width / Sensitivity[m[62;221H[K[62;221H32,1[10C31%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Ht_fall = locust[[31m't_fall'[m][orn_number] [34m# Response Decay Time[m[62;221H[K[62;221H31,1[10C30%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Ht_rise = locust[[31m't_rise'[m][orn_number] [34m# Time to Rise to Peak[m[62;221H[K[62;221H30,1[10C29%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Hlatency = locust[[31m'latency'[m][orn_number] [34m# Latency of Response to Odor Presentation[m[62;221H[K[62;221H29,1[10C28%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H28,1[10C27%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Hrec_field = pt.generateUniform([31m1[m,odor[[31m'dim_odorspace'[m],seed=[36mint[m(locust[[31m'rec_seeds'[m][orn_number])) [34m# Receptive Field of ORNs in Odor Space[m[62;221H[K[62;221H27,1[10C26%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Htrace = baseline*np.ones([36mint[m(duration/resolution)) [34m# Set Baseline activity for the Protocol Duration[m[62;221H[K[62;221H26,1[10C25%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Hbaseline = np.clip(locust[[31m'baseline_firing'[m]+locust[[31m'baseline_firing_variation'[m]*np.random.normal(),[31m1[m,[36mNone[m)/locust[[31m'peak_firing'[m] [34m# Baseline Firing Rate Ratio[m[62;221H[K[62;221H25,1[10C24%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H24,1[10C23%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[38;5;130mdef[m [36mgenerate_orn[m(orn_number,duration,resolution,odorVec,odorStart,odorEnd): [34m# Function to generate single ORN Trace[m[62;221H[K[62;221H23,1[10C22%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[34m# Define ORN Response Generator[m[62;221H[K[62;221H22,1[10C21%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H21,0-1[8C20%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Hlocust = pickle.load(fp)[62;221H[K[62;221H20,1[10C19%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[38;5;130mwith[m [36mopen[m(locust_path, [31m'rb'[m) [38;5;130mas[m fp:[62;221H[K[62;221H19,1[10C18%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Hprotocol = pickle.load(fp)[62;221H[K[62;221H18,1[10C17%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[38;5;130mwith[m [36mopen[m(protocol_path, [31m'rb'[m) [38;5;130mas[m fp:[62;221H[K[62;221H17,1[10C16%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;5Hodor = pickle.load(fp)[62;221H[K[62;221H16,1[10C15%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[38;5;130mwith[m [36mopen[m(odor_path, [31m'rb'[m) [38;5;130mas[m fp:[62;221H[K[62;221H15,1[10C14%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[34m# Load the Odorant, Odor Delivery Protocol, Locust Model[m[62;221H[K[62;221H14,1[10C13%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H13,0-1[8C12%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1Hlocust_path = sys.argv[[31m3[m][62;221H[K[62;221H12,1[10C11%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1Hprotocol_path = sys.argv[[31m2[m][62;221H[K[62;221H11,1[10C10%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1Hodor_path = sys.argv[[31m1[m][62;221H[K[62;221H10,1[11C9%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[34m# Select the Odorant, Odor Delivery Protocol, Locust Model[m[62;221H[K[62;221H9,1[12C8%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H8,0-1[10C7%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[36mprint[m([31m"Welcome to the ORNs !!!"[m)[62;221H[K[62;221H7,1[12C6%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[62;221H[K[62;221H6,0-1[10C5%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[35mimport[m sys[62;221H[K[62;221H5,1[12C4%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[35mimport[m pickle[62;221H[K[62;221H4,1[12C3%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[35mimport[m polarTools [38;5;130mas[m pt[62;221H[K[62;221H3,1[12C2%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[35mimport[m matplotlib.pyplot [38;5;130mas[m plt[62;221H[K[62;221H2,1[12C1%[1;1H[?12l[?25h[?25l[1;61r[1;1H[L[1;62r[1;1H[35mimport[m numpy [38;5;130mas[m np[62;221H[K[62;221H1,1[11CTop[1;1H[?12l[?25h[?25l[62;221H2[2;1H[?12l[?25h[?25l[62;221H3[3;1H[?12l[?25h[?25l[62;221H4[4;1H[?12l[?25h[?25l[62;221H5[5;1H[?12l[?25h[?25l[62;221H6,0-1[6;1H[?12l[?25h[?25l[62;221H7,1  [7;1H[?12l[?25h[?25l[62;221H8,0-1[8;1H[?12l[?25h[?25l[62;221H9,1  [9;1H[?12l[?25h[?25l[62;221H10,1[10;1H[?12l[?25h[?25l[62;222H1[11;1H[?12l[?25h[?25l[62;222H2[12;1H[?12l[?25h[?25l[62;222H3,0-1[13;1H[?12l[?25h[?25l[62;222H4,1  [14;1H[?12l[?25h[?25l[62;222H5[15;1H[?12l[?25h[?25l[62;222H6[16;1H[?12l[?25h[?25l[62;222H7[17;1H[?12l[?25h[?25l[62;222H8[18;1H[?12l[?25h[?25l[62;222H9[19;1H[?12l[?25h[?25l[62;221H20[20;1H[?12l[?25h[?25l[62;222H1,0-1[21;1H[?12l[?25h[?25l[62;222H2,1  [22;1H[?12l[?25h[?25l[62;222H3[23;1H[?12l[?25h[?25l[62;222H4[24;1H[?12l[?25h[?25l[62;222H5[25;1H[?12l[?25h[?25l[62;222H6[26;1H[?12l[?25h[?25l[62;222H7[27;1H[?12l[?25h[?25l[62;222H8[28;1H[?12l[?25h[?25l[62;222H9[29;1H[?12l[?25h[?25l[62;221H30[30;1H[?12l[?25h[?25l[62;222H1[31;1H[?12l[?25h[?25l[62;222H2[32;1H[?12l[?25h[?25l[62;222H3[33;1H[?12l[?25h[?25l[62;222H4[34;1H[?12l[?25h[?25l[62;222H5[35;1H[?12l[?25h[?25l[62;222H6,0-1[36;1H[?12l[?25h[?25l[62;222H7,1  [37;1H[?12l[?25h[?25l[62;222H8[38;1H[?12l[?25h[?25l[62;222H9[39;1H[?12l[?25h[?25l[62;221H40[40;1H[?12l[?25h[?25l[62;222H1[41;1H[?12l[?25h[?25l[62;222H2,0-1[42;1H[?12l[?25h[?25l[62;222H3,1  [43;1H[?12l[?25h[?25l[62;222H4[44;1H[?12l[?25h[?25l[62;222H5[45;1H[?12l[?25h[?25l[62;222H6[46;1H[?12l[?25h[?25l[62;222H7[47;1H[?12l[?25h[?25l[62;222H8[48;1H[?12l[?25h[?25l[62;222H9[49;1H[?12l[?25h[?25l[62;221H50[50;1H[?12l[?25h[?25l[62;222H1[51;1H[?12l[?25h[?25l[62;222H2[52;1H[?12l[?25h[?25l[62;222H3[53;1H[?12l[?25h[?25l[62;222H4[54;1H[?12l[?25h[?25l[62;222H5[55;1H[?12l[?25h[?25l[62;222H6[56;1H[?12l[?25h[?25l[62;222H7[57;1H[?12l[?25h[?25l[62;222H8[58;1H[?12l[?25h[?25l[62;222H9[59;1H[?12l[?25h[?25l[62;221H60[60;1H[?12l[?25h[?25l[62;222H1[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hrise = np.arange([31m0[m,t_rise,resolution)[62;221H[K[62;221H62,1[11C1%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hrise = baseline+res_strength*np.exp([31m1[m)/t_rise*rise*np.exp(-rise/t_rise)[62;221H[K[62;221H63,1[11C2%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HriseStartIndex = [36mint[m((odorStart+latency)/resolution)[62;221H[K[62;221H64,1[11C3%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HriseEndIndex = [36mint[m((odorStart+latency)/resolution)+rise.shape[[31m0[m][62;221H[K[62;221H65,1[11C4%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htrace[riseStartIndex:riseEndIndex] = rise[62;221H[K[62;221H66,1[11C5%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hpeak_1 = rise[-[31m1[m][62;221H[K[62;221H67,1[11C6%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hadaptation_rate = locust[[31m'adaptation_extent'[m][orn_number] [34m# Amplitude of Adaptation-related Decay[m[62;221H[K[62;221H68,1[11C7%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Ht_adaptation = locust[[31m't_adaptation'[m][orn_number] [34m# Odor Adaptation Time[m[62;221H[K[62;221H69,1[11C8%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hadaptation = np.arange([31m0[m,([36mint[m(odorEnd/resolution)-riseEndIndex)*resolution,resolution)[62;221H[K[62;221H70,1[11C9%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hadaptation = (peak_1-(adaptation_rate*res_strength+baseline))*np.exp(-adaptation/t_adaptation)+(adaptation_rate*res_strength+baseline)[62;221H[K[62;221H71,1[10C10%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HadaptationStartIndex = riseEndIndex[62;221H[K[62;221H72,1[10C11%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HadaptationEndIndex = adaptationStartIndex+adaptation.shape[[31m0[m][62;221H[K[62;221H73,1[10C12%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htrace[adaptationStartIndex:adaptationEndIndex] = adaptation[62;221H[K[62;221H74,1[10C13%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hpeak_2 = adaptation[-[31m1[m][62;221H[K[62;221H75,1[10C14%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hfall = np.arange([31m0[m,(trace.shape[[31m0[m]-adaptationEndIndex)*resolution,resolution)[62;221H[K[62;221H76,1[10C15%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hfall = (peak_2-baseline)*np.exp(-fall/t_fall) + baseline[62;221H[K[62;221H77,1[10C16%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9HfallStartIndex = adaptationEndIndex[62;221H[K[62;221H78,1[10C17%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htrace[fallStartIndex:] = fall[62;221H[K[62;221H79,1[10C18%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H80,1[10C19%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Htrace = trace*locust[[31m'peak_firing'[m] [34m# Scale to Peak Firing Rate[m[62;221H[K[62;221H81,1[10C20%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H82,1[10C21%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[38;5;130mreturn[m trace[62;221H[K[62;221H83,1[10C22%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H84,0-1[8C23%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Generate Odor Response[m[62;221H[K[62;221H85,1[10C24%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H86,0-1[8C25%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"Generating ORN Responses..."[m)[62;221H[K[62;221H87,1[10C26%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H88,0-1[8C27%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Horns = [][62;221H[K[62;221H89,1[10C28%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[38;5;130mfor[m i [38;5;130min[m [36mrange[m(locust[[31m'ORN_types'[m]): [34m# Generate ORN types[m[62;221H[K[62;221H90,1[10C29%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Horns.append(generate_orn(i,protocol[[31m'duration'[m],protocol[[31m'resolution'[m],odor[[31m'odor_vector'[m],protocol[[31m'odor_start'[m],protocol[[31m'odor_start'[m]+protocol[[31m'odor_duration'[m]))[62;221H[K[62;221H91,1[10C30%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[36mprint[m([31m'{}/{} ORN Types Completed'[m.[36mformat[m(i+[31m1[m,locust[[31m'ORN_types'[m]), end = [31m'[m[35m\r[m[31m'[m)[62;221H[K[62;221H92,1[10C31%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H93,0-1[8C32%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Horns = np.array(orns*locust[[31m'ORN_replicates'[m])[62;221H[K[62;221H94,1[10C33%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H95,0-1[8C34%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"Generation Complete."[m)[62;221H[K[62;221H96,1[10C35%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H97,0-1[8C36%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Save ORN Data[m[62;221H[K[62;221H98,1[10C37%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hnp.save([31m'ORN Firing Data'[m,orns[:,::[31m100[m])[62;221H[K[62;221H99,1[10C38%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H100,0-1[7C39%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hinit_theta = np.random.uniform(size=orns.shape[[31m0[m])[62;221H[K[62;221H101,1[9C40%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hrandom_normal = np.random.normal(size=orns.shape)[62;221H[K[62;221H102,1[9C41%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H103,0-1[7C42%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[38;5;130mdef[m [36mspike_generator[m(fr,resolution,init_theta=init_theta,random_normal=random_normal):[62;221H[K[62;221H104,1[9C43%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Hspike = np.zeros(fr.shape)[62;221H[K[62;221H105,1[9C44%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Htheta = init_theta[62;221H[K[62;221H106,1[9C45%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[38;5;130mfor[m i [38;5;130min[m [36mrange[m(fr.shape[[31m1[m]):[62;221H[K[62;221H107,1[9C46%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hdtheta = resolution/[31m1000[m*fr[:,i][62;221H[K[62;221H108,1[9C47%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htheta = theta + dtheta + [31m0.005[m*random_normal[:,i][62;221H[K[62;221H109,1[9C48%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Hspike[:,i]= theta>[31m1[m[62;221H[K[62;221H110,1[9C50%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9Htheta = np.where(theta>[31m1[m,np.zeros(theta.shape[[31m0[m]),theta)[62;221H[K[62;221H111,1[9C51%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9H[38;5;130mif[m i%[36mint[m([31m1000[m/resolution)==[31m0[m:[62;221H[K[62;221H112,1[9C52%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;13H[36mprint[m([31m'ORN Spiking {}/{} ms Completed'[m.[36mformat[m([36mint[m(i*resolution),[36mint[m(fr.shape[[31m1[m]*resolution)), end = [31m'[m[35m\r[m[31m'[m)[62;221H[K[62;221H113,1[9C53%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[38;5;130mreturn[m spike[62;221H[K[62;221H114,1[9C54%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H115,0-1[7C55%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Horns_spike = spike_generator(orns,[31m0.01[m)[62;221H[K[62;221H116,1[9C56%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m()[62;221H[K[62;221H117,1[9C57%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H118,0-1[7C58%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Generate Antennal Output[m[62;221H[K[62;221H119,1[9C59%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H120,0-1[7C60%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"Generating Antennal Input..."[m)[62;221H[K[62;221H121,1[9C61%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H122,0-1[7C62%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1HORN_Output_s = np.matmul(orns_spike.T,locust[[31m'ORN-AL'[m]).T[62;221H[K[62;221H123,1[9C63%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H124,0-1[7C64%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hp_n = [36mint[m([31m0.75[m*locust[[31m'AL_n'[m])[62;221H[K[62;221H125,1[9C65%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H126,0-1[7C66%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1HORN_Output_current = np.zeros(ORN_Output_s.shape)[62;221H[K[62;221H127,1[9C67%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[38;5;130mfor[m i [38;5;130min[m [36mrange[m(ORN_Output_s.shape[[31m0[m]):[62;221H[K[62;221H128,1[9C68%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Hcfilter = [31m0.5[m*np.ones([31m30[m)[62;221H[K[62;221H129,1[9C69%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5HORN_Output_current[i,:] = np.convolve(ORN_Output_s[i,:], cfilter,[31m'same'[m)[62;221H[K[62;221H130,1[9C70%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[36mprint[m([31m'{}/{} Acetylcholine Concentration Integration Completed'[m.[36mformat[m(i+[31m1[m,locust[[31m'AL_n'[m]), end = [31m'[m[35m\r[m[31m'[m)[62;221H[K[62;221H131,1[9C71%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m()[62;221H[K[62;221H132,1[9C72%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H133,0-1[7C73%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hep=[31m0.01[m[62;221H[K[62;221H134,1[9C74%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Ha = [31m10.0[m[62;221H[K[62;221H135,1[9C75%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hb = [31m0.2[m[62;221H[K[62;221H136,1[9C76%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H137,0-1[7C77%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[38;5;130mdef[m [36mf[m(o,t):[62;221H[K[62;221H138,1[9C78%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m#    do = a*(1.0-o)*ORN_Output_current[:,int(t/ep)]/np.array([50]*90+[700]*30) - b*o[m[62;221H[K[62;221H139,1[9C79%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Hdo = a*([31m1.0[m-o)*ORN_Output_current[:,[36mint[m(t/ep)]/np.array([[31m50[m]*[31m90[m+[[31m700[m]*[31m30[m) - b*o[62;221H[K[62;221H140,1[9C80%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[38;5;130mreturn[m do[62;221H[K[62;221H141,1[9C81%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H142,0-1[7C82%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Htime = np.arange(ORN_Output_current.shape[[31m1[m])*ep[62;221H[K[62;221H143,1[9C83%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1HX = np.zeros(ORN_Output_current.shape)[62;221H[K[62;221H144,1[9C84%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H145,0-1[7C85%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1HX[:,[31m0[m]= [31m0[m[62;221H[K[62;221H146,1[9C86%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H147,0-1[7C87%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[38;5;130mfor[m i [38;5;130min[m [36mrange[m([31m1[m,time.shape[[31m0[m]):[62;221H[K[62;221H148,1[9C88%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5HX[:,i] = X[:,i-[31m1[m] + ep*f(X[:,i-[31m1[m],time[i-[31m1[m])[62;221H[K[62;221H149,1[9C89%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5H[38;5;130mif[m i%[36mint[m([31m100[m/ep) == [31m0[m:[62;221H[K[62;221H150,1[9C90%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;9H[36mprint[m([31m'{}s/{}s Acetylcholine Receptor Integration Completed'[m.[36mformat[m(i*ep,time.shape[[31m0[m]*ep), end = [31m'[m[35m\r[m[31m'[m)[62;221H[K[62;221H151,1[9C91%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m()[62;221H[K[62;221H152,1[9C92%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H153,0-1[7C93%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"Generation Complete"[m)[62;221H[K[62;221H154,1[9C94%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H155,0-1[7C95%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Save Current Input[m[62;221H[K[62;221H156,1[9C96%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hnp.save([31m'current_input'[m,X)[62;221H[K[62;221H157,1[9C97%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H158,0-1[7C98%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"'Information has been transferred to the Antennal Lobe. Thank you for using our services.' - ORNs"[m)[62;221H[K[62;221H159,1[9CBot[61;1H[?12l[?25h[?25l[62;223H5,0-1[57;1H[?12l[?25h[?25l[62;221H[K[62;1H:[?12l[?25hq[?25l[?12l[?25h[?25l[62;1H[K[62;1H[?1l>[?12l[?25h[?1049l[collins@login3 Param_test]$ vi receptorLayer.py ls[Krm *.pngnpyls[Kpython initExperiment.py '/home/collins/Param_test/Od/OdorA_High.odor' '/home/collins/Param_test/Op/Dur_6000_OdorDur_1000.protocol' '/home/collins/Param_test/Lc/Locust_A.locust' '1' $(date +‚Äù%b%d%Y_%H%M‚Äù)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K'/home/collins/Param_test/Od/OdorA_High.odor' '/home/collins/Param_test/Op/Dur_6000_OdorDur_1000.protocol' '/home/collins/Param_test/Lc/Locust_A.locust' '1' $(date +‚Äù%b%d%Y_%H%M‚Äù)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[3Pmodule load python/3.7python initExperiment.py [12Pvi script.sh[C[12@python initExperiment.py[C[1P[1P[1P[1P[1P[1P[1@p[1P[1@v[1@i
[?1049h[?1h=[2;1H‚ñΩ[6n[1;1H  [1;1H[1;62r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[62;1H"initExperiment.py" 71L, 2460C[>c[1;1H[35mfrom[m subprocess [35mimport[m call
[35mimport[m numpy [38;5;130mas[m np
[35mimport[m pickle
[35mimport[m time [38;5;130mas[m t
[35mimport[m datetime
[35mimport[m os
[35mfrom[m shutil [35mimport[m copyfile,copy,move
[35mimport[m sys

[34m# Select the Odorant, Odor Delivery Protocol, Locust Model[m
odor_path = sys.argv[[31m1[m][34m# easygui.fileopenbox(msg='Open Odor File',title='Odor Browser',default='/home/iiser/Collins-Saptarshi 2019b/DAMN/A. Odors/*.odor',filetypes=['*.odor'])[m
protocol_path = sys.argv[[31m2[m][34m# easygui.fileopenbox(msg='Open Protocol File',title='Odor Protocol Browser',default='/home/iiser/Collins-Saptarshi 2019b/DAMN/A. Odor Protocols/*.protocol',filetypes=['*.protocol'])[m
locust_path = sys.argv[[31m3[m][34m# easygui.fileopenbox(msg='Open Locust File',title='Locust Browser',default='/home/iiser/Collins-Saptarshi 2019b/DAMN/A. Locusts/*.locust',filetypes=['*.locust'])

# Get Experiment Date metadata[m
dt = datetime.datetime.now()

[34m# Generate Metadata File[m
meta_file = np.array([odor_path,protocol_path,locust_path])

[36mprint[m([31m"Metadata Acquired. Starting Simulation."[m)

[34m# Start Timer[m
start = t.time()

[34m# Start Receptor Layer Processing[m
call([[31m'python'[m, [31m'receptorLayer.py'[m, odor_path, protocol_path, locust_path])

[34m# Load Protocol data[m
[38;5;130mwith[m [36mopen[m(protocol_path, [31m'rb'[m) [38;5;130mas[m fp:
    data = pickle.load(fp)

[34m# Generate Batch-time for AL Simulation[m
time = np.split(np.arange([31m0[m,data[[31m'duration'[m],data[[31m'resolution'[m]),data[[31m'n_split'[m])
[38;5;130mfor[m n,i [38;5;130min[m [36menumerate[m(time):
    [38;5;130mif[m n>[31m0[m:[37;9Htime[n] = np.append(i[[31m0[m]-[31m0.01[m,i)
np.save([31m"time"[m,time)

[34m# Start Antennal Lobe Processing[m

[36mprint[m([31m"Welcome to the AL !!!"[m)

[38;5;130mfor[m i [38;5;130min[m [36mrange[m(data[[31m'n_split'[m]):
    call([[31m'python'[m,[31m'antennalLobe.py'[m,[36mstr[m(i), locust_path, protocol_path, sys.argv[[31m5[m]])

os.remove([31m'state_vector.npy'[m)
os.remove([31m'time.npy'[m)

[36mprint[m([31m"Simulation Completed. Time taken: {:0.2f}"[m.[36mformat[m(t.time()-start))

[36mprint[m([31m"'Thank you for using our services.'-AL"[m)

filename = odor_path.split([31m'/'[m)[-[31m1[m].split([31m'.'[m)[[31m0[m]+[31m"_"[m+protocol_path.split([31m'/'[m)[-[31m1[m].split([31m'.'[m)[[31m0[m]+[31m"_"[m+locust_path.split([31m'/'[m)[-[31m1[m].split([31m'.'[m)[[31m0[m]+[31m"_"[m+sys.argv[[31m4[m]

[34m# Generate Experiment Directory [m
folder = [31m"/home/collins/Simulation_Data/E_I_"[m+sys.argv[[31m5[m]+[31m"/"[m+filename
[38;5;130mif[m [38;5;130mnot[m os.path.exists(folder):
    os.makedirs(folder)

[34m# Move Data to Experiment Directory[m[62;221H60,0-1[8CTop[60;1H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[62;222H1,1  [61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[38;5;130mfor[m f [38;5;130min[m [36mfilter[m([38;5;130mlambda[m v: ([31m".pkl"[m [38;5;130min[m v) [38;5;130mor[m ([31m".npy"[m [38;5;130min[m v) [38;5;130mor[m ([31m".png"[m [38;5;130min[m v),os.listdir()):[62;1H[K[62;221H62,1[10C10%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Hmove(os.getcwd()+[31m"/"[m+f, folder+[31m'/'[m+f)[62;221H[K[62;221H63,1[10C20%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H64,0-1[8C30%[61;1H[?12l[?25h[?25l[62;222H3,1  [60;1H[?12l[?25h[?25l[62;222H2[59;1H[?12l[?25h[?25l[62;222H1[58;1H[?12l[?25h[?25l[62;222H0,0-1[57;1H[?12l[?25h[?25l[62;221H59,1  [56;1H[?12l[?25h[?25l[62;222H8[55;1H[?12l[?25h[?25l[62;222H7[54;1H[?12l[?25h[?25l[62;222H6[53;1H[?12l[?25h[?25l[62;222H5,0-1[52;1H[?12l[?25h[?25l[62;222H4,1  [51;1H[?12l[?25h[?25l[62;222H3,0-1[50;1H[?12l[?25h[?25l[62;222H2,1  [49;1H[?12l[?25h[?25l[62;222H1,0-1[48;1H[?12l[?25h[?25l[62;222H0,1  [47;1H[?12l[?25h[?25l[62;221H49,0-1[46;1H[?12l[?25h[?25l[62;222H8,1  [45;1H[?12l[?25h[?25l[62;222H7[44;1H[?12l[?25h[?25l[62;222H6,0-1[43;1H[?12l[?25h[?25l[62;222H5,1  [42;1H[?12l[?25h[?25l[62;222H4[41;1H[?12l[?25h[?25l[62;222H3,0-1[40;1H[?12l[?25h[?25l[62;222H2,1  [39;1H[?12l[?25h[?25l[62;222H1,0-1[38;1H[?12l[?25h[?25l[62;222H0,1  [37;1H[?12l[?25h[?25l[62;221H39,0-1[36;1H[?12l[?25h[?25l[62;222H8,1  [35;1H[?12l[?25h[?25l[62;222H7[34;1H[?12l[?25h[?25l[62;222H6[33;1H[?12l[?25h[?25l[62;222H5[32;1H[?12l[?25h[?25l[62;222H4[31;1H[?12l[?25h[?25l[62;222H3[30;1H[?12l[?25h[?25l[62;222H2,0-1[29;1H[?12l[?25h[?25l[62;222H1,1  [28;1H[?12l[?25h[?25l[62;222H0[27;1H[?12l[?25h[?25l[62;221H29[26;1H[?12l[?25h[?25l[62;222H8,0-1[25;1H[?12l[?25h[?25l[62;222H7,1  [24;1H[?12l[?25h[?25l[62;222H6[23;1H[?12l[?25h[?25l[62;222H5,0-1[22;1H[?12l[?25h[?25l[62;222H4,1  [21;1H[?12l[?25h[?25l[62;222H3[20;1H[?12l[?25h[?25l[62;222H2,0-1[19;1H[?12l[?25h[?25l[62;222H1,1  [18;1H[?12l[?25h[?25l[62;222H0,0-1[17;1H[?12l[?25h[?25l[62;221H19,1  [16;1H[?12l[?25h[?25l[62;222H8[15;1H[?12l[?25h[?25l[62;222H7,0-1[14;1H[?12l[?25h[?25l[62;222H6,1  [13;1H[?12l[?25h[?25l[62;222H5[12;1H[?12l[?25h[?25l[62;222H4,0-1[11;1H[?12l[?25h[?25l[62;222H5,1  [12;1H[?12l[?25h[?25l[62;222H4,0-1[11;1H[?12l[?25h[?25l[62;222H5,1  [12;1H[?12l[?25h[?25l[62;222H6[13;1H[?12l[?25h[?25l[62;222H5[12;1H[?12l[?25h[?25l[62;222H6[13;1H[?12l[?25h[?25l[62;222H5[12;1H[?12l[?25h[?25l[62;222H4,0-1[11;1H[?12l[?25h[?25l[62;1H[1m-- INSERT --[m[62;221H[K[62;221H14,1[10C30%[11;1H[?12l[?25h[?25l[12;61r[12;1H[L[1;62r[62;221H[K[62;221H15,1[10C27%[12;1H[?12l[?25h[?25l[62;222H4[11;1H[?12l[?25h[?25l[12;61r[12;1H[L[1;62r[62;221H[K[62;221H15,1[10C25%[12;1H[?12l[?25h[?25lp[62;224H2[12;2H[?12l[?25h[?25lr[62;224H3[12;3H[?12l[?25h[?25li[62;224H4[12;4H[?12l[?25h[?25ln[62;224H5[12;5H[?12l[?25h[?25l[36mprint[m[62;224H6[12;6H[?12l[?25h[?25l([62;221H[K[62;221H15,7[10C25%[12;7H[?12l[?25h[?25l)[106m()[m[62;221H[K[62;221H15,8[10C25%[12;8H[?12l[?25h[?25l[62;224H7[12;7H[?12l[?25h[?25l[106ms[m)s[106m)[m[62;224H8[12;8H[?12l[?25h[?25l[106my[m)y[106m)[m[62;224H9[12;9H[?12l[?25h[?25l[106ms[m)s[106m)[m[62;224H10[12;10H[?12l[?25h[?25l[106m.[m).[106m)[m[62;225H1[12;11H[?12l[?25h[?25l[106ma[m)a[106m)[m[62;225H2[12;12H[?12l[?25h[?25l[106mr[m)r[106m)[m[62;225H3[12;13H[?12l[?25h[?25l[106mg[m)g[106m)[m[62;225H4[12;14H[?12l[?25h[?25l[106mv[m)v[106m)[m[62;225H5[12;15H[?12l[?25h[?25l[106m[[m)[[106m)[m[62;225H6[12;16H[?12l[?25h[?25l[106m][m)][106m)[m[62;225H7[12;17H[?12l[?25h[?25l[12;6H([8C[106m[][m)[62;225H6[12;16H[?12l[?25h[?25l[31m[106m5[m])[31m5[m[106m][m[62;225H7[12;17H[?12l[?25h[?25l[[1C][62;222H6,1 [13;1H[?12l[?25h[?25l[62;222H7,17[14;17H[?12l[?25h[?25l[62;222H8[15;17H[?12l[?25h[?25l[62;222H9,1 [16;1H[?12l[?25h[?25l[62;221H20,17[17;17H[?12l[?25h[?25l[62;222H1[18;17H[?12l[?25h[?25l[62;222H2,1 [19;1H[?12l[?25h[?25l[62;222H3,17[20;17H[?12l[?25h[?25l[62;222H4,1 [21;1H[?12l[?25h[?25l[62;222H5,14[22;14H[?12l[?25h[?25l[23;15H[106m()[m[62;221H[K[62;221H26,17[9C25%[23;17H[?12l[?25h[?25l()[62;222H7,1 [24;1H[?12l[?25h[?25l[62;222H8,17[25;17H[?12l[?25h[?25l[62;222H9[26;17H[?12l[?25h[?25l[62;221H30,1 [27;1H[?12l[?25h[?25l[62;222H1,17[28;17H[?12l[?25h[?25l[62;222H2[29;17H[?12l[?25h[?25l[62;222H3[30;17H[?12l[?25h[?25l[62;222H4,1 [31;1H[?12l[?25h[?25l[62;222H5,17[32;17H[?12l[?25h[?25l[33;16H[106m([64C)[m[62;221H[K[62;221H36,17[9C25%[33;17H[?12l[?25h[?25l([64C)[62;222H7[34;17H[?12l[?25h[?25l[62;222H8,12[35;12H[?12l[?25h[?25l[62;222H9,17[36;17H[?12l[?25h[?25l[62;221H40[37;17H[?12l[?25h[?25l[62;222H1,1 [38;1H[?12l[?25h[?25l[62;222H2,17[39;17H[?12l[?25h[?25l[62;222H3,1 [40;1H[?12l[?25h[?25l[62;222H4,17[41;17H[?12l[?25h[?25l[62;222H5,1 [42;1H[?12l[?25h[?25l[62;222H6,17[43;17H[?12l[?25h[?25l[62;222H7[44;17H[?12l[?25h[?25l[62;222H8,1 [45;1H[?12l[?25h[?25l[62;222H9,17[46;17H[?12l[?25h[?25l[62;221H50[47;17H[?12l[?25h[?25l[62;222H1,1 [48;1H[?12l[?25h[?25l[62;222H2,17[49;17H[?12l[?25h[?25l[62;222H3,1 [50;1H[?12l[?25h[?25l[62;222H4,17[51;17H[?12l[?25h[?25l[62;222H5,1 [52;1H[?12l[?25h[?25l[62;222H6,17[53;17H[?12l[?25h[?25l[62;222H7,1 [54;1H[?12l[?25h[?25l[62;222H8,17[55;17H[?12l[?25h[?25l[62;222H9[56;17H[?12l[?25h[?25l[62;221H60[57;17H[?12l[?25h[?25l[58;16H[106m([mfolder[106m)[m[62;221H[K[62;221H61,17[9C25%[58;17H[?12l[?25h[?25l(folder)[62;222H2,1 [59;1H[?12l[?25h[?25l[62;222H3,17[60;17H[?12l[?25h[?25l[61;16H[106m([70C)[m[62;221H[K[62;221H64,17[9C25%[61;17H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;5Hmove(os.getcwd()+[31m"/"[m+f, folder+[31m'/'[m+f)[62;221H[K[62;221H65,17[9C33%[60;16H([70C)[61;17H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H66,1[10C41%[61;1H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[34m# Copy metadata files[m[62;221H[K[62;221H67,17[9C50%[61;17H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hcopy(odor_path,folder)[62;221H[K[62;221H68,17[9C58%[61;17H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hcopy(protocol_path,folder)[62;221H[K[62;221H69,17[9C66%[61;17H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hcopy(locust_path,folder)[62;221H[K[62;221H70,17[9C75%[61;17H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1Hcopy(os.getcwd()+[31m"/antennalLobe.py"[m,folder)[62;221H[K[62;221H71,17[9C83%[61;15H[106m()[m[62;221H[K[62;221H71,17[9C83%[61;17H[?12l[?25h[?25l[1;61r[61;1H
[1;62r[62;221H[K[62;221H72,1[10C91%[60;15H()
[?12l[?25h[?25l[1;61r[61;1H
[1;62r[61;1H[36mprint[m([31m"Program Complete."[m)[62;221H[K[62;221H73,17[9CBot[61;17H[?12l[?25h[?25l[62;222H2,1 [60;1H[?12l[?25h[?25l[59;15H[106m()[m[62;221H[K[62;221H71,17[9CBot[59;17H[?12l[?25h[?25l()[62;222H0[58;17H[?12l[?25h[?25l[62;221H69[57;17H[?12l[?25h[?25l[62;222H8[56;17H[?12l[?25h[?25l[62;222H7[55;17H[?12l[?25h[?25l[62;222H6,1 [54;1H[?12l[?25h[?25l[62;222H5,17[53;17H[?12l[?25h[?25l[52;16H[106m([70C)[m[62;221H[K[62;221H64,17[9CBot[52;17H[?12l[?25h[?25l([70C)[62;222H3[51;17H[?12l[?25h[?25l[62;222H2,1 [50;1H[?12l[?25h[?25l[49;16H[106m([mfolder[106m)[m[62;221H[K[62;221H61,17[9CBot[49;17H[?12l[?25h[?25l(folder)[62;222H0[48;17H[?12l[?25h[?25l[62;221H59[47;17H[?12l[?25h[?25l[62;222H8[46;17H[?12l[?25h[?25l[62;222H7,1 [45;1H[?12l[?25h[?25l[62;222H6,17[44;17H[?12l[?25h[?25l[62;222H5,1 [43;1H[?12l[?25h[?25l[62;222H4,17[42;17H[?12l[?25h[?25l[62;222H3,1 [41;1H[?12l[?25h[?25l[62;222H2,17[